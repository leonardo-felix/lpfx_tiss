#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sat Jun  6 20:48:42 2015 by generateDS.py version 2.16a.
#
# Command line options:
#   ('-o', 'tissV3_02_01.py')
#
# Command line arguments:
#   tissV3_02_01.xsd
#
# Command line:
#   /usr/local/bin/generateDS.py -o "tissV3_02_01.py" tissV3_02_01.xsd
#
# Current working directory (os.getcwd()):
#   arquivos_tiss
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
from lxml import etree as etree_


Validate_simpletypes_ = True


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        parser = etree_.ETCompatXMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class mensagemTISS(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalho=None, operadoraParaPrestador=None, prestadorParaOperadora=None, epilogo=None, assinaturaDigital=None):
        self.original_tagname_ = None
        self.cabecalho = cabecalho
        self.operadoraParaPrestador = operadoraParaPrestador
        self.prestadorParaOperadora = prestadorParaOperadora
        self.epilogo = epilogo
        self.assinaturaDigital = assinaturaDigital
    def factory(*args_, **kwargs_):
        if mensagemTISS.subclass:
            return mensagemTISS.subclass(*args_, **kwargs_)
        else:
            return mensagemTISS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalho(self): return self.cabecalho
    def set_cabecalho(self, cabecalho): self.cabecalho = cabecalho
    def get_operadoraParaPrestador(self): return self.operadoraParaPrestador
    def set_operadoraParaPrestador(self, operadoraParaPrestador): self.operadoraParaPrestador = operadoraParaPrestador
    def get_prestadorParaOperadora(self): return self.prestadorParaOperadora
    def set_prestadorParaOperadora(self, prestadorParaOperadora): self.prestadorParaOperadora = prestadorParaOperadora
    def get_epilogo(self): return self.epilogo
    def set_epilogo(self, epilogo): self.epilogo = epilogo
    def get_assinaturaDigital(self): return self.assinaturaDigital
    def set_assinaturaDigital(self, assinaturaDigital): self.assinaturaDigital = assinaturaDigital
    def hasContent_(self):
        if (
            self.cabecalho is not None or
            self.operadoraParaPrestador is not None or
            self.prestadorParaOperadora is not None or
            self.epilogo is not None or
            self.assinaturaDigital is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='mensagemTISS', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mensagemTISS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='mensagemTISS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='mensagemTISS'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='mensagemTISS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalho is not None:
            self.cabecalho.export(outfile, level, namespace_, name_='cabecalho', pretty_print=pretty_print)
        if self.operadoraParaPrestador is not None:
            self.operadoraParaPrestador.export(outfile, level, namespace_, name_='operadoraParaPrestador', pretty_print=pretty_print)
        if self.prestadorParaOperadora is not None:
            self.prestadorParaOperadora.export(outfile, level, namespace_, name_='prestadorParaOperadora', pretty_print=pretty_print)
        if self.epilogo is not None:
            self.epilogo.export(outfile, level, namespace_, name_='epilogo', pretty_print=pretty_print)
        if self.assinaturaDigital is not None:
            self.assinaturaDigital.export(outfile, level, namespace_, name_='assinaturaDigital', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='mensagemTISS'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalho is not None:
            showIndent(outfile, level)
            outfile.write('cabecalho=model_.cabecalhoTransacao(\n')
            self.cabecalho.exportLiteral(outfile, level, name_='cabecalho')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.operadoraParaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('operadoraParaPrestador=model_.operadoraPrestador(\n')
            self.operadoraParaPrestador.exportLiteral(outfile, level, name_='operadoraParaPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.prestadorParaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('prestadorParaOperadora=model_.prestadorOperadora(\n')
            self.prestadorParaOperadora.exportLiteral(outfile, level, name_='prestadorParaOperadora')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.epilogo is not None:
            showIndent(outfile, level)
            outfile.write('epilogo=model_.epilogo(\n')
            self.epilogo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.assinaturaDigital is not None:
            showIndent(outfile, level)
            outfile.write('assinaturaDigital=model_.assinaturaDigital(\n')
            self.assinaturaDigital.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalho':
            obj_ = cabecalhoTransacao.factory()
            obj_.build(child_)
            self.cabecalho = obj_
            obj_.original_tagname_ = 'cabecalho'
        elif nodeName_ == 'operadoraParaPrestador':
            obj_ = operadoraPrestador.factory()
            obj_.build(child_)
            self.operadoraParaPrestador = obj_
            obj_.original_tagname_ = 'operadoraParaPrestador'
        elif nodeName_ == 'prestadorParaOperadora':
            obj_ = prestadorOperadora.factory()
            obj_.build(child_)
            self.prestadorParaOperadora = obj_
            obj_.original_tagname_ = 'prestadorParaOperadora'
        elif nodeName_ == 'epilogo':
            obj_ = epilogo.factory()
            obj_.build(child_)
            self.epilogo = obj_
            obj_.original_tagname_ = 'epilogo'
        elif nodeName_ == 'assinaturaDigital':
            obj_ = assinaturaDigital.factory()
            obj_.build(child_)
            self.assinaturaDigital = obj_
            obj_.original_tagname_ = 'assinaturaDigital'
# end class mensagemTISS


class cabecalhoTransacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoTransacao=None, falhaNegocio=None, origem=None, destino=None, versaoPadrao=None, loginSenhaPrestador=None):
        self.original_tagname_ = None
        self.identificacaoTransacao = identificacaoTransacao
        self.falhaNegocio = falhaNegocio
        self.validate_dm_tipoGlosa(self.falhaNegocio)
        self.origem = origem
        self.destino = destino
        self.versaoPadrao = versaoPadrao
        self.validate_dm_versao(self.versaoPadrao)
        self.loginSenhaPrestador = loginSenhaPrestador
    def factory(*args_, **kwargs_):
        if cabecalhoTransacao.subclass:
            return cabecalhoTransacao.subclass(*args_, **kwargs_)
        else:
            return cabecalhoTransacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoTransacao(self): return self.identificacaoTransacao
    def set_identificacaoTransacao(self, identificacaoTransacao): self.identificacaoTransacao = identificacaoTransacao
    def get_falhaNegocio(self): return self.falhaNegocio
    def set_falhaNegocio(self, falhaNegocio): self.falhaNegocio = falhaNegocio
    def get_origem(self): return self.origem
    def set_origem(self, origem): self.origem = origem
    def get_destino(self): return self.destino
    def set_destino(self, destino): self.destino = destino
    def get_versaoPadrao(self): return self.versaoPadrao
    def set_versaoPadrao(self, versaoPadrao): self.versaoPadrao = versaoPadrao
    def get_loginSenhaPrestador(self): return self.loginSenhaPrestador
    def set_loginSenhaPrestador(self, loginSenhaPrestador): self.loginSenhaPrestador = loginSenhaPrestador
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_dm_versao(self, value):
        # Validate type dm_versao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['3.02.00', '3.02.01']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_versao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.identificacaoTransacao is not None or
            self.falhaNegocio is not None or
            self.origem is not None or
            self.destino is not None or
            self.versaoPadrao is not None or
            self.loginSenhaPrestador is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cabecalhoTransacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cabecalhoTransacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cabecalhoTransacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cabecalhoTransacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cabecalhoTransacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoTransacao is not None:
            self.identificacaoTransacao.export(outfile, level, namespace_, name_='identificacaoTransacao', pretty_print=pretty_print)
        if self.falhaNegocio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfalhaNegocio>%s</%sfalhaNegocio>%s' % (namespace_, self.gds_format_string(quote_xml(self.falhaNegocio).encode(ExternalEncoding), input_name='falhaNegocio'), namespace_, eol_))
        if self.origem is not None:
            self.origem.export(outfile, level, namespace_, name_='origem', pretty_print=pretty_print)
        if self.destino is not None:
            self.destino.export(outfile, level, namespace_, name_='destino', pretty_print=pretty_print)
        if self.versaoPadrao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversaoPadrao>%s</%sversaoPadrao>%s' % (namespace_, self.gds_format_string(quote_xml(self.versaoPadrao).encode(ExternalEncoding), input_name='versaoPadrao'), namespace_, eol_))
        if self.loginSenhaPrestador is not None:
            self.loginSenhaPrestador.export(outfile, level, namespace_, name_='loginSenhaPrestador', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cabecalhoTransacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoTransacao is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoTransacao=model_.identificacaoTransacao(\n')
            self.identificacaoTransacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.falhaNegocio is not None:
            showIndent(outfile, level)
            outfile.write('falhaNegocio=%s,\n' % quote_python(self.falhaNegocio).encode(ExternalEncoding))
        if self.origem is not None:
            showIndent(outfile, level)
            outfile.write('origem=model_.origem(\n')
            self.origem.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.destino is not None:
            showIndent(outfile, level)
            outfile.write('destino=model_.destino(\n')
            self.destino.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.versaoPadrao is not None:
            showIndent(outfile, level)
            outfile.write('versaoPadrao=%s,\n' % quote_python(self.versaoPadrao).encode(ExternalEncoding))
        if self.loginSenhaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('loginSenhaPrestador=model_.ct_loginSenha(\n')
            self.loginSenhaPrestador.exportLiteral(outfile, level, name_='loginSenhaPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoTransacao':
            obj_ = identificacaoTransacao.factory()
            obj_.build(child_)
            self.identificacaoTransacao = obj_
            obj_.original_tagname_ = 'identificacaoTransacao'
        elif nodeName_ == 'falhaNegocio':
            falhaNegocio_ = child_.text
            falhaNegocio_ = self.gds_validate_string(falhaNegocio_, node, 'falhaNegocio')
            self.falhaNegocio = falhaNegocio_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.falhaNegocio)
        elif nodeName_ == 'origem':
            obj_ = origem.factory()
            obj_.build(child_)
            self.origem = obj_
            obj_.original_tagname_ = 'origem'
        elif nodeName_ == 'destino':
            obj_ = destino.factory()
            obj_.build(child_)
            self.destino = obj_
            obj_.original_tagname_ = 'destino'
        elif nodeName_ == 'versaoPadrao':
            versaoPadrao_ = child_.text
            versaoPadrao_ = self.gds_validate_string(versaoPadrao_, node, 'versaoPadrao')
            self.versaoPadrao = versaoPadrao_
            # validate type dm_versao
            self.validate_dm_versao(self.versaoPadrao)
        elif nodeName_ == 'loginSenhaPrestador':
            obj_ = ct_loginSenha.factory()
            obj_.build(child_)
            self.loginSenhaPrestador = obj_
            obj_.original_tagname_ = 'loginSenhaPrestador'
# end class cabecalhoTransacao


class identificacaoTransacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tipoTransacao=None, sequencialTransacao=None, dataRegistroTransacao=None, horaRegistroTransacao=None):
        self.original_tagname_ = None
        self.tipoTransacao = tipoTransacao
        self.validate_dm_tipoTransacao(self.tipoTransacao)
        self.sequencialTransacao = sequencialTransacao
        self.validate_st_texto12(self.sequencialTransacao)
        if isinstance(dataRegistroTransacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRegistroTransacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRegistroTransacao
        self.dataRegistroTransacao = initvalue_
        if isinstance(horaRegistroTransacao, basestring):
            initvalue_ = datetime_.datetime.strptime(horaRegistroTransacao, '%H:%M:%S').time()
        else:
            initvalue_ = horaRegistroTransacao
        self.horaRegistroTransacao = initvalue_
    def factory(*args_, **kwargs_):
        if identificacaoTransacao.subclass:
            return identificacaoTransacao.subclass(*args_, **kwargs_)
        else:
            return identificacaoTransacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tipoTransacao(self): return self.tipoTransacao
    def set_tipoTransacao(self, tipoTransacao): self.tipoTransacao = tipoTransacao
    def get_sequencialTransacao(self): return self.sequencialTransacao
    def set_sequencialTransacao(self, sequencialTransacao): self.sequencialTransacao = sequencialTransacao
    def get_dataRegistroTransacao(self): return self.dataRegistroTransacao
    def set_dataRegistroTransacao(self, dataRegistroTransacao): self.dataRegistroTransacao = dataRegistroTransacao
    def get_horaRegistroTransacao(self): return self.horaRegistroTransacao
    def set_horaRegistroTransacao(self, horaRegistroTransacao): self.horaRegistroTransacao = horaRegistroTransacao
    def validate_dm_tipoTransacao(self, value):
        # Validate type dm_tipoTransacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ENVIO_LOTE_GUIAS', 'ENVIO_ANEXO', 'SOLIC_DEMONSTRATIVO_RETORNO', 'SOLIC_STATUS_PROTOCOLO', 'SOLICITACAO_PROCEDIMENTOS', 'SOLICITA_STATUS_AUTORIZACAO', 'VERIFICA_ELEGIBILIDADE', 'CANCELA_GUIA', 'COMUNICACAO_BENEFICIARIO', 'RECURSO_GLOSA', 'SOLIC_STATUS_RECURSO_GLOSA', 'PROTOCOLO_RECEBIMENTO', 'PROTOCOLO_RECEBIMENTO_ANEXO', 'RECEBIMENTO_RECURSO_GLOSA', 'DEMONSTRATIVO_ANALISE_CONTA', 'DEMONSTRATIVO_PAGAMENTO', 'DEMONSTRATIVO_ODONTOLOGIA', 'SITUACAO_PROTOCOLO', 'RESPOSTA_SOLICITACAO', 'AUTORIZACAO_ODONTOLOGIA', 'STATUS_AUTORIZACAO', 'SITUACAO_ELEGIBILIDADE', 'CANCELAMENTO_GUIA_RECIBO', 'RECIBO_COMUNICACAO', 'RESPOSTA_RECURSO_GLOSA']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoTransacao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.tipoTransacao is not None or
            self.sequencialTransacao is not None or
            self.dataRegistroTransacao is not None or
            self.horaRegistroTransacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='identificacaoTransacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identificacaoTransacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='identificacaoTransacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='identificacaoTransacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='identificacaoTransacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tipoTransacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoTransacao>%s</%stipoTransacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoTransacao).encode(ExternalEncoding), input_name='tipoTransacao'), namespace_, eol_))
        if self.sequencialTransacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssequencialTransacao>%s</%ssequencialTransacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.sequencialTransacao).encode(ExternalEncoding), input_name='sequencialTransacao'), namespace_, eol_))
        if self.dataRegistroTransacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRegistroTransacao>%s</%sdataRegistroTransacao>%s' % (namespace_, self.gds_format_date(self.dataRegistroTransacao, input_name='dataRegistroTransacao'), namespace_, eol_))
        if self.horaRegistroTransacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraRegistroTransacao>%s</%shoraRegistroTransacao>%s' % (namespace_, self.gds_format_time(self.horaRegistroTransacao, input_name='horaRegistroTransacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='identificacaoTransacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.tipoTransacao is not None:
            showIndent(outfile, level)
            outfile.write('tipoTransacao=%s,\n' % quote_python(self.tipoTransacao).encode(ExternalEncoding))
        if self.sequencialTransacao is not None:
            showIndent(outfile, level)
            outfile.write('sequencialTransacao=%s,\n' % quote_python(self.sequencialTransacao).encode(ExternalEncoding))
        if self.dataRegistroTransacao is not None:
            showIndent(outfile, level)
            outfile.write('dataRegistroTransacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRegistroTransacao, input_name='dataRegistroTransacao'))
        if self.horaRegistroTransacao is not None:
            showIndent(outfile, level)
            outfile.write('horaRegistroTransacao=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaRegistroTransacao, input_name='horaRegistroTransacao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tipoTransacao':
            tipoTransacao_ = child_.text
            tipoTransacao_ = self.gds_validate_string(tipoTransacao_, node, 'tipoTransacao')
            self.tipoTransacao = tipoTransacao_
            # validate type dm_tipoTransacao
            self.validate_dm_tipoTransacao(self.tipoTransacao)
        elif nodeName_ == 'sequencialTransacao':
            sequencialTransacao_ = child_.text
            sequencialTransacao_ = self.gds_validate_string(sequencialTransacao_, node, 'sequencialTransacao')
            self.sequencialTransacao = sequencialTransacao_
            # validate type st_texto12
            self.validate_st_texto12(self.sequencialTransacao)
        elif nodeName_ == 'dataRegistroTransacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRegistroTransacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataRegistroTransacao)
        elif nodeName_ == 'horaRegistroTransacao':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaRegistroTransacao = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaRegistroTransacao)
# end class identificacaoTransacao


class origem(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoPrestador=None, registroANS=None):
        self.original_tagname_ = None
        self.identificacaoPrestador = identificacaoPrestador
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
    def factory(*args_, **kwargs_):
        if origem.subclass:
            return origem.subclass(*args_, **kwargs_)
        else:
            return origem(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoPrestador(self): return self.identificacaoPrestador
    def set_identificacaoPrestador(self, identificacaoPrestador): self.identificacaoPrestador = identificacaoPrestador
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def hasContent_(self):
        if (
            self.identificacaoPrestador is not None or
            self.registroANS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='origem', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='origem')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='origem', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='origem'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='origem', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoPrestador is not None:
            self.identificacaoPrestador.export(outfile, level, namespace_, name_='identificacaoPrestador', pretty_print=pretty_print)
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='origem'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoPrestador=model_.identificacaoPrestador(\n')
            self.identificacaoPrestador.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoPrestador':
            obj_ = identificacaoPrestador.factory()
            obj_.build(child_)
            self.identificacaoPrestador = obj_
            obj_.original_tagname_ = 'identificacaoPrestador'
        elif nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
# end class origem


class destino(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoPrestador=None, registroANS=None):
        self.original_tagname_ = None
        self.identificacaoPrestador = identificacaoPrestador
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
    def factory(*args_, **kwargs_):
        if destino.subclass:
            return destino.subclass(*args_, **kwargs_)
        else:
            return destino(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoPrestador(self): return self.identificacaoPrestador
    def set_identificacaoPrestador(self, identificacaoPrestador): self.identificacaoPrestador = identificacaoPrestador
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def hasContent_(self):
        if (
            self.identificacaoPrestador is not None or
            self.registroANS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='destino', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='destino')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='destino', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='destino'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='destino', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoPrestador is not None:
            self.identificacaoPrestador.export(outfile, level, namespace_, name_='identificacaoPrestador', pretty_print=pretty_print)
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='destino'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoPrestador=model_.ct_prestadorIdentificacao(\n')
            self.identificacaoPrestador.exportLiteral(outfile, level, name_='identificacaoPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_prestadorIdentificacao)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.identificacaoPrestador = obj_
            obj_.original_tagname_ = 'identificacaoPrestador'
        elif nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
# end class destino


class operadoraPrestador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, recebimentoLote=None, recebimentoAnexo=None, recebimentoRecursoGlosa=None, demonstrativosRetorno=None, situacaoProtocolo=None, autorizacaoServicos=None, situacaoAutorizacao=None, respostaElegibilidade=None, reciboCancelaGuia=None, reciboComunicacao=None, respostaRecursoGlosa=None):
        self.original_tagname_ = None
        self.recebimentoLote = recebimentoLote
        self.recebimentoAnexo = recebimentoAnexo
        self.recebimentoRecursoGlosa = recebimentoRecursoGlosa
        self.demonstrativosRetorno = demonstrativosRetorno
        self.situacaoProtocolo = situacaoProtocolo
        self.autorizacaoServicos = autorizacaoServicos
        self.situacaoAutorizacao = situacaoAutorizacao
        self.respostaElegibilidade = respostaElegibilidade
        self.reciboCancelaGuia = reciboCancelaGuia
        self.reciboComunicacao = reciboComunicacao
        self.respostaRecursoGlosa = respostaRecursoGlosa
    def factory(*args_, **kwargs_):
        if operadoraPrestador.subclass:
            return operadoraPrestador.subclass(*args_, **kwargs_)
        else:
            return operadoraPrestador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_recebimentoLote(self): return self.recebimentoLote
    def set_recebimentoLote(self, recebimentoLote): self.recebimentoLote = recebimentoLote
    def get_recebimentoAnexo(self): return self.recebimentoAnexo
    def set_recebimentoAnexo(self, recebimentoAnexo): self.recebimentoAnexo = recebimentoAnexo
    def get_recebimentoRecursoGlosa(self): return self.recebimentoRecursoGlosa
    def set_recebimentoRecursoGlosa(self, recebimentoRecursoGlosa): self.recebimentoRecursoGlosa = recebimentoRecursoGlosa
    def get_demonstrativosRetorno(self): return self.demonstrativosRetorno
    def set_demonstrativosRetorno(self, demonstrativosRetorno): self.demonstrativosRetorno = demonstrativosRetorno
    def get_situacaoProtocolo(self): return self.situacaoProtocolo
    def set_situacaoProtocolo(self, situacaoProtocolo): self.situacaoProtocolo = situacaoProtocolo
    def get_autorizacaoServicos(self): return self.autorizacaoServicos
    def set_autorizacaoServicos(self, autorizacaoServicos): self.autorizacaoServicos = autorizacaoServicos
    def get_situacaoAutorizacao(self): return self.situacaoAutorizacao
    def set_situacaoAutorizacao(self, situacaoAutorizacao): self.situacaoAutorizacao = situacaoAutorizacao
    def get_respostaElegibilidade(self): return self.respostaElegibilidade
    def set_respostaElegibilidade(self, respostaElegibilidade): self.respostaElegibilidade = respostaElegibilidade
    def get_reciboCancelaGuia(self): return self.reciboCancelaGuia
    def set_reciboCancelaGuia(self, reciboCancelaGuia): self.reciboCancelaGuia = reciboCancelaGuia
    def get_reciboComunicacao(self): return self.reciboComunicacao
    def set_reciboComunicacao(self, reciboComunicacao): self.reciboComunicacao = reciboComunicacao
    def get_respostaRecursoGlosa(self): return self.respostaRecursoGlosa
    def set_respostaRecursoGlosa(self, respostaRecursoGlosa): self.respostaRecursoGlosa = respostaRecursoGlosa
    def hasContent_(self):
        if (
            self.recebimentoLote is not None or
            self.recebimentoAnexo is not None or
            self.recebimentoRecursoGlosa is not None or
            self.demonstrativosRetorno is not None or
            self.situacaoProtocolo is not None or
            self.autorizacaoServicos is not None or
            self.situacaoAutorizacao is not None or
            self.respostaElegibilidade is not None or
            self.reciboCancelaGuia is not None or
            self.reciboComunicacao is not None or
            self.respostaRecursoGlosa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='operadoraPrestador', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='operadoraPrestador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='operadoraPrestador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='operadoraPrestador'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='operadoraPrestador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.recebimentoLote is not None:
            self.recebimentoLote.export(outfile, level, namespace_, name_='recebimentoLote', pretty_print=pretty_print)
        if self.recebimentoAnexo is not None:
            self.recebimentoAnexo.export(outfile, level, namespace_, name_='recebimentoAnexo', pretty_print=pretty_print)
        if self.recebimentoRecursoGlosa is not None:
            self.recebimentoRecursoGlosa.export(outfile, level, namespace_, name_='recebimentoRecursoGlosa', pretty_print=pretty_print)
        if self.demonstrativosRetorno is not None:
            self.demonstrativosRetorno.export(outfile, level, namespace_, name_='demonstrativosRetorno', pretty_print=pretty_print)
        if self.situacaoProtocolo is not None:
            self.situacaoProtocolo.export(outfile, level, namespace_, name_='situacaoProtocolo', pretty_print=pretty_print)
        if self.autorizacaoServicos is not None:
            self.autorizacaoServicos.export(outfile, level, namespace_, name_='autorizacaoServicos', pretty_print=pretty_print)
        if self.situacaoAutorizacao is not None:
            self.situacaoAutorizacao.export(outfile, level, namespace_, name_='situacaoAutorizacao', pretty_print=pretty_print)
        if self.respostaElegibilidade is not None:
            self.respostaElegibilidade.export(outfile, level, namespace_, name_='respostaElegibilidade', pretty_print=pretty_print)
        if self.reciboCancelaGuia is not None:
            self.reciboCancelaGuia.export(outfile, level, namespace_, name_='reciboCancelaGuia', pretty_print=pretty_print)
        if self.reciboComunicacao is not None:
            self.reciboComunicacao.export(outfile, level, namespace_, name_='reciboComunicacao', pretty_print=pretty_print)
        if self.respostaRecursoGlosa is not None:
            self.respostaRecursoGlosa.export(outfile, level, namespace_, name_='respostaRecursoGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='operadoraPrestador'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.recebimentoLote is not None:
            showIndent(outfile, level)
            outfile.write('recebimentoLote=model_.ct_recebimentoLote(\n')
            self.recebimentoLote.exportLiteral(outfile, level, name_='recebimentoLote')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.recebimentoAnexo is not None:
            showIndent(outfile, level)
            outfile.write('recebimentoAnexo=model_.recebimentoAnexo(\n')
            self.recebimentoAnexo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.recebimentoRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('recebimentoRecursoGlosa=model_.ct_recebimentoRecurso(\n')
            self.recebimentoRecursoGlosa.exportLiteral(outfile, level, name_='recebimentoRecursoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.demonstrativosRetorno is not None:
            showIndent(outfile, level)
            outfile.write('demonstrativosRetorno=model_.ct_demonstrativoRetorno(\n')
            self.demonstrativosRetorno.exportLiteral(outfile, level, name_='demonstrativosRetorno')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.situacaoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('situacaoProtocolo=model_.ct_situacaoProtocolo(\n')
            self.situacaoProtocolo.exportLiteral(outfile, level, name_='situacaoProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.autorizacaoServicos is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoServicos=model_.ct_situacaoAutorizacao(\n')
            self.autorizacaoServicos.exportLiteral(outfile, level, name_='autorizacaoServicos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.situacaoAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('situacaoAutorizacao=model_.ct_situacaoAutorizacao(\n')
            self.situacaoAutorizacao.exportLiteral(outfile, level, name_='situacaoAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.respostaElegibilidade is not None:
            showIndent(outfile, level)
            outfile.write('respostaElegibilidade=model_.respostaElegibilidade(\n')
            self.respostaElegibilidade.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboCancelaGuia is not None:
            showIndent(outfile, level)
            outfile.write('reciboCancelaGuia=model_.ct_reciboCancelaGuia(\n')
            self.reciboCancelaGuia.exportLiteral(outfile, level, name_='reciboCancelaGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboComunicacao is not None:
            showIndent(outfile, level)
            outfile.write('reciboComunicacao=model_.ct_reciboComunicacao(\n')
            self.reciboComunicacao.exportLiteral(outfile, level, name_='reciboComunicacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.respostaRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('respostaRecursoGlosa=model_.ct_respostaGlosa(\n')
            self.respostaRecursoGlosa.exportLiteral(outfile, level, name_='respostaRecursoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'recebimentoLote':
            obj_ = ct_recebimentoLote.factory()
            obj_.build(child_)
            self.recebimentoLote = obj_
            obj_.original_tagname_ = 'recebimentoLote'
        elif nodeName_ == 'recebimentoAnexo':
            obj_ = recebimentoAnexo.factory()
            obj_.build(child_)
            self.recebimentoAnexo = obj_
            obj_.original_tagname_ = 'recebimentoAnexo'
        elif nodeName_ == 'recebimentoRecursoGlosa':
            obj_ = ct_recebimentoRecurso.factory()
            obj_.build(child_)
            self.recebimentoRecursoGlosa = obj_
            obj_.original_tagname_ = 'recebimentoRecursoGlosa'
        elif nodeName_ == 'demonstrativosRetorno':
            obj_ = ct_demonstrativoRetorno.factory()
            obj_.build(child_)
            self.demonstrativosRetorno = obj_
            obj_.original_tagname_ = 'demonstrativosRetorno'
        elif nodeName_ == 'situacaoProtocolo':
            obj_ = ct_situacaoProtocolo.factory()
            obj_.build(child_)
            self.situacaoProtocolo = obj_
            obj_.original_tagname_ = 'situacaoProtocolo'
        elif nodeName_ == 'autorizacaoServicos':
            obj_ = ct_situacaoAutorizacao.factory()
            obj_.build(child_)
            self.autorizacaoServicos = obj_
            obj_.original_tagname_ = 'autorizacaoServicos'
        elif nodeName_ == 'situacaoAutorizacao':
            obj_ = ct_situacaoAutorizacao.factory()
            obj_.build(child_)
            self.situacaoAutorizacao = obj_
            obj_.original_tagname_ = 'situacaoAutorizacao'
        elif nodeName_ == 'respostaElegibilidade':
            obj_ = respostaElegibilidade.factory()
            obj_.build(child_)
            self.respostaElegibilidade = obj_
            obj_.original_tagname_ = 'respostaElegibilidade'
        elif nodeName_ == 'reciboCancelaGuia':
            obj_ = ct_reciboCancelaGuia.factory()
            obj_.build(child_)
            self.reciboCancelaGuia = obj_
            obj_.original_tagname_ = 'reciboCancelaGuia'
        elif nodeName_ == 'reciboComunicacao':
            obj_ = ct_reciboComunicacao.factory()
            obj_.build(child_)
            self.reciboComunicacao = obj_
            obj_.original_tagname_ = 'reciboComunicacao'
        elif nodeName_ == 'respostaRecursoGlosa':
            obj_ = ct_respostaGlosa.factory()
            obj_.build(child_)
            self.respostaRecursoGlosa = obj_
            obj_.original_tagname_ = 'respostaRecursoGlosa'
# end class operadoraPrestador


class recebimentoAnexo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, protocoloRecebimentoAnexo=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.protocoloRecebimentoAnexo = protocoloRecebimentoAnexo
    def factory(*args_, **kwargs_):
        if recebimentoAnexo.subclass:
            return recebimentoAnexo.subclass(*args_, **kwargs_)
        else:
            return recebimentoAnexo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_protocoloRecebimentoAnexo(self): return self.protocoloRecebimentoAnexo
    def set_protocoloRecebimentoAnexo(self, protocoloRecebimentoAnexo): self.protocoloRecebimentoAnexo = protocoloRecebimentoAnexo
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.protocoloRecebimentoAnexo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='recebimentoAnexo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='recebimentoAnexo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='recebimentoAnexo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='recebimentoAnexo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='recebimentoAnexo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.protocoloRecebimentoAnexo is not None:
            self.protocoloRecebimentoAnexo.export(outfile, level, namespace_, name_='protocoloRecebimentoAnexo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='recebimentoAnexo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.protocoloRecebimentoAnexo is not None:
            showIndent(outfile, level)
            outfile.write('protocoloRecebimentoAnexo=model_.ct_anexoRecebimento(\n')
            self.protocoloRecebimentoAnexo.exportLiteral(outfile, level, name_='protocoloRecebimentoAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'protocoloRecebimentoAnexo':
            obj_ = ct_anexoRecebimento.factory()
            obj_.build(child_)
            self.protocoloRecebimentoAnexo = obj_
            obj_.original_tagname_ = 'protocoloRecebimentoAnexo'
# end class recebimentoAnexo


class respostaElegibilidade(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, reciboElegibilidade=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.reciboElegibilidade = reciboElegibilidade
    def factory(*args_, **kwargs_):
        if respostaElegibilidade.subclass:
            return respostaElegibilidade.subclass(*args_, **kwargs_)
        else:
            return respostaElegibilidade(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_reciboElegibilidade(self): return self.reciboElegibilidade
    def set_reciboElegibilidade(self, reciboElegibilidade): self.reciboElegibilidade = reciboElegibilidade
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.reciboElegibilidade is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='respostaElegibilidade', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='respostaElegibilidade')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='respostaElegibilidade', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='respostaElegibilidade'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='respostaElegibilidade', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.reciboElegibilidade is not None:
            self.reciboElegibilidade.export(outfile, level, namespace_, name_='reciboElegibilidade', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='respostaElegibilidade'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboElegibilidade is not None:
            showIndent(outfile, level)
            outfile.write('reciboElegibilidade=model_.ct_elegibilidadeRecibo(\n')
            self.reciboElegibilidade.exportLiteral(outfile, level, name_='reciboElegibilidade')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'reciboElegibilidade':
            obj_ = ct_elegibilidadeRecibo.factory()
            obj_.build(child_)
            self.reciboElegibilidade = obj_
            obj_.original_tagname_ = 'reciboElegibilidade'
# end class respostaElegibilidade


class prestadorOperadora(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, loteGuias=None, loteAnexos=None, solicitacaoDemonstrativoRetorno=None, solicitacaoStatusProtocolo=None, solicitacaoProcedimento=None, solicitaStatusAutorizacao=None, verificaElegibilidade=None, cancelaGuia=None, comunicacaoInternacao=None, recursoGlosa=None, solicitacaoStatusRecursoGlosa=None):
        self.original_tagname_ = None
        self.loteGuias = loteGuias
        self.loteAnexos = loteAnexos
        self.solicitacaoDemonstrativoRetorno = solicitacaoDemonstrativoRetorno
        self.solicitacaoStatusProtocolo = solicitacaoStatusProtocolo
        self.solicitacaoProcedimento = solicitacaoProcedimento
        self.solicitaStatusAutorizacao = solicitaStatusAutorizacao
        self.verificaElegibilidade = verificaElegibilidade
        self.cancelaGuia = cancelaGuia
        self.comunicacaoInternacao = comunicacaoInternacao
        self.recursoGlosa = recursoGlosa
        self.solicitacaoStatusRecursoGlosa = solicitacaoStatusRecursoGlosa
    def factory(*args_, **kwargs_):
        if prestadorOperadora.subclass:
            return prestadorOperadora.subclass(*args_, **kwargs_)
        else:
            return prestadorOperadora(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_loteGuias(self): return self.loteGuias
    def set_loteGuias(self, loteGuias): self.loteGuias = loteGuias
    def get_loteAnexos(self): return self.loteAnexos
    def set_loteAnexos(self, loteAnexos): self.loteAnexos = loteAnexos
    def get_solicitacaoDemonstrativoRetorno(self): return self.solicitacaoDemonstrativoRetorno
    def set_solicitacaoDemonstrativoRetorno(self, solicitacaoDemonstrativoRetorno): self.solicitacaoDemonstrativoRetorno = solicitacaoDemonstrativoRetorno
    def get_solicitacaoStatusProtocolo(self): return self.solicitacaoStatusProtocolo
    def set_solicitacaoStatusProtocolo(self, solicitacaoStatusProtocolo): self.solicitacaoStatusProtocolo = solicitacaoStatusProtocolo
    def get_solicitacaoProcedimento(self): return self.solicitacaoProcedimento
    def set_solicitacaoProcedimento(self, solicitacaoProcedimento): self.solicitacaoProcedimento = solicitacaoProcedimento
    def get_solicitaStatusAutorizacao(self): return self.solicitaStatusAutorizacao
    def set_solicitaStatusAutorizacao(self, solicitaStatusAutorizacao): self.solicitaStatusAutorizacao = solicitaStatusAutorizacao
    def get_verificaElegibilidade(self): return self.verificaElegibilidade
    def set_verificaElegibilidade(self, verificaElegibilidade): self.verificaElegibilidade = verificaElegibilidade
    def get_cancelaGuia(self): return self.cancelaGuia
    def set_cancelaGuia(self, cancelaGuia): self.cancelaGuia = cancelaGuia
    def get_comunicacaoInternacao(self): return self.comunicacaoInternacao
    def set_comunicacaoInternacao(self, comunicacaoInternacao): self.comunicacaoInternacao = comunicacaoInternacao
    def get_recursoGlosa(self): return self.recursoGlosa
    def set_recursoGlosa(self, recursoGlosa): self.recursoGlosa = recursoGlosa
    def get_solicitacaoStatusRecursoGlosa(self): return self.solicitacaoStatusRecursoGlosa
    def set_solicitacaoStatusRecursoGlosa(self, solicitacaoStatusRecursoGlosa): self.solicitacaoStatusRecursoGlosa = solicitacaoStatusRecursoGlosa
    def hasContent_(self):
        if (
            self.loteGuias is not None or
            self.loteAnexos is not None or
            self.solicitacaoDemonstrativoRetorno is not None or
            self.solicitacaoStatusProtocolo is not None or
            self.solicitacaoProcedimento is not None or
            self.solicitaStatusAutorizacao is not None or
            self.verificaElegibilidade is not None or
            self.cancelaGuia is not None or
            self.comunicacaoInternacao is not None or
            self.recursoGlosa is not None or
            self.solicitacaoStatusRecursoGlosa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='prestadorOperadora', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='prestadorOperadora')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='prestadorOperadora', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='prestadorOperadora'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='prestadorOperadora', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.loteGuias is not None:
            self.loteGuias.export(outfile, level, namespace_, name_='loteGuias', pretty_print=pretty_print)
        if self.loteAnexos is not None:
            self.loteAnexos.export(outfile, level, namespace_, name_='loteAnexos', pretty_print=pretty_print)
        if self.solicitacaoDemonstrativoRetorno is not None:
            self.solicitacaoDemonstrativoRetorno.export(outfile, level, namespace_, name_='solicitacaoDemonstrativoRetorno', pretty_print=pretty_print)
        if self.solicitacaoStatusProtocolo is not None:
            self.solicitacaoStatusProtocolo.export(outfile, level, namespace_, name_='solicitacaoStatusProtocolo', pretty_print=pretty_print)
        if self.solicitacaoProcedimento is not None:
            self.solicitacaoProcedimento.export(outfile, level, namespace_, name_='solicitacaoProcedimento', pretty_print=pretty_print)
        if self.solicitaStatusAutorizacao is not None:
            self.solicitaStatusAutorizacao.export(outfile, level, namespace_, name_='solicitaStatusAutorizacao', pretty_print=pretty_print)
        if self.verificaElegibilidade is not None:
            self.verificaElegibilidade.export(outfile, level, namespace_, name_='verificaElegibilidade', pretty_print=pretty_print)
        if self.cancelaGuia is not None:
            self.cancelaGuia.export(outfile, level, namespace_, name_='cancelaGuia', pretty_print=pretty_print)
        if self.comunicacaoInternacao is not None:
            self.comunicacaoInternacao.export(outfile, level, namespace_, name_='comunicacaoInternacao', pretty_print=pretty_print)
        if self.recursoGlosa is not None:
            self.recursoGlosa.export(outfile, level, namespace_, name_='recursoGlosa', pretty_print=pretty_print)
        if self.solicitacaoStatusRecursoGlosa is not None:
            self.solicitacaoStatusRecursoGlosa.export(outfile, level, namespace_, name_='solicitacaoStatusRecursoGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='prestadorOperadora'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.loteGuias is not None:
            showIndent(outfile, level)
            outfile.write('loteGuias=model_.ctm_guiaLote(\n')
            self.loteGuias.exportLiteral(outfile, level, name_='loteGuias')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.loteAnexos is not None:
            showIndent(outfile, level)
            outfile.write('loteAnexos=model_.ct_anexoLote(\n')
            self.loteAnexos.exportLiteral(outfile, level, name_='loteAnexos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoDemonstrativoRetorno is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoDemonstrativoRetorno=model_.ct_demonstrativoSolicitacao(\n')
            self.solicitacaoDemonstrativoRetorno.exportLiteral(outfile, level, name_='solicitacaoDemonstrativoRetorno')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoStatusProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoStatusProtocolo=model_.ct_protocoloSolicitacaoStatus(\n')
            self.solicitacaoStatusProtocolo.exportLiteral(outfile, level, name_='solicitacaoStatusProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoProcedimento=model_.ct_solicitacaoProcedimento(\n')
            self.solicitacaoProcedimento.exportLiteral(outfile, level, name_='solicitacaoProcedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitaStatusAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('solicitaStatusAutorizacao=model_.ct_autorizacaoSolicitaStatus(\n')
            self.solicitaStatusAutorizacao.exportLiteral(outfile, level, name_='solicitaStatusAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.verificaElegibilidade is not None:
            showIndent(outfile, level)
            outfile.write('verificaElegibilidade=model_.ct_elegibilidadeVerifica(\n')
            self.verificaElegibilidade.exportLiteral(outfile, level, name_='verificaElegibilidade')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.cancelaGuia is not None:
            showIndent(outfile, level)
            outfile.write('cancelaGuia=model_.ct_guiaCancelamento(\n')
            self.cancelaGuia.exportLiteral(outfile, level, name_='cancelaGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.comunicacaoInternacao is not None:
            showIndent(outfile, level)
            outfile.write('comunicacaoInternacao=model_.ctm_beneficiarioComunicacao(\n')
            self.comunicacaoInternacao.exportLiteral(outfile, level, name_='comunicacaoInternacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.recursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('recursoGlosa=model_.ct_guiaRecursoLote(\n')
            self.recursoGlosa.exportLiteral(outfile, level, name_='recursoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoStatusRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoStatusRecursoGlosa=model_.ct_protocoloSolicitacaoStatus(\n')
            self.solicitacaoStatusRecursoGlosa.exportLiteral(outfile, level, name_='solicitacaoStatusRecursoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'loteGuias':
            obj_ = ctm_guiaLote.factory()
            obj_.build(child_)
            self.loteGuias = obj_
            obj_.original_tagname_ = 'loteGuias'
        elif nodeName_ == 'loteAnexos':
            obj_ = ct_anexoLote.factory()
            obj_.build(child_)
            self.loteAnexos = obj_
            obj_.original_tagname_ = 'loteAnexos'
        elif nodeName_ == 'solicitacaoDemonstrativoRetorno':
            obj_ = ct_demonstrativoSolicitacao.factory()
            obj_.build(child_)
            self.solicitacaoDemonstrativoRetorno = obj_
            obj_.original_tagname_ = 'solicitacaoDemonstrativoRetorno'
        elif nodeName_ == 'solicitacaoStatusProtocolo':
            obj_ = ct_protocoloSolicitacaoStatus.factory()
            obj_.build(child_)
            self.solicitacaoStatusProtocolo = obj_
            obj_.original_tagname_ = 'solicitacaoStatusProtocolo'
        elif nodeName_ == 'solicitacaoProcedimento':
            obj_ = ct_solicitacaoProcedimento.factory()
            obj_.build(child_)
            self.solicitacaoProcedimento = obj_
            obj_.original_tagname_ = 'solicitacaoProcedimento'
        elif nodeName_ == 'solicitaStatusAutorizacao':
            obj_ = ct_autorizacaoSolicitaStatus.factory()
            obj_.build(child_)
            self.solicitaStatusAutorizacao = obj_
            obj_.original_tagname_ = 'solicitaStatusAutorizacao'
        elif nodeName_ == 'verificaElegibilidade':
            obj_ = ct_elegibilidadeVerifica.factory()
            obj_.build(child_)
            self.verificaElegibilidade = obj_
            obj_.original_tagname_ = 'verificaElegibilidade'
        elif nodeName_ == 'cancelaGuia':
            obj_ = ct_guiaCancelamento.factory()
            obj_.build(child_)
            self.cancelaGuia = obj_
            obj_.original_tagname_ = 'cancelaGuia'
        elif nodeName_ == 'comunicacaoInternacao':
            obj_ = ctm_beneficiarioComunicacao.factory()
            obj_.build(child_)
            self.comunicacaoInternacao = obj_
            obj_.original_tagname_ = 'comunicacaoInternacao'
        elif nodeName_ == 'recursoGlosa':
            obj_ = ct_guiaRecursoLote.factory()
            obj_.build(child_)
            self.recursoGlosa = obj_
            obj_.original_tagname_ = 'recursoGlosa'
        elif nodeName_ == 'solicitacaoStatusRecursoGlosa':
            obj_ = ct_protocoloSolicitacaoStatus.factory()
            obj_.build(child_)
            self.solicitacaoStatusRecursoGlosa = obj_
            obj_.original_tagname_ = 'solicitacaoStatusRecursoGlosa'
# end class prestadorOperadora


class epilogo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, hash=None):
        self.original_tagname_ = None
        self.hash = hash
    def factory(*args_, **kwargs_):
        if epilogo.subclass:
            return epilogo.subclass(*args_, **kwargs_)
        else:
            return epilogo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_hash(self): return self.hash
    def set_hash(self, hash): self.hash = hash
    def hasContent_(self):
        if (
            self.hash is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='epilogo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='epilogo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='epilogo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='epilogo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='epilogo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.hash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shash>%s</%shash>%s' % (namespace_, self.gds_format_string(quote_xml(self.hash).encode(ExternalEncoding), input_name='hash'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='epilogo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.hash is not None:
            showIndent(outfile, level)
            outfile.write('hash=%s,\n' % quote_python(self.hash).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'hash':
            hash_ = child_.text
            hash_ = self.gds_validate_string(hash_, node, 'hash')
            self.hash = hash_
# end class epilogo


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None, extensiontype_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Object(self): return self.Object
    def set_Object(self, Object): self.Object = Object
    def add_Object(self, value): self.Object.append(value)
    def insert_Object_at(self, index, value): self.Object.insert(index, value)
    def replace_Object_at(self, index, value): self.Object[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SignatureType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespace_='ds:', name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespace_='ds:', name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespace_='ds:', name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            Object_.export(outfile, level, namespace_='ds:', name_='Object', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignatureType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SignedInfo is not None:
            showIndent(outfile, level)
            outfile.write('SignedInfo=model_.SignedInfo(\n')
            self.SignedInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureValue is not None:
            showIndent(outfile, level)
            outfile.write('SignatureValue=model_.SignatureValue(\n')
            self.SignatureValue.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.KeyInfo is not None:
            showIndent(outfile, level)
            outfile.write('KeyInfo=model_.KeyInfo(\n')
            self.KeyInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Object=[\n')
        level += 1
        for Object_ in self.Object:
            showIndent(outfile, level)
            outfile.write('model_.Object(\n')
            Object_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory()
            obj_.build(child_)
            self.Object.append(obj_)
            obj_.original_tagname_ = 'Object'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SignatureValueType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SignatureValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='SignatureValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SignedInfoType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SignedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespace_='ds:', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespace_='ds:', name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='ds:', name_='Reference', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignedInfoType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CanonicalizationMethod is not None:
            showIndent(outfile, level)
            outfile.write('CanonicalizationMethod=model_.CanonicalizationMethod(\n')
            self.CanonicalizationMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignatureMethod is not None:
            showIndent(outfile, level)
            outfile.write('SignatureMethod=model_.SignatureMethod(\n')
            self.SignatureMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('Reference=[\n')
        level += 1
        for Reference_ in self.Reference:
            showIndent(outfile, level)
            outfile.write('model_.Reference(\n')
            Reference_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='CanonicalizationMethodType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='CanonicalizationMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='CanonicalizationMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.HMACOutputLength = HMACOutputLength
        self.validate_HMACOutputLengthType(self.HMACOutputLength)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HMACOutputLength(self): return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength): self.HMACOutputLength = HMACOutputLength
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_HMACOutputLengthType(self, value):
        # Validate type HMACOutputLengthType, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SignatureMethodType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SignatureMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignatureMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HMACOutputLength' and child_.text is not None:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'HMACOutputLength', ival_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, Id=None, URI=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.original_tagname_ = None
        self.Type = _cast(None, Type)
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ReferenceType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ReferenceType'):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (self.gds_format_string(quote_attrib(self.URI).encode(ExternalEncoding), input_name='URI'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_='ds:', name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespace_='ds:', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDigestValue>%s</%sDigestValue>%s' % (namespace_, self.gds_format_base64(self.DigestValue, input_name='DigestValue'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ReferenceType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            showIndent(outfile, level)
            outfile.write('URI="%s",\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.Transforms(\n')
            self.Transforms.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestMethod is not None:
            showIndent(outfile, level)
            outfile.write('DigestMethod=model_.DigestMethod(\n')
            self.DigestMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DigestValue is not None:
            showIndent(outfile, level)
            outfile.write('DigestValue=model_.base64Binary(\n')
            self.DigestValue.exportLiteral(outfile, level, name_='DigestValue')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        self.original_tagname_ = None
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform_at(self, index, value): self.Transform.insert(index, value)
    def replace_Transform_at(self, index, value): self.Transform[index] = value
    def hasContent_(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='TransformsType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='TransformsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespace_='ds:', name_='Transform', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='TransformsType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Transform=[\n')
        level += 1
        for Transform_ in self.Transform:
            showIndent(outfile, level)
            outfile.write('model_.Transform(\n')
            Transform_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def add_XPath(self, value): self.XPath.append(value)
    def insert_XPath_at(self, index, value): self.XPath.insert(index, value)
    def replace_XPath_at(self, index, value): self.XPath[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='TransformType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='TransformType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='TransformType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='DigestMethodType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='DigestMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (self.gds_format_string(quote_attrib(self.Algorithm).encode(ExternalEncoding), input_name='Algorithm'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='DigestMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            showIndent(outfile, level)
            outfile.write('Algorithm="%s",\n' % (self.Algorithm,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyName(self): return self.KeyName
    def set_KeyName(self, KeyName): self.KeyName = KeyName
    def add_KeyName(self, value): self.KeyName.append(value)
    def insert_KeyName_at(self, index, value): self.KeyName.insert(index, value)
    def replace_KeyName_at(self, index, value): self.KeyName[index] = value
    def get_KeyValue(self): return self.KeyValue
    def set_KeyValue(self, KeyValue): self.KeyValue = KeyValue
    def add_KeyValue(self, value): self.KeyValue.append(value)
    def insert_KeyValue_at(self, index, value): self.KeyValue.insert(index, value)
    def replace_KeyValue_at(self, index, value): self.KeyValue[index] = value
    def get_RetrievalMethod(self): return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod): self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value): self.RetrievalMethod.append(value)
    def insert_RetrievalMethod_at(self, index, value): self.RetrievalMethod.insert(index, value)
    def replace_RetrievalMethod_at(self, index, value): self.RetrievalMethod[index] = value
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def add_X509Data(self, value): self.X509Data.append(value)
    def insert_X509Data_at(self, index, value): self.X509Data.insert(index, value)
    def replace_X509Data_at(self, index, value): self.X509Data[index] = value
    def get_PGPData(self): return self.PGPData
    def set_PGPData(self, PGPData): self.PGPData = PGPData
    def add_PGPData(self, value): self.PGPData.append(value)
    def insert_PGPData_at(self, index, value): self.PGPData.insert(index, value)
    def replace_PGPData_at(self, index, value): self.PGPData[index] = value
    def get_SPKIData(self): return self.SPKIData
    def set_SPKIData(self, SPKIData): self.SPKIData = SPKIData
    def add_SPKIData(self, value): self.SPKIData.append(value)
    def insert_SPKIData_at(self, index, value): self.SPKIData.insert(index, value)
    def replace_SPKIData_at(self, index, value): self.SPKIData[index] = value
    def get_MgmtData(self): return self.MgmtData
    def set_MgmtData(self, MgmtData): self.MgmtData = MgmtData
    def add_MgmtData(self, value): self.MgmtData.append(value)
    def insert_MgmtData_at(self, index, value): self.MgmtData.insert(index, value)
    def replace_MgmtData_at(self, index, value): self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='KeyInfoType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='KeyInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='KeyInfoType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethod.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509Data.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPData.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIData.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.DSAKeyValue = DSAKeyValue
        self.RSAKeyValue = RSAKeyValue
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DSAKeyValue(self): return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue): self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='KeyValueType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='KeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='KeyValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValue.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Type=None, URI=None, Transforms=None):
        self.original_tagname_ = None
        self.Type = _cast(None, Type)
        self.URI = _cast(None, URI)
        self.Transforms = Transforms
    def factory(*args_, **kwargs_):
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def hasContent_(self):
        if (
            self.Transforms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='RetrievalMethodType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RetrievalMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='RetrievalMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='RetrievalMethodType'):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (self.gds_format_string(quote_attrib(self.Type).encode(ExternalEncoding), input_name='Type'), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (self.gds_format_string(quote_attrib(self.URI).encode(ExternalEncoding), input_name='URI'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespace_='ds:', name_='Transforms', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='RetrievalMethodType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            showIndent(outfile, level)
            outfile.write('Type="%s",\n' % (self.Type,))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            showIndent(outfile, level)
            outfile.write('URI="%s",\n' % (self.URI,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Transforms is not None:
            showIndent(outfile, level)
            outfile.write('Transforms=model_.Transforms(\n')
            self.Transforms.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if X509IssuerSerial is None:
            self.X509IssuerSerial = []
        else:
            self.X509IssuerSerial = X509IssuerSerial
        if X509SKI is None:
            self.X509SKI = []
        else:
            self.X509SKI = X509SKI
        if X509SubjectName is None:
            self.X509SubjectName = []
        else:
            self.X509SubjectName = X509SubjectName
        if X509Certificate is None:
            self.X509Certificate = []
        else:
            self.X509Certificate = X509Certificate
        if X509CRL is None:
            self.X509CRL = []
        else:
            self.X509CRL = X509CRL
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerSerial(self): return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial): self.X509IssuerSerial = X509IssuerSerial
    def add_X509IssuerSerial(self, value): self.X509IssuerSerial.append(value)
    def insert_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial.insert(index, value)
    def replace_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial[index] = value
    def get_X509SKI(self): return self.X509SKI
    def set_X509SKI(self, X509SKI): self.X509SKI = X509SKI
    def add_X509SKI(self, value): self.X509SKI.append(value)
    def insert_X509SKI_at(self, index, value): self.X509SKI.insert(index, value)
    def replace_X509SKI_at(self, index, value): self.X509SKI[index] = value
    def get_X509SubjectName(self): return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName): self.X509SubjectName = X509SubjectName
    def add_X509SubjectName(self, value): self.X509SubjectName.append(value)
    def insert_X509SubjectName_at(self, index, value): self.X509SubjectName.insert(index, value)
    def replace_X509SubjectName_at(self, index, value): self.X509SubjectName[index] = value
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def add_X509Certificate(self, value): self.X509Certificate.append(value)
    def insert_X509Certificate_at(self, index, value): self.X509Certificate.insert(index, value)
    def replace_X509Certificate_at(self, index, value): self.X509Certificate[index] = value
    def get_X509CRL(self): return self.X509CRL
    def set_X509CRL(self, X509CRL): self.X509CRL = X509CRL
    def add_X509CRL(self, value): self.X509CRL.append(value)
    def insert_X509CRL_at(self, index, value): self.X509CRL.insert(index, value)
    def replace_X509CRL_at(self, index, value): self.X509CRL[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.X509IssuerSerial or
            self.X509SKI or
            self.X509SubjectName or
            self.X509Certificate or
            self.X509CRL or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='X509DataType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='X509DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for X509IssuerSerial_ in self.X509IssuerSerial:
            X509IssuerSerial_.export(outfile, level, namespace_, name_='X509IssuerSerial', pretty_print=pretty_print)
        for X509SKI_ in self.X509SKI:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SKI>%s</%sX509SKI>%s' % (namespace_, self.gds_format_base64(X509SKI_, input_name='X509SKI'), namespace_, eol_))
        for X509SubjectName_ in self.X509SubjectName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SubjectName>%s</%sX509SubjectName>%s' % (namespace_, self.gds_format_string(quote_xml(X509SubjectName_).encode(ExternalEncoding), input_name='X509SubjectName'), namespace_, eol_))
        for X509Certificate_ in self.X509Certificate:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509Certificate>%s</%sX509Certificate>%s' % (namespace_, self.gds_format_base64(X509Certificate_, input_name='X509Certificate'), namespace_, eol_))
        for X509CRL_ in self.X509CRL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509CRL>%s</%sX509CRL>%s' % (namespace_, self.gds_format_base64(X509CRL_, input_name='X509CRL'), namespace_, eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='X509DataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('X509IssuerSerial=[\n')
        level += 1
        for X509IssuerSerial_ in self.X509IssuerSerial:
            showIndent(outfile, level)
            outfile.write('model_.X509IssuerSerialType(\n')
            X509IssuerSerial_.exportLiteral(outfile, level, name_='X509IssuerSerialType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('X509SKI=[\n')
        level += 1
        for X509SKI_ in self.X509SKI:
            showIndent(outfile, level)
            outfile.write('model_.base64Binary(\n')
            X509SKI_.exportLiteral(outfile, level, name_='base64Binary')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('X509SubjectName=[\n')
        level += 1
        for X509SubjectName_ in self.X509SubjectName:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(X509SubjectName_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('X509Certificate=[\n')
        level += 1
        for X509Certificate_ in self.X509Certificate:
            showIndent(outfile, level)
            outfile.write('model_.base64Binary(\n')
            X509Certificate_.exportLiteral(outfile, level, name_='base64Binary')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('X509CRL=[\n')
        level += 1
        for X509CRL_ in self.X509CRL:
            showIndent(outfile, level)
            outfile.write('model_.base64Binary(\n')
            X509CRL_.exportLiteral(outfile, level, name_='base64Binary')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.anytypeobjs_ is not None:
            showIndent(outfile, level)
            outfile.write('anytypeobjs_=model_.anytypeobjs_(\n')
            self.anytypeobjs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory()
            obj_.build(child_)
            self.X509IssuerSerial.append(obj_)
            obj_.original_tagname_ = 'X509IssuerSerial'
        elif nodeName_ == 'X509SKI':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'X509SKI')
            else:
                bval_ = None
            self.X509SKI.append(bval_)
        elif nodeName_ == 'X509SubjectName':
            X509SubjectName_ = child_.text
            X509SubjectName_ = self.gds_validate_string(X509SubjectName_, node, 'X509SubjectName')
            self.X509SubjectName.append(X509SubjectName_)
        elif nodeName_ == 'X509Certificate':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'X509Certificate')
            else:
                bval_ = None
            self.X509Certificate.append(bval_)
        elif nodeName_ == 'X509CRL':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'X509CRL')
            else:
                bval_ = None
            self.X509CRL.append(bval_)
        else:
            obj_ = self.gds_build_any(child_, 'X509DataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None):
        self.original_tagname_ = None
        self.X509IssuerName = X509IssuerName
        self.X509SerialNumber = X509SerialNumber
    def factory(*args_, **kwargs_):
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerName(self): return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName): self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self): return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber): self.X509SerialNumber = X509SerialNumber
    def hasContent_(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='X509IssuerSerialType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='X509IssuerSerialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='X509IssuerSerialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='X509IssuerSerialType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509IssuerName>%s</%sX509IssuerName>%s' % (namespace_, self.gds_format_string(quote_xml(self.X509IssuerName).encode(ExternalEncoding), input_name='X509IssuerName'), namespace_, eol_))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sX509SerialNumber>%s</%sX509SerialNumber>%s' % (namespace_, self.gds_format_integer(self.X509SerialNumber, input_name='X509SerialNumber'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='X509IssuerSerialType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.X509IssuerName is not None:
            showIndent(outfile, level)
            outfile.write('X509IssuerName=%s,\n' % quote_python(self.X509IssuerName).encode(ExternalEncoding))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level)
            outfile.write('X509SerialNumber=%d,\n' % self.X509SerialNumber)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerName':
            X509IssuerName_ = child_.text
            X509IssuerName_ = self.gds_validate_string(X509IssuerName_, node, 'X509IssuerName')
            self.X509IssuerName = X509IssuerName_
        elif nodeName_ == 'X509SerialNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'X509SerialNumber')
            self.X509SerialNumber = ival_
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.PGPKeyID = PGPKeyID
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PGPKeyID(self): return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID): self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_ or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='PGPDataType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PGPDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='PGPDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='PGPDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyID>%s</%sPGPKeyID>%s' % (namespace_, self.gds_format_base64(self.PGPKeyID, input_name='PGPKeyID'), namespace_, eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespace_, self.gds_format_base64(self.PGPKeyPacket, input_name='PGPKeyPacket'), namespace_, eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPGPKeyPacket>%s</%sPGPKeyPacket>%s' % (namespace_, self.gds_format_base64(self.PGPKeyPacket, input_name='PGPKeyPacket'), namespace_, eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='PGPDataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.PGPKeyID is not None:
            showIndent(outfile, level)
            outfile.write('PGPKeyID=model_.base64Binary(\n')
            self.PGPKeyID.exportLiteral(outfile, level, name_='PGPKeyID')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level)
            outfile.write('PGPKeyPacket=model_.base64Binary(\n')
            self.PGPKeyPacket.exportLiteral(outfile, level, name_='PGPKeyPacket')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level)
            outfile.write('PGPKeyPacket=model_.base64Binary(\n')
            self.PGPKeyPacket.exportLiteral(outfile, level, name_='PGPKeyPacket')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('anytypeobjs_=[\n')
        level += 1
        for anytypeobjs_ in self.anytypeobjs_:
            anytypeobjs_.exportLiteral(outfile, level)
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PGPKeyID':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PGPKeyID')
            else:
                bval_ = None
            self.PGPKeyID = bval_
        elif nodeName_ == 'PGPKeyPacket':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PGPKeyPacket')
            else:
                bval_ = None
            self.PGPKeyPacket = bval_
        elif nodeName_ == 'PGPKeyPacket':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PGPKeyPacket')
            else:
                bval_ = None
            self.PGPKeyPacket = bval_
        else:
            obj_ = self.gds_build_any(child_, 'PGPDataType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if SPKISexp is None:
            self.SPKISexp = []
        else:
            self.SPKISexp = SPKISexp
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPKISexp(self): return self.SPKISexp
    def set_SPKISexp(self, SPKISexp): self.SPKISexp = SPKISexp
    def add_SPKISexp(self, value): self.SPKISexp.append(value)
    def insert_SPKISexp_at(self, index, value): self.SPKISexp.insert(index, value)
    def replace_SPKISexp_at(self, index, value): self.SPKISexp[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.SPKISexp or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SPKIDataType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SPKIDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SPKIDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SPKIDataType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SPKISexp_ in self.SPKISexp:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSPKISexp>%s</%sSPKISexp>%s' % (namespace_, self.gds_format_base64(SPKISexp_, input_name='SPKISexp'), namespace_, eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SPKIDataType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SPKISexp=[\n')
        level += 1
        for SPKISexp_ in self.SPKISexp:
            showIndent(outfile, level)
            outfile.write('model_.base64Binary(\n')
            SPKISexp_.exportLiteral(outfile, level, name_='base64Binary')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.anytypeobjs_ is not None:
            showIndent(outfile, level)
            outfile.write('anytypeobjs_=model_.anytypeobjs_(\n')
            self.anytypeobjs_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SPKISexp':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'SPKISexp')
            else:
                bval_ = None
            self.SPKISexp.append(bval_)
        else:
            obj_ = self.gds_build_any(child_, 'SPKIDataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MimeType=None, Id=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.MimeType = _cast(None, MimeType)
        self.Id = _cast(None, Id)
        self.Encoding = _cast(None, Encoding)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_Encoding(self): return self.Encoding
    def set_Encoding(self, Encoding): self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ObjectType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ObjectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ObjectType'):
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            outfile.write(' MimeType=%s' % (self.gds_format_string(quote_attrib(self.MimeType).encode(ExternalEncoding), input_name='MimeType'), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            outfile.write(' Encoding=%s' % (self.gds_format_string(quote_attrib(self.Encoding).encode(ExternalEncoding), input_name='Encoding'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ObjectType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            showIndent(outfile, level)
            outfile.write('MimeType="%s",\n' % (self.MimeType,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            showIndent(outfile, level)
            outfile.write('Encoding="%s",\n' % (self.Encoding,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            self.MimeType = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            self.Encoding = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ManifestType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManifestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespace_='ds:', name_='Reference', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ManifestType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Reference=[\n')
        level += 1
        for Reference_ in self.Reference:
            showIndent(outfile, level)
            outfile.write('model_.Reference(\n')
            Reference_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
    def factory(*args_, **kwargs_):
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignatureProperty(self): return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty): self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value): self.SignatureProperty.append(value)
    def insert_SignatureProperty_at(self, index, value): self.SignatureProperty.insert(index, value)
    def replace_SignatureProperty_at(self, index, value): self.SignatureProperty[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignatureProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SignaturePropertiesType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SignaturePropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            SignatureProperty_.export(outfile, level, namespace_='ds:', name_='SignatureProperty', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignaturePropertiesType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SignatureProperty=[\n')
        level += 1
        for SignatureProperty_ in self.SignatureProperty:
            showIndent(outfile, level)
            outfile.write('model_.SignatureProperty(\n')
            SignatureProperty_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory()
            obj_.build(child_)
            self.SignatureProperty.append(obj_)
            obj_.original_tagname_ = 'SignatureProperty'
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Target = _cast(None, Target)
        self.Id = _cast(None, Id)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.valueOf_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='SignaturePropertyType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignaturePropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='SignaturePropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            outfile.write(' Target=%s' % (self.gds_format_string(quote_attrib(self.Target).encode(ExternalEncoding), input_name='Target'), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_format_string(quote_attrib(self.Id).encode(ExternalEncoding), input_name='Id'), ))
    def exportChildren(self, outfile, level, namespace_='ans:', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='SignaturePropertyType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            showIndent(outfile, level)
            outfile.write('Target="%s",\n' % (self.Target,))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            showIndent(outfile, level)
            outfile.write('Id="%s",\n' % (self.Id,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None):
        self.original_tagname_ = None
        self.P = P
        self.validate_CryptoBinary(self.P)
        self.Q = Q
        self.validate_CryptoBinary(self.Q)
        self.G = G
        self.validate_CryptoBinary(self.G)
        self.Y = Y
        self.validate_CryptoBinary(self.Y)
        self.J = J
        self.validate_CryptoBinary(self.J)
        self.Seed = Seed
        self.validate_CryptoBinary(self.Seed)
        self.PgenCounter = PgenCounter
        self.validate_CryptoBinary(self.PgenCounter)
    def factory(*args_, **kwargs_):
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_P(self): return self.P
    def set_P(self, P): self.P = P
    def get_Q(self): return self.Q
    def set_Q(self, Q): self.Q = Q
    def get_G(self): return self.G
    def set_G(self, G): self.G = G
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_J(self): return self.J
    def set_J(self, J): self.J = J
    def get_Seed(self): return self.Seed
    def set_Seed(self, Seed): self.Seed = Seed
    def get_PgenCounter(self): return self.PgenCounter
    def set_PgenCounter(self, PgenCounter): self.PgenCounter = PgenCounter
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='DSAKeyValueType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='DSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='DSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sP>%s</%sP>%s' % (namespace_, self.gds_format_base64(self.P, input_name='P'), namespace_, eol_))
        if self.Q is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQ>%s</%sQ>%s' % (namespace_, self.gds_format_base64(self.Q, input_name='Q'), namespace_, eol_))
        if self.G is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sG>%s</%sG>%s' % (namespace_, self.gds_format_base64(self.G, input_name='G'), namespace_, eol_))
        if self.Y is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sY>%s</%sY>%s' % (namespace_, self.gds_format_base64(self.Y, input_name='Y'), namespace_, eol_))
        if self.J is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJ>%s</%sJ>%s' % (namespace_, self.gds_format_base64(self.J, input_name='J'), namespace_, eol_))
        if self.Seed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSeed>%s</%sSeed>%s' % (namespace_, self.gds_format_base64(self.Seed, input_name='Seed'), namespace_, eol_))
        if self.PgenCounter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPgenCounter>%s</%sPgenCounter>%s' % (namespace_, self.gds_format_base64(self.PgenCounter, input_name='PgenCounter'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='DSAKeyValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.P is not None:
            showIndent(outfile, level)
            outfile.write('P=model_.base64Binary(\n')
            self.P.exportLiteral(outfile, level, name_='P')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Q is not None:
            showIndent(outfile, level)
            outfile.write('Q=model_.base64Binary(\n')
            self.Q.exportLiteral(outfile, level, name_='Q')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.G is not None:
            showIndent(outfile, level)
            outfile.write('G=model_.base64Binary(\n')
            self.G.exportLiteral(outfile, level, name_='G')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Y is not None:
            showIndent(outfile, level)
            outfile.write('Y=model_.base64Binary(\n')
            self.Y.exportLiteral(outfile, level, name_='Y')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.J is not None:
            showIndent(outfile, level)
            outfile.write('J=model_.base64Binary(\n')
            self.J.exportLiteral(outfile, level, name_='J')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Seed is not None:
            showIndent(outfile, level)
            outfile.write('Seed=model_.base64Binary(\n')
            self.Seed.exportLiteral(outfile, level, name_='Seed')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PgenCounter is not None:
            showIndent(outfile, level)
            outfile.write('PgenCounter=model_.base64Binary(\n')
            self.PgenCounter.exportLiteral(outfile, level, name_='PgenCounter')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'P':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'P')
            else:
                bval_ = None
            self.P = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.P)
        elif nodeName_ == 'Q':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Q')
            else:
                bval_ = None
            self.Q = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Q)
        elif nodeName_ == 'G':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'G')
            else:
                bval_ = None
            self.G = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.G)
        elif nodeName_ == 'Y':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Y')
            else:
                bval_ = None
            self.Y = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Y)
        elif nodeName_ == 'J':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'J')
            else:
                bval_ = None
            self.J = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.J)
        elif nodeName_ == 'Seed':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Seed')
            else:
                bval_ = None
            self.Seed = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Seed)
        elif nodeName_ == 'PgenCounter':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PgenCounter')
            else:
                bval_ = None
            self.PgenCounter = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.PgenCounter)
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.original_tagname_ = None
        self.Modulus = Modulus
        self.validate_CryptoBinary(self.Modulus)
        self.Exponent = Exponent
        self.validate_CryptoBinary(self.Exponent)
    def factory(*args_, **kwargs_):
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='RSAKeyValueType', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='RSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModulus>%s</%sModulus>%s' % (namespace_, self.gds_format_base64(self.Modulus, input_name='Modulus'), namespace_, eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExponent>%s</%sExponent>%s' % (namespace_, self.gds_format_base64(self.Exponent, input_name='Exponent'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='RSAKeyValueType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Modulus is not None:
            showIndent(outfile, level)
            outfile.write('Modulus=model_.base64Binary(\n')
            self.Modulus.exportLiteral(outfile, level, name_='Modulus')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Exponent is not None:
            showIndent(outfile, level)
            outfile.write('Exponent=model_.base64Binary(\n')
            self.Exponent.exportLiteral(outfile, level, name_='Exponent')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Modulus)
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Exponent)
# end class RSAKeyValueType


class ct_anexoCabecalho(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaAnexo=None, numeroGuiaReferenciada=None, numeroGuiaOperadora=None, dataSolicitacao=None, senha=None, dataAutorizacao=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaAnexo = numeroGuiaAnexo
        self.validate_st_texto20(self.numeroGuiaAnexo)
        self.numeroGuiaReferenciada = numeroGuiaReferenciada
        self.validate_st_texto20(self.numeroGuiaReferenciada)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
        self.senha = senha
        self.validate_st_texto20(self.senha)
        if isinstance(dataAutorizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataAutorizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataAutorizacao
        self.dataAutorizacao = initvalue_
    def factory(*args_, **kwargs_):
        if ct_anexoCabecalho.subclass:
            return ct_anexoCabecalho.subclass(*args_, **kwargs_)
        else:
            return ct_anexoCabecalho(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaAnexo(self): return self.numeroGuiaAnexo
    def set_numeroGuiaAnexo(self, numeroGuiaAnexo): self.numeroGuiaAnexo = numeroGuiaAnexo
    def get_numeroGuiaReferenciada(self): return self.numeroGuiaReferenciada
    def set_numeroGuiaReferenciada(self, numeroGuiaReferenciada): self.numeroGuiaReferenciada = numeroGuiaReferenciada
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_dataAutorizacao(self): return self.dataAutorizacao
    def set_dataAutorizacao(self, dataAutorizacao): self.dataAutorizacao = dataAutorizacao
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaAnexo is not None or
            self.numeroGuiaReferenciada is not None or
            self.numeroGuiaOperadora is not None or
            self.dataSolicitacao is not None or
            self.senha is not None or
            self.dataAutorizacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_anexoCabecalho', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_anexoCabecalho')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_anexoCabecalho', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_anexoCabecalho'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_anexoCabecalho', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaAnexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaAnexo>%s</%snumeroGuiaAnexo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaAnexo).encode(ExternalEncoding), input_name='numeroGuiaAnexo'), namespace_, eol_))
        if self.numeroGuiaReferenciada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaReferenciada>%s</%snumeroGuiaReferenciada>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaReferenciada).encode(ExternalEncoding), input_name='numeroGuiaReferenciada'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataAutorizacao>%s</%sdataAutorizacao>%s' % (namespace_, self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_anexoCabecalho'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaAnexo is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaAnexo=%s,\n' % quote_python(self.numeroGuiaAnexo).encode(ExternalEncoding))
        if self.numeroGuiaReferenciada is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaReferenciada=%s,\n' % quote_python(self.numeroGuiaReferenciada).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataAutorizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaAnexo':
            numeroGuiaAnexo_ = child_.text
            numeroGuiaAnexo_ = self.gds_validate_string(numeroGuiaAnexo_, node, 'numeroGuiaAnexo')
            self.numeroGuiaAnexo = numeroGuiaAnexo_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaAnexo)
        elif nodeName_ == 'numeroGuiaReferenciada':
            numeroGuiaReferenciada_ = child_.text
            numeroGuiaReferenciada_ = self.gds_validate_string(numeroGuiaReferenciada_, node, 'numeroGuiaReferenciada')
            self.numeroGuiaReferenciada = numeroGuiaReferenciada_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaReferenciada)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'dataAutorizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataAutorizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataAutorizacao)
# end class ct_anexoCabecalho


class ct_anexoRecebimento(GeneratedsSuper):
    """estrutura de recibo do recebimento de um lote de anexos dos
    prestadores"""
    subclass = None
    superclass = None
    def __init__(self, nrProtocoloRecebimento=None, dataEnvioAnexo=None, numeroLote=None, registroANS=None, dadosPrestador=None, qtAnexosClinicos=None, anexosClinicos=None, observacao=None):
        self.original_tagname_ = None
        self.nrProtocoloRecebimento = nrProtocoloRecebimento
        self.validate_st_texto12(self.nrProtocoloRecebimento)
        if isinstance(dataEnvioAnexo, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioAnexo, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioAnexo
        self.dataEnvioAnexo = initvalue_
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.dadosPrestador = dadosPrestador
        self.qtAnexosClinicos = qtAnexosClinicos
        self.validate_st_numerico3(self.qtAnexosClinicos)
        self.anexosClinicos = anexosClinicos
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if ct_anexoRecebimento.subclass:
            return ct_anexoRecebimento.subclass(*args_, **kwargs_)
        else:
            return ct_anexoRecebimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrProtocoloRecebimento(self): return self.nrProtocoloRecebimento
    def set_nrProtocoloRecebimento(self, nrProtocoloRecebimento): self.nrProtocoloRecebimento = nrProtocoloRecebimento
    def get_dataEnvioAnexo(self): return self.dataEnvioAnexo
    def set_dataEnvioAnexo(self, dataEnvioAnexo): self.dataEnvioAnexo = dataEnvioAnexo
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_qtAnexosClinicos(self): return self.qtAnexosClinicos
    def set_qtAnexosClinicos(self, qtAnexosClinicos): self.qtAnexosClinicos = qtAnexosClinicos
    def get_anexosClinicos(self): return self.anexosClinicos
    def set_anexosClinicos(self, anexosClinicos): self.anexosClinicos = anexosClinicos
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nrProtocoloRecebimento is not None or
            self.dataEnvioAnexo is not None or
            self.numeroLote is not None or
            self.registroANS is not None or
            self.dadosPrestador is not None or
            self.qtAnexosClinicos is not None or
            self.anexosClinicos is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_anexoRecebimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_anexoRecebimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_anexoRecebimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_anexoRecebimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_anexoRecebimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrProtocoloRecebimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrProtocoloRecebimento>%s</%snrProtocoloRecebimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrProtocoloRecebimento).encode(ExternalEncoding), input_name='nrProtocoloRecebimento'), namespace_, eol_))
        if self.dataEnvioAnexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioAnexo>%s</%sdataEnvioAnexo>%s' % (namespace_, self.gds_format_date(self.dataEnvioAnexo, input_name='dataEnvioAnexo'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.qtAnexosClinicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtAnexosClinicos>%s</%sqtAnexosClinicos>%s' % (namespace_, self.gds_format_integer(self.qtAnexosClinicos, input_name='qtAnexosClinicos'), namespace_, eol_))
        if self.anexosClinicos is not None:
            self.anexosClinicos.export(outfile, level, namespace_, name_='anexosClinicos', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_anexoRecebimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nrProtocoloRecebimento is not None:
            showIndent(outfile, level)
            outfile.write('nrProtocoloRecebimento=%s,\n' % quote_python(self.nrProtocoloRecebimento).encode(ExternalEncoding))
        if self.dataEnvioAnexo is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioAnexo=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioAnexo, input_name='dataEnvioAnexo'))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.qtAnexosClinicos is not None:
            showIndent(outfile, level)
            outfile.write('qtAnexosClinicos=%d,\n' % self.qtAnexosClinicos)
        if self.anexosClinicos is not None:
            showIndent(outfile, level)
            outfile.write('anexosClinicos=model_.anexosClinicos(\n')
            self.anexosClinicos.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrProtocoloRecebimento':
            nrProtocoloRecebimento_ = child_.text
            nrProtocoloRecebimento_ = self.gds_validate_string(nrProtocoloRecebimento_, node, 'nrProtocoloRecebimento')
            self.nrProtocoloRecebimento = nrProtocoloRecebimento_
            # validate type st_texto12
            self.validate_st_texto12(self.nrProtocoloRecebimento)
        elif nodeName_ == 'dataEnvioAnexo':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioAnexo = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioAnexo)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'qtAnexosClinicos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'qtAnexosClinicos')
            self.qtAnexosClinicos = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.qtAnexosClinicos)
        elif nodeName_ == 'anexosClinicos':
            obj_ = anexosClinicos.factory()
            obj_.build(child_)
            self.anexosClinicos = obj_
            obj_.original_tagname_ = 'anexosClinicos'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class ct_anexoRecebimento


class anexosClinicos(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anexoOPME=None, anexoQuimio=None, anexoRadio=None, anexoSituacaoInicial=None):
        self.original_tagname_ = None
        self.anexoOPME = anexoOPME
        self.anexoQuimio = anexoQuimio
        self.anexoRadio = anexoRadio
        if anexoSituacaoInicial is None:
            self.anexoSituacaoInicial = []
        else:
            self.anexoSituacaoInicial = anexoSituacaoInicial
    def factory(*args_, **kwargs_):
        if anexosClinicos.subclass:
            return anexosClinicos.subclass(*args_, **kwargs_)
        else:
            return anexosClinicos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anexoOPME(self): return self.anexoOPME
    def set_anexoOPME(self, anexoOPME): self.anexoOPME = anexoOPME
    def get_anexoQuimio(self): return self.anexoQuimio
    def set_anexoQuimio(self, anexoQuimio): self.anexoQuimio = anexoQuimio
    def get_anexoRadio(self): return self.anexoRadio
    def set_anexoRadio(self, anexoRadio): self.anexoRadio = anexoRadio
    def get_anexoSituacaoInicial(self): return self.anexoSituacaoInicial
    def set_anexoSituacaoInicial(self, anexoSituacaoInicial): self.anexoSituacaoInicial = anexoSituacaoInicial
    def add_anexoSituacaoInicial(self, value): self.anexoSituacaoInicial.append(value)
    def insert_anexoSituacaoInicial_at(self, index, value): self.anexoSituacaoInicial.insert(index, value)
    def replace_anexoSituacaoInicial_at(self, index, value): self.anexoSituacaoInicial[index] = value
    def hasContent_(self):
        if (
            self.anexoOPME is not None or
            self.anexoQuimio is not None or
            self.anexoRadio is not None or
            self.anexoSituacaoInicial
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='anexosClinicos', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='anexosClinicos')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='anexosClinicos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='anexosClinicos'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='anexosClinicos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anexoOPME is not None:
            self.anexoOPME.export(outfile, level, namespace_, name_='anexoOPME', pretty_print=pretty_print)
        if self.anexoQuimio is not None:
            self.anexoQuimio.export(outfile, level, namespace_, name_='anexoQuimio', pretty_print=pretty_print)
        if self.anexoRadio is not None:
            self.anexoRadio.export(outfile, level, namespace_, name_='anexoRadio', pretty_print=pretty_print)
        for anexoSituacaoInicial_ in self.anexoSituacaoInicial:
            anexoSituacaoInicial_.export(outfile, level, namespace_, name_='anexoSituacaoInicial', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='anexosClinicos'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.anexoOPME is not None:
            showIndent(outfile, level)
            outfile.write('anexoOPME=model_.ctm_autorizacaoOPME(\n')
            self.anexoOPME.exportLiteral(outfile, level, name_='anexoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.anexoQuimio is not None:
            showIndent(outfile, level)
            outfile.write('anexoQuimio=model_.ctm_autorizacaoQuimio(\n')
            self.anexoQuimio.exportLiteral(outfile, level, name_='anexoQuimio')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.anexoRadio is not None:
            showIndent(outfile, level)
            outfile.write('anexoRadio=model_.ctm_autorizacaoRadio(\n')
            self.anexoRadio.exportLiteral(outfile, level, name_='anexoRadio')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('anexoSituacaoInicial=[\n')
        level += 1
        for anexoSituacaoInicial_ in self.anexoSituacaoInicial:
            showIndent(outfile, level)
            outfile.write('model_.cto_anexoSituacaoInicial(\n')
            anexoSituacaoInicial_.exportLiteral(outfile, level, name_='cto_anexoSituacaoInicial')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'anexoOPME':
            obj_ = ctm_autorizacaoOPME.factory()
            obj_.build(child_)
            self.anexoOPME = obj_
            obj_.original_tagname_ = 'anexoOPME'
        elif nodeName_ == 'anexoQuimio':
            obj_ = ctm_autorizacaoQuimio.factory()
            obj_.build(child_)
            self.anexoQuimio = obj_
            obj_.original_tagname_ = 'anexoQuimio'
        elif nodeName_ == 'anexoRadio':
            obj_ = ctm_autorizacaoRadio.factory()
            obj_.build(child_)
            self.anexoRadio = obj_
            obj_.original_tagname_ = 'anexoRadio'
        elif nodeName_ == 'anexoSituacaoInicial':
            obj_ = cto_anexoSituacaoInicial.factory()
            obj_.build(child_)
            self.anexoSituacaoInicial.append(obj_)
            obj_.original_tagname_ = 'anexoSituacaoInicial'
# end class anexosClinicos


class ct_autorizacaoDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, dataAutorizacao=None, senha=None, dataValidadeSenha=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        if isinstance(dataAutorizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataAutorizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataAutorizacao
        self.dataAutorizacao = initvalue_
        self.senha = senha
        self.validate_st_texto20(self.senha)
        if isinstance(dataValidadeSenha, basestring):
            initvalue_ = datetime_.datetime.strptime(dataValidadeSenha, '%Y-%m-%d').date()
        else:
            initvalue_ = dataValidadeSenha
        self.dataValidadeSenha = initvalue_
    def factory(*args_, **kwargs_):
        if ct_autorizacaoDados.subclass:
            return ct_autorizacaoDados.subclass(*args_, **kwargs_)
        else:
            return ct_autorizacaoDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dataAutorizacao(self): return self.dataAutorizacao
    def set_dataAutorizacao(self, dataAutorizacao): self.dataAutorizacao = dataAutorizacao
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_dataValidadeSenha(self): return self.dataValidadeSenha
    def set_dataValidadeSenha(self, dataValidadeSenha): self.dataValidadeSenha = dataValidadeSenha
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.dataAutorizacao is not None or
            self.senha is not None or
            self.dataValidadeSenha is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_autorizacaoDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_autorizacaoDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_autorizacaoDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataAutorizacao>%s</%sdataAutorizacao>%s' % (namespace_, self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.dataValidadeSenha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataValidadeSenha>%s</%sdataValidadeSenha>%s' % (namespace_, self.gds_format_date(self.dataValidadeSenha, input_name='dataValidadeSenha'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_autorizacaoDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataAutorizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.dataValidadeSenha is not None:
            showIndent(outfile, level)
            outfile.write('dataValidadeSenha=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataValidadeSenha, input_name='dataValidadeSenha'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dataAutorizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataAutorizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataAutorizacao)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'dataValidadeSenha':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataValidadeSenha = dval_
            # validate type st_data
            self.validate_st_data(self.dataValidadeSenha)
# end class ct_autorizacaoDados


class ct_autorizacaoSADT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaOperadora=None, dataAutorizacao=None, senha=None, dataValidadeSenha=None):
        self.original_tagname_ = None
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        if isinstance(dataAutorizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataAutorizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataAutorizacao
        self.dataAutorizacao = initvalue_
        self.senha = senha
        self.validate_st_texto20(self.senha)
        if isinstance(dataValidadeSenha, basestring):
            initvalue_ = datetime_.datetime.strptime(dataValidadeSenha, '%Y-%m-%d').date()
        else:
            initvalue_ = dataValidadeSenha
        self.dataValidadeSenha = initvalue_
    def factory(*args_, **kwargs_):
        if ct_autorizacaoSADT.subclass:
            return ct_autorizacaoSADT.subclass(*args_, **kwargs_)
        else:
            return ct_autorizacaoSADT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dataAutorizacao(self): return self.dataAutorizacao
    def set_dataAutorizacao(self, dataAutorizacao): self.dataAutorizacao = dataAutorizacao
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_dataValidadeSenha(self): return self.dataValidadeSenha
    def set_dataValidadeSenha(self, dataValidadeSenha): self.dataValidadeSenha = dataValidadeSenha
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.numeroGuiaOperadora is not None or
            self.dataAutorizacao is not None or
            self.senha is not None or
            self.dataValidadeSenha is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoSADT', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_autorizacaoSADT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_autorizacaoSADT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_autorizacaoSADT'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoSADT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataAutorizacao>%s</%sdataAutorizacao>%s' % (namespace_, self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.dataValidadeSenha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataValidadeSenha>%s</%sdataValidadeSenha>%s' % (namespace_, self.gds_format_date(self.dataValidadeSenha, input_name='dataValidadeSenha'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_autorizacaoSADT'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataAutorizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.dataValidadeSenha is not None:
            showIndent(outfile, level)
            outfile.write('dataValidadeSenha=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataValidadeSenha, input_name='dataValidadeSenha'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dataAutorizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataAutorizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataAutorizacao)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'dataValidadeSenha':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataValidadeSenha = dval_
            # validate type st_data
            self.validate_st_data(self.dataValidadeSenha)
# end class ct_autorizacaoSADT


class ct_autorizacaoInternacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaOperadora=None, dataAutorizacao=None, senha=None, dataValidadeSenha=None):
        self.original_tagname_ = None
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        if isinstance(dataAutorizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataAutorizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataAutorizacao
        self.dataAutorizacao = initvalue_
        self.senha = senha
        self.validate_st_texto20(self.senha)
        if isinstance(dataValidadeSenha, basestring):
            initvalue_ = datetime_.datetime.strptime(dataValidadeSenha, '%Y-%m-%d').date()
        else:
            initvalue_ = dataValidadeSenha
        self.dataValidadeSenha = initvalue_
    def factory(*args_, **kwargs_):
        if ct_autorizacaoInternacao.subclass:
            return ct_autorizacaoInternacao.subclass(*args_, **kwargs_)
        else:
            return ct_autorizacaoInternacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dataAutorizacao(self): return self.dataAutorizacao
    def set_dataAutorizacao(self, dataAutorizacao): self.dataAutorizacao = dataAutorizacao
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_dataValidadeSenha(self): return self.dataValidadeSenha
    def set_dataValidadeSenha(self, dataValidadeSenha): self.dataValidadeSenha = dataValidadeSenha
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.numeroGuiaOperadora is not None or
            self.dataAutorizacao is not None or
            self.senha is not None or
            self.dataValidadeSenha is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoInternacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_autorizacaoInternacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_autorizacaoInternacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_autorizacaoInternacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoInternacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataAutorizacao>%s</%sdataAutorizacao>%s' % (namespace_, self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.dataValidadeSenha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataValidadeSenha>%s</%sdataValidadeSenha>%s' % (namespace_, self.gds_format_date(self.dataValidadeSenha, input_name='dataValidadeSenha'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_autorizacaoInternacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataAutorizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.dataValidadeSenha is not None:
            showIndent(outfile, level)
            outfile.write('dataValidadeSenha=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataValidadeSenha, input_name='dataValidadeSenha'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dataAutorizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataAutorizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataAutorizacao)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'dataValidadeSenha':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataValidadeSenha = dval_
            # validate type st_data
            self.validate_st_data(self.dataValidadeSenha)
# end class ct_autorizacaoInternacao


class ct_autorizacaoSolicitaStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoSolicitacao=None, dadosBeneficiario=None, dadosContratado=None):
        self.original_tagname_ = None
        self.identificacaoSolicitacao = identificacaoSolicitacao
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosContratado = dadosContratado
    def factory(*args_, **kwargs_):
        if ct_autorizacaoSolicitaStatus.subclass:
            return ct_autorizacaoSolicitaStatus.subclass(*args_, **kwargs_)
        else:
            return ct_autorizacaoSolicitaStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoSolicitacao(self): return self.identificacaoSolicitacao
    def set_identificacaoSolicitacao(self, identificacaoSolicitacao): self.identificacaoSolicitacao = identificacaoSolicitacao
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def hasContent_(self):
        if (
            self.identificacaoSolicitacao is not None or
            self.dadosBeneficiario is not None or
            self.dadosContratado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoSolicitaStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_autorizacaoSolicitaStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_autorizacaoSolicitaStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_autorizacaoSolicitaStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_autorizacaoSolicitaStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoSolicitacao is not None:
            self.identificacaoSolicitacao.export(outfile, level, namespace_, name_='identificacaoSolicitacao', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_autorizacaoSolicitaStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoSolicitacao=model_.ct_guiaCabecalho(\n')
            self.identificacaoSolicitacao.exportLiteral(outfile, level, name_='identificacaoSolicitacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.ct_contratadoDados(\n')
            self.dadosContratado.exportLiteral(outfile, level, name_='dadosContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoSolicitacao':
            class_obj_ = self.get_class_obj_(child_, ct_guiaCabecalho)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.identificacaoSolicitacao = obj_
            obj_.original_tagname_ = 'identificacaoSolicitacao'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosContratado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
# end class ct_autorizacaoSolicitaStatus


class ct_beneficiarioDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroCarteira=None, atendimentoRN=None, nomeBeneficiario=None, numeroCNS=None, identificadorBeneficiario=None):
        self.original_tagname_ = None
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.atendimentoRN = atendimentoRN
        self.validate_dm_simNao(self.atendimentoRN)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.identificadorBeneficiario = identificadorBeneficiario
    def factory(*args_, **kwargs_):
        if ct_beneficiarioDados.subclass:
            return ct_beneficiarioDados.subclass(*args_, **kwargs_)
        else:
            return ct_beneficiarioDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_atendimentoRN(self): return self.atendimentoRN
    def set_atendimentoRN(self, atendimentoRN): self.atendimentoRN = atendimentoRN
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroCarteira is not None or
            self.atendimentoRN is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.identificadorBeneficiario is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_beneficiarioDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_beneficiarioDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_beneficiarioDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_beneficiarioDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_beneficiarioDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.atendimentoRN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%satendimentoRN>%s</%satendimentoRN>%s' % (namespace_, self.gds_format_string(quote_xml(self.atendimentoRN).encode(ExternalEncoding), input_name='atendimentoRN'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_beneficiarioDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.atendimentoRN is not None:
            showIndent(outfile, level)
            outfile.write('atendimentoRN=%s,\n' % quote_python(self.atendimentoRN).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'atendimentoRN':
            atendimentoRN_ = child_.text
            atendimentoRN_ = self.gds_validate_string(atendimentoRN_, node, 'atendimentoRN')
            self.atendimentoRN = atendimentoRN_
            # validate type dm_simNao
            self.validate_dm_simNao(self.atendimentoRN)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
# end class ct_beneficiarioDados


class ct_contaMedicaResumo(GeneratedsSuper):
    """utilizado no demonstrativo de análise de conta"""
    subclass = None
    superclass = None
    def __init__(self, numeroLotePrestador=None, numeroProtocolo=None, dataProtocolo=None, GlosaProtocolo=None, situacaoProtocolo=None, relacaoGuias=None, valorInformadoProtocolo=None, valorProcessadoProtocolo=None, valorLiberadoProtocolo=None, valorGlosaProtocolo=None, extensiontype_=None):
        self.original_tagname_ = None
        self.numeroLotePrestador = numeroLotePrestador
        self.validate_st_texto12(self.numeroLotePrestador)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        if isinstance(dataProtocolo, basestring):
            initvalue_ = datetime_.datetime.strptime(dataProtocolo, '%Y-%m-%d').date()
        else:
            initvalue_ = dataProtocolo
        self.dataProtocolo = initvalue_
        self.GlosaProtocolo = GlosaProtocolo
        self.situacaoProtocolo = situacaoProtocolo
        self.validate_dm_statusProtocolo(self.situacaoProtocolo)
        if relacaoGuias is None:
            self.relacaoGuias = []
        else:
            self.relacaoGuias = relacaoGuias
        self.valorInformadoProtocolo = valorInformadoProtocolo
        self.valorProcessadoProtocolo = valorProcessadoProtocolo
        self.valorLiberadoProtocolo = valorLiberadoProtocolo
        self.valorGlosaProtocolo = valorGlosaProtocolo
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_contaMedicaResumo.subclass:
            return ct_contaMedicaResumo.subclass(*args_, **kwargs_)
        else:
            return ct_contaMedicaResumo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroLotePrestador(self): return self.numeroLotePrestador
    def set_numeroLotePrestador(self, numeroLotePrestador): self.numeroLotePrestador = numeroLotePrestador
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_dataProtocolo(self): return self.dataProtocolo
    def set_dataProtocolo(self, dataProtocolo): self.dataProtocolo = dataProtocolo
    def get_GlosaProtocolo(self): return self.GlosaProtocolo
    def set_GlosaProtocolo(self, GlosaProtocolo): self.GlosaProtocolo = GlosaProtocolo
    def get_situacaoProtocolo(self): return self.situacaoProtocolo
    def set_situacaoProtocolo(self, situacaoProtocolo): self.situacaoProtocolo = situacaoProtocolo
    def get_relacaoGuias(self): return self.relacaoGuias
    def set_relacaoGuias(self, relacaoGuias): self.relacaoGuias = relacaoGuias
    def add_relacaoGuias(self, value): self.relacaoGuias.append(value)
    def insert_relacaoGuias_at(self, index, value): self.relacaoGuias.insert(index, value)
    def replace_relacaoGuias_at(self, index, value): self.relacaoGuias[index] = value
    def get_valorInformadoProtocolo(self): return self.valorInformadoProtocolo
    def set_valorInformadoProtocolo(self, valorInformadoProtocolo): self.valorInformadoProtocolo = valorInformadoProtocolo
    def get_valorProcessadoProtocolo(self): return self.valorProcessadoProtocolo
    def set_valorProcessadoProtocolo(self, valorProcessadoProtocolo): self.valorProcessadoProtocolo = valorProcessadoProtocolo
    def get_valorLiberadoProtocolo(self): return self.valorLiberadoProtocolo
    def set_valorLiberadoProtocolo(self, valorLiberadoProtocolo): self.valorLiberadoProtocolo = valorLiberadoProtocolo
    def get_valorGlosaProtocolo(self): return self.valorGlosaProtocolo
    def set_valorGlosaProtocolo(self, valorGlosaProtocolo): self.valorGlosaProtocolo = valorGlosaProtocolo
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_statusProtocolo(self, value):
        # Validate type dm_statusProtocolo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroLotePrestador is not None or
            self.numeroProtocolo is not None or
            self.dataProtocolo is not None or
            self.GlosaProtocolo is not None or
            self.situacaoProtocolo is not None or
            self.relacaoGuias or
            self.valorInformadoProtocolo is not None or
            self.valorProcessadoProtocolo is not None or
            self.valorLiberadoProtocolo is not None or
            self.valorGlosaProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_contaMedicaResumo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_contaMedicaResumo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_contaMedicaResumo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_contaMedicaResumo'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_contaMedicaResumo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroLotePrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLotePrestador>%s</%snumeroLotePrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLotePrestador).encode(ExternalEncoding), input_name='numeroLotePrestador'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.dataProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataProtocolo>%s</%sdataProtocolo>%s' % (namespace_, self.gds_format_date(self.dataProtocolo, input_name='dataProtocolo'), namespace_, eol_))
        if self.GlosaProtocolo is not None:
            self.GlosaProtocolo.export(outfile, level, namespace_, name_='GlosaProtocolo', pretty_print=pretty_print)
        if self.situacaoProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssituacaoProtocolo>%s</%ssituacaoProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.situacaoProtocolo).encode(ExternalEncoding), input_name='situacaoProtocolo'), namespace_, eol_))
        for relacaoGuias_ in self.relacaoGuias:
            relacaoGuias_.export(outfile, level, namespace_, name_='relacaoGuias', pretty_print=pretty_print)
        if self.valorInformadoProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformadoProtocolo>%s</%svalorInformadoProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformadoProtocolo).encode(ExternalEncoding), input_name='valorInformadoProtocolo'), namespace_, eol_))
        if self.valorProcessadoProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessadoProtocolo>%s</%svalorProcessadoProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessadoProtocolo).encode(ExternalEncoding), input_name='valorProcessadoProtocolo'), namespace_, eol_))
        if self.valorLiberadoProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberadoProtocolo>%s</%svalorLiberadoProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberadoProtocolo).encode(ExternalEncoding), input_name='valorLiberadoProtocolo'), namespace_, eol_))
        if self.valorGlosaProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosaProtocolo>%s</%svalorGlosaProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosaProtocolo).encode(ExternalEncoding), input_name='valorGlosaProtocolo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_contaMedicaResumo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroLotePrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroLotePrestador=%s,\n' % quote_python(self.numeroLotePrestador).encode(ExternalEncoding))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.dataProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('dataProtocolo=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataProtocolo, input_name='dataProtocolo'))
        if self.GlosaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('GlosaProtocolo=model_.ct_motivoGlosa(\n')
            self.GlosaProtocolo.exportLiteral(outfile, level, name_='GlosaProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.situacaoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('situacaoProtocolo=%s,\n' % quote_python(self.situacaoProtocolo).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('relacaoGuias=[\n')
        level += 1
        for relacaoGuias_ in self.relacaoGuias:
            showIndent(outfile, level)
            outfile.write('model_.relacaoGuias(\n')
            relacaoGuias_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.valorInformadoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorInformadoProtocolo=%s,\n' % quote_python(self.valorInformadoProtocolo).encode(ExternalEncoding))
        if self.valorProcessadoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessadoProtocolo=%s,\n' % quote_python(self.valorProcessadoProtocolo).encode(ExternalEncoding))
        if self.valorLiberadoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberadoProtocolo=%s,\n' % quote_python(self.valorLiberadoProtocolo).encode(ExternalEncoding))
        if self.valorGlosaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosaProtocolo=%s,\n' % quote_python(self.valorGlosaProtocolo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroLotePrestador':
            numeroLotePrestador_ = child_.text
            numeroLotePrestador_ = self.gds_validate_string(numeroLotePrestador_, node, 'numeroLotePrestador')
            self.numeroLotePrestador = numeroLotePrestador_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLotePrestador)
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'dataProtocolo':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataProtocolo = dval_
            # validate type st_data
            self.validate_st_data(self.dataProtocolo)
        elif nodeName_ == 'GlosaProtocolo':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.GlosaProtocolo = obj_
            obj_.original_tagname_ = 'GlosaProtocolo'
        elif nodeName_ == 'situacaoProtocolo':
            situacaoProtocolo_ = child_.text
            situacaoProtocolo_ = self.gds_validate_string(situacaoProtocolo_, node, 'situacaoProtocolo')
            self.situacaoProtocolo = situacaoProtocolo_
            # validate type dm_statusProtocolo
            self.validate_dm_statusProtocolo(self.situacaoProtocolo)
        elif nodeName_ == 'relacaoGuias':
            obj_ = relacaoGuias.factory()
            obj_.build(child_)
            self.relacaoGuias.append(obj_)
            obj_.original_tagname_ = 'relacaoGuias'
        elif nodeName_ == 'valorInformadoProtocolo':
            valorInformadoProtocolo_ = child_.text
            valorInformadoProtocolo_ = self.gds_validate_string(valorInformadoProtocolo_, node, 'valorInformadoProtocolo')
            self.valorInformadoProtocolo = valorInformadoProtocolo_
        elif nodeName_ == 'valorProcessadoProtocolo':
            valorProcessadoProtocolo_ = child_.text
            valorProcessadoProtocolo_ = self.gds_validate_string(valorProcessadoProtocolo_, node, 'valorProcessadoProtocolo')
            self.valorProcessadoProtocolo = valorProcessadoProtocolo_
        elif nodeName_ == 'valorLiberadoProtocolo':
            valorLiberadoProtocolo_ = child_.text
            valorLiberadoProtocolo_ = self.gds_validate_string(valorLiberadoProtocolo_, node, 'valorLiberadoProtocolo')
            self.valorLiberadoProtocolo = valorLiberadoProtocolo_
        elif nodeName_ == 'valorGlosaProtocolo':
            valorGlosaProtocolo_ = child_.text
            valorGlosaProtocolo_ = self.gds_validate_string(valorGlosaProtocolo_, node, 'valorGlosaProtocolo')
            self.valorGlosaProtocolo = valorGlosaProtocolo_
# end class ct_contaMedicaResumo


class relacaoGuias(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, senha=None, nomeBeneficiario=None, numeroCarteira=None, dataInicioFat=None, horaInicioFat=None, dataFimFat=None, horaFimFat=None, motivoGlosaGuia=None, situacaoGuia=None, detalhesGuia=None, valorInformadoGuia=None, valorProcessadoGuia=None, valorLiberadoGuia=None, valorGlosaGuia=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        if isinstance(dataInicioFat, basestring):
            initvalue_ = datetime_.datetime.strptime(dataInicioFat, '%Y-%m-%d').date()
        else:
            initvalue_ = dataInicioFat
        self.dataInicioFat = initvalue_
        if isinstance(horaInicioFat, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicioFat, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicioFat
        self.horaInicioFat = initvalue_
        if isinstance(dataFimFat, basestring):
            initvalue_ = datetime_.datetime.strptime(dataFimFat, '%Y-%m-%d').date()
        else:
            initvalue_ = dataFimFat
        self.dataFimFat = initvalue_
        if isinstance(horaFimFat, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFimFat, '%H:%M:%S').time()
        else:
            initvalue_ = horaFimFat
        self.horaFimFat = initvalue_
        if motivoGlosaGuia is None:
            self.motivoGlosaGuia = []
        else:
            self.motivoGlosaGuia = motivoGlosaGuia
        self.situacaoGuia = situacaoGuia
        self.validate_dm_statusProtocolo(self.situacaoGuia)
        if detalhesGuia is None:
            self.detalhesGuia = []
        else:
            self.detalhesGuia = detalhesGuia
        self.valorInformadoGuia = valorInformadoGuia
        self.valorProcessadoGuia = valorProcessadoGuia
        self.valorLiberadoGuia = valorLiberadoGuia
        self.valorGlosaGuia = valorGlosaGuia
    def factory(*args_, **kwargs_):
        if relacaoGuias.subclass:
            return relacaoGuias.subclass(*args_, **kwargs_)
        else:
            return relacaoGuias(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_dataInicioFat(self): return self.dataInicioFat
    def set_dataInicioFat(self, dataInicioFat): self.dataInicioFat = dataInicioFat
    def get_horaInicioFat(self): return self.horaInicioFat
    def set_horaInicioFat(self, horaInicioFat): self.horaInicioFat = horaInicioFat
    def get_dataFimFat(self): return self.dataFimFat
    def set_dataFimFat(self, dataFimFat): self.dataFimFat = dataFimFat
    def get_horaFimFat(self): return self.horaFimFat
    def set_horaFimFat(self, horaFimFat): self.horaFimFat = horaFimFat
    def get_motivoGlosaGuia(self): return self.motivoGlosaGuia
    def set_motivoGlosaGuia(self, motivoGlosaGuia): self.motivoGlosaGuia = motivoGlosaGuia
    def add_motivoGlosaGuia(self, value): self.motivoGlosaGuia.append(value)
    def insert_motivoGlosaGuia_at(self, index, value): self.motivoGlosaGuia.insert(index, value)
    def replace_motivoGlosaGuia_at(self, index, value): self.motivoGlosaGuia[index] = value
    def get_situacaoGuia(self): return self.situacaoGuia
    def set_situacaoGuia(self, situacaoGuia): self.situacaoGuia = situacaoGuia
    def get_detalhesGuia(self): return self.detalhesGuia
    def set_detalhesGuia(self, detalhesGuia): self.detalhesGuia = detalhesGuia
    def add_detalhesGuia(self, value): self.detalhesGuia.append(value)
    def insert_detalhesGuia_at(self, index, value): self.detalhesGuia.insert(index, value)
    def replace_detalhesGuia_at(self, index, value): self.detalhesGuia[index] = value
    def get_valorInformadoGuia(self): return self.valorInformadoGuia
    def set_valorInformadoGuia(self, valorInformadoGuia): self.valorInformadoGuia = valorInformadoGuia
    def get_valorProcessadoGuia(self): return self.valorProcessadoGuia
    def set_valorProcessadoGuia(self, valorProcessadoGuia): self.valorProcessadoGuia = valorProcessadoGuia
    def get_valorLiberadoGuia(self): return self.valorLiberadoGuia
    def set_valorLiberadoGuia(self, valorLiberadoGuia): self.valorLiberadoGuia = valorLiberadoGuia
    def get_valorGlosaGuia(self): return self.valorGlosaGuia
    def set_valorGlosaGuia(self, valorGlosaGuia): self.valorGlosaGuia = valorGlosaGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_statusProtocolo(self, value):
        # Validate type dm_statusProtocolo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.senha is not None or
            self.nomeBeneficiario is not None or
            self.numeroCarteira is not None or
            self.dataInicioFat is not None or
            self.horaInicioFat is not None or
            self.dataFimFat is not None or
            self.horaFimFat is not None or
            self.motivoGlosaGuia or
            self.situacaoGuia is not None or
            self.detalhesGuia or
            self.valorInformadoGuia is not None or
            self.valorProcessadoGuia is not None or
            self.valorLiberadoGuia is not None or
            self.valorGlosaGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='relacaoGuias', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='relacaoGuias')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='relacaoGuias', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='relacaoGuias'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='relacaoGuias', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.dataInicioFat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataInicioFat>%s</%sdataInicioFat>%s' % (namespace_, self.gds_format_date(self.dataInicioFat, input_name='dataInicioFat'), namespace_, eol_))
        if self.horaInicioFat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicioFat>%s</%shoraInicioFat>%s' % (namespace_, self.gds_format_time(self.horaInicioFat, input_name='horaInicioFat'), namespace_, eol_))
        if self.dataFimFat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataFimFat>%s</%sdataFimFat>%s' % (namespace_, self.gds_format_date(self.dataFimFat, input_name='dataFimFat'), namespace_, eol_))
        if self.horaFimFat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFimFat>%s</%shoraFimFat>%s' % (namespace_, self.gds_format_time(self.horaFimFat, input_name='horaFimFat'), namespace_, eol_))
        for motivoGlosaGuia_ in self.motivoGlosaGuia:
            motivoGlosaGuia_.export(outfile, level, namespace_, name_='motivoGlosaGuia', pretty_print=pretty_print)
        if self.situacaoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssituacaoGuia>%s</%ssituacaoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.situacaoGuia).encode(ExternalEncoding), input_name='situacaoGuia'), namespace_, eol_))
        for detalhesGuia_ in self.detalhesGuia:
            detalhesGuia_.export(outfile, level, namespace_, name_='detalhesGuia', pretty_print=pretty_print)
        if self.valorInformadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformadoGuia>%s</%svalorInformadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformadoGuia).encode(ExternalEncoding), input_name='valorInformadoGuia'), namespace_, eol_))
        if self.valorProcessadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessadoGuia>%s</%svalorProcessadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessadoGuia).encode(ExternalEncoding), input_name='valorProcessadoGuia'), namespace_, eol_))
        if self.valorLiberadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberadoGuia>%s</%svalorLiberadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberadoGuia).encode(ExternalEncoding), input_name='valorLiberadoGuia'), namespace_, eol_))
        if self.valorGlosaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosaGuia>%s</%svalorGlosaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosaGuia).encode(ExternalEncoding), input_name='valorGlosaGuia'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='relacaoGuias'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.dataInicioFat is not None:
            showIndent(outfile, level)
            outfile.write('dataInicioFat=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataInicioFat, input_name='dataInicioFat'))
        if self.horaInicioFat is not None:
            showIndent(outfile, level)
            outfile.write('horaInicioFat=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicioFat, input_name='horaInicioFat'))
        if self.dataFimFat is not None:
            showIndent(outfile, level)
            outfile.write('dataFimFat=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataFimFat, input_name='dataFimFat'))
        if self.horaFimFat is not None:
            showIndent(outfile, level)
            outfile.write('horaFimFat=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFimFat, input_name='horaFimFat'))
        showIndent(outfile, level)
        outfile.write('motivoGlosaGuia=[\n')
        level += 1
        for motivoGlosaGuia_ in self.motivoGlosaGuia:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivoGlosaGuia_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.situacaoGuia is not None:
            showIndent(outfile, level)
            outfile.write('situacaoGuia=%s,\n' % quote_python(self.situacaoGuia).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('detalhesGuia=[\n')
        level += 1
        for detalhesGuia_ in self.detalhesGuia:
            showIndent(outfile, level)
            outfile.write('model_.detalhesGuia(\n')
            detalhesGuia_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.valorInformadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorInformadoGuia=%s,\n' % quote_python(self.valorInformadoGuia).encode(ExternalEncoding))
        if self.valorProcessadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessadoGuia=%s,\n' % quote_python(self.valorProcessadoGuia).encode(ExternalEncoding))
        if self.valorLiberadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberadoGuia=%s,\n' % quote_python(self.valorLiberadoGuia).encode(ExternalEncoding))
        if self.valorGlosaGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosaGuia=%s,\n' % quote_python(self.valorGlosaGuia).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'dataInicioFat':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataInicioFat = dval_
            # validate type st_data
            self.validate_st_data(self.dataInicioFat)
        elif nodeName_ == 'horaInicioFat':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicioFat = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicioFat)
        elif nodeName_ == 'dataFimFat':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataFimFat = dval_
            # validate type st_data
            self.validate_st_data(self.dataFimFat)
        elif nodeName_ == 'horaFimFat':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFimFat = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFimFat)
        elif nodeName_ == 'motivoGlosaGuia':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivoGlosaGuia.append(obj_)
            obj_.original_tagname_ = 'motivoGlosaGuia'
        elif nodeName_ == 'situacaoGuia':
            situacaoGuia_ = child_.text
            situacaoGuia_ = self.gds_validate_string(situacaoGuia_, node, 'situacaoGuia')
            self.situacaoGuia = situacaoGuia_
            # validate type dm_statusProtocolo
            self.validate_dm_statusProtocolo(self.situacaoGuia)
        elif nodeName_ == 'detalhesGuia':
            obj_ = detalhesGuia.factory()
            obj_.build(child_)
            self.detalhesGuia.append(obj_)
            obj_.original_tagname_ = 'detalhesGuia'
        elif nodeName_ == 'valorInformadoGuia':
            valorInformadoGuia_ = child_.text
            valorInformadoGuia_ = self.gds_validate_string(valorInformadoGuia_, node, 'valorInformadoGuia')
            self.valorInformadoGuia = valorInformadoGuia_
        elif nodeName_ == 'valorProcessadoGuia':
            valorProcessadoGuia_ = child_.text
            valorProcessadoGuia_ = self.gds_validate_string(valorProcessadoGuia_, node, 'valorProcessadoGuia')
            self.valorProcessadoGuia = valorProcessadoGuia_
        elif nodeName_ == 'valorLiberadoGuia':
            valorLiberadoGuia_ = child_.text
            valorLiberadoGuia_ = self.gds_validate_string(valorLiberadoGuia_, node, 'valorLiberadoGuia')
            self.valorLiberadoGuia = valorLiberadoGuia_
        elif nodeName_ == 'valorGlosaGuia':
            valorGlosaGuia_ = child_.text
            valorGlosaGuia_ = self.gds_validate_string(valorGlosaGuia_, node, 'valorGlosaGuia')
            self.valorGlosaGuia = valorGlosaGuia_
# end class relacaoGuias


class detalhesGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataRealizacao=None, procedimento=None, grauParticipacao=None, valorInformado=None, qtdExecutada=None, valorProcessado=None, valorLiberado=None, relacaoGlosa=None):
        self.original_tagname_ = None
        if isinstance(dataRealizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRealizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRealizacao
        self.dataRealizacao = initvalue_
        self.procedimento = procedimento
        self.grauParticipacao = grauParticipacao
        self.validate_dm_grauPart(self.grauParticipacao)
        self.valorInformado = valorInformado
        self.qtdExecutada = qtdExecutada
        self.valorProcessado = valorProcessado
        self.valorLiberado = valorLiberado
        if relacaoGlosa is None:
            self.relacaoGlosa = []
        else:
            self.relacaoGlosa = relacaoGlosa
    def factory(*args_, **kwargs_):
        if detalhesGuia.subclass:
            return detalhesGuia.subclass(*args_, **kwargs_)
        else:
            return detalhesGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataRealizacao(self): return self.dataRealizacao
    def set_dataRealizacao(self, dataRealizacao): self.dataRealizacao = dataRealizacao
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_grauParticipacao(self): return self.grauParticipacao
    def set_grauParticipacao(self, grauParticipacao): self.grauParticipacao = grauParticipacao
    def get_valorInformado(self): return self.valorInformado
    def set_valorInformado(self, valorInformado): self.valorInformado = valorInformado
    def get_qtdExecutada(self): return self.qtdExecutada
    def set_qtdExecutada(self, qtdExecutada): self.qtdExecutada = qtdExecutada
    def get_valorProcessado(self): return self.valorProcessado
    def set_valorProcessado(self, valorProcessado): self.valorProcessado = valorProcessado
    def get_valorLiberado(self): return self.valorLiberado
    def set_valorLiberado(self, valorLiberado): self.valorLiberado = valorLiberado
    def get_relacaoGlosa(self): return self.relacaoGlosa
    def set_relacaoGlosa(self, relacaoGlosa): self.relacaoGlosa = relacaoGlosa
    def add_relacaoGlosa(self, value): self.relacaoGlosa.append(value)
    def insert_relacaoGlosa_at(self, index, value): self.relacaoGlosa.insert(index, value)
    def replace_relacaoGlosa_at(self, index, value): self.relacaoGlosa[index] = value
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_grauPart(self, value):
        # Validate type dm_grauPart, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataRealizacao is not None or
            self.procedimento is not None or
            self.grauParticipacao is not None or
            self.valorInformado is not None or
            self.qtdExecutada is not None or
            self.valorProcessado is not None or
            self.valorLiberado is not None or
            self.relacaoGlosa
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='detalhesGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='detalhesGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='detalhesGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='detalhesGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='detalhesGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataRealizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRealizacao>%s</%sdataRealizacao>%s' % (namespace_, self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'), namespace_, eol_))
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.grauParticipacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrauParticipacao>%s</%sgrauParticipacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.grauParticipacao).encode(ExternalEncoding), input_name='grauParticipacao'), namespace_, eol_))
        if self.valorInformado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformado>%s</%svalorInformado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformado).encode(ExternalEncoding), input_name='valorInformado'), namespace_, eol_))
        if self.qtdExecutada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdExecutada>%s</%sqtdExecutada>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdExecutada).encode(ExternalEncoding), input_name='qtdExecutada'), namespace_, eol_))
        if self.valorProcessado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessado>%s</%svalorProcessado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessado).encode(ExternalEncoding), input_name='valorProcessado'), namespace_, eol_))
        if self.valorLiberado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberado>%s</%svalorLiberado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberado).encode(ExternalEncoding), input_name='valorLiberado'), namespace_, eol_))
        for relacaoGlosa_ in self.relacaoGlosa:
            relacaoGlosa_.export(outfile, level, namespace_, name_='relacaoGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='detalhesGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataRealizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataRealizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'))
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.grauParticipacao is not None:
            showIndent(outfile, level)
            outfile.write('grauParticipacao=%s,\n' % quote_python(self.grauParticipacao).encode(ExternalEncoding))
        if self.valorInformado is not None:
            showIndent(outfile, level)
            outfile.write('valorInformado=%s,\n' % quote_python(self.valorInformado).encode(ExternalEncoding))
        if self.qtdExecutada is not None:
            showIndent(outfile, level)
            outfile.write('qtdExecutada=%s,\n' % quote_python(self.qtdExecutada).encode(ExternalEncoding))
        if self.valorProcessado is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessado=%s,\n' % quote_python(self.valorProcessado).encode(ExternalEncoding))
        if self.valorLiberado is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberado=%s,\n' % quote_python(self.valorLiberado).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('relacaoGlosa=[\n')
        level += 1
        for relacaoGlosa_ in self.relacaoGlosa:
            showIndent(outfile, level)
            outfile.write('model_.relacaoGlosa(\n')
            relacaoGlosa_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataRealizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRealizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataRealizacao)
        elif nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'grauParticipacao':
            grauParticipacao_ = child_.text
            grauParticipacao_ = self.gds_validate_string(grauParticipacao_, node, 'grauParticipacao')
            self.grauParticipacao = grauParticipacao_
            # validate type dm_grauPart
            self.validate_dm_grauPart(self.grauParticipacao)
        elif nodeName_ == 'valorInformado':
            valorInformado_ = child_.text
            valorInformado_ = self.gds_validate_string(valorInformado_, node, 'valorInformado')
            self.valorInformado = valorInformado_
        elif nodeName_ == 'qtdExecutada':
            qtdExecutada_ = child_.text
            qtdExecutada_ = self.gds_validate_string(qtdExecutada_, node, 'qtdExecutada')
            self.qtdExecutada = qtdExecutada_
        elif nodeName_ == 'valorProcessado':
            valorProcessado_ = child_.text
            valorProcessado_ = self.gds_validate_string(valorProcessado_, node, 'valorProcessado')
            self.valorProcessado = valorProcessado_
        elif nodeName_ == 'valorLiberado':
            valorLiberado_ = child_.text
            valorLiberado_ = self.gds_validate_string(valorLiberado_, node, 'valorLiberado')
            self.valorLiberado = valorLiberado_
        elif nodeName_ == 'relacaoGlosa':
            obj_ = relacaoGlosa.factory()
            obj_.build(child_)
            self.relacaoGlosa.append(obj_)
            obj_.original_tagname_ = 'relacaoGlosa'
# end class detalhesGuia


class relacaoGlosa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorGlosa=None, tipoGlosa=None):
        self.original_tagname_ = None
        self.valorGlosa = valorGlosa
        self.tipoGlosa = tipoGlosa
        self.validate_dm_tipoGlosa(self.tipoGlosa)
    def factory(*args_, **kwargs_):
        if relacaoGlosa.subclass:
            return relacaoGlosa.subclass(*args_, **kwargs_)
        else:
            return relacaoGlosa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorGlosa(self): return self.valorGlosa
    def set_valorGlosa(self, valorGlosa): self.valorGlosa = valorGlosa
    def get_tipoGlosa(self): return self.tipoGlosa
    def set_tipoGlosa(self, tipoGlosa): self.tipoGlosa = tipoGlosa
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.valorGlosa is not None or
            self.tipoGlosa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='relacaoGlosa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='relacaoGlosa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='relacaoGlosa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='relacaoGlosa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='relacaoGlosa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosa>%s</%svalorGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosa).encode(ExternalEncoding), input_name='valorGlosa'), namespace_, eol_))
        if self.tipoGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoGlosa>%s</%stipoGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoGlosa).encode(ExternalEncoding), input_name='tipoGlosa'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='relacaoGlosa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorGlosa is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosa=%s,\n' % quote_python(self.valorGlosa).encode(ExternalEncoding))
        if self.tipoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('tipoGlosa=%s,\n' % quote_python(self.tipoGlosa).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorGlosa':
            valorGlosa_ = child_.text
            valorGlosa_ = self.gds_validate_string(valorGlosa_, node, 'valorGlosa')
            self.valorGlosa = valorGlosa_
        elif nodeName_ == 'tipoGlosa':
            tipoGlosa_ = child_.text
            tipoGlosa_ = self.gds_validate_string(tipoGlosa_, node, 'tipoGlosa')
            self.tipoGlosa = tipoGlosa_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.tipoGlosa)
# end class relacaoGlosa


class ct_contratadoDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoPrestadorNaOperadora=None, cpfContratado=None, cnpjContratado=None, nomeContratado=None, extensiontype_=None):
        self.original_tagname_ = None
        self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora
        self.validate_st_texto14(self.codigoPrestadorNaOperadora)
        self.cpfContratado = cpfContratado
        self.validate_st_CPF(self.cpfContratado)
        self.cnpjContratado = cnpjContratado
        self.validate_st_CNPJ(self.cnpjContratado)
        self.nomeContratado = nomeContratado
        self.validate_st_texto70(self.nomeContratado)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_contratadoDados.subclass:
            return ct_contratadoDados.subclass(*args_, **kwargs_)
        else:
            return ct_contratadoDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoPrestadorNaOperadora(self): return self.codigoPrestadorNaOperadora
    def set_codigoPrestadorNaOperadora(self, codigoPrestadorNaOperadora): self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora
    def get_cpfContratado(self): return self.cpfContratado
    def set_cpfContratado(self, cpfContratado): self.cpfContratado = cpfContratado
    def get_cnpjContratado(self): return self.cnpjContratado
    def set_cnpjContratado(self, cnpjContratado): self.cnpjContratado = cnpjContratado
    def get_nomeContratado(self): return self.nomeContratado
    def set_nomeContratado(self, nomeContratado): self.nomeContratado = nomeContratado
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_CPF(self, value):
        # Validate type st_CPF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CPF_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CPF_patterns_, ))
    validate_st_CPF_patterns_ = [['^[0-9]{11}$']]
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoPrestadorNaOperadora is not None or
            self.cpfContratado is not None or
            self.cnpjContratado is not None or
            self.nomeContratado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_contratadoDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_contratadoDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_contratadoDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_contratadoDados'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_contratadoDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoPrestadorNaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPrestadorNaOperadora>%s</%scodigoPrestadorNaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoPrestadorNaOperadora).encode(ExternalEncoding), input_name='codigoPrestadorNaOperadora'), namespace_, eol_))
        if self.cpfContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scpfContratado>%s</%scpfContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.cpfContratado).encode(ExternalEncoding), input_name='cpfContratado'), namespace_, eol_))
        if self.cnpjContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnpjContratado>%s</%scnpjContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnpjContratado).encode(ExternalEncoding), input_name='cnpjContratado'), namespace_, eol_))
        if self.nomeContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeContratado>%s</%snomeContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeContratado).encode(ExternalEncoding), input_name='nomeContratado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_contratadoDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoPrestadorNaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('codigoPrestadorNaOperadora=%s,\n' % quote_python(self.codigoPrestadorNaOperadora).encode(ExternalEncoding))
        if self.cpfContratado is not None:
            showIndent(outfile, level)
            outfile.write('cpfContratado=%s,\n' % quote_python(self.cpfContratado).encode(ExternalEncoding))
        if self.cnpjContratado is not None:
            showIndent(outfile, level)
            outfile.write('cnpjContratado=%s,\n' % quote_python(self.cnpjContratado).encode(ExternalEncoding))
        if self.nomeContratado is not None:
            showIndent(outfile, level)
            outfile.write('nomeContratado=%s,\n' % quote_python(self.nomeContratado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoPrestadorNaOperadora':
            codigoPrestadorNaOperadora_ = child_.text
            codigoPrestadorNaOperadora_ = self.gds_validate_string(codigoPrestadorNaOperadora_, node, 'codigoPrestadorNaOperadora')
            self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoPrestadorNaOperadora)
        elif nodeName_ == 'cpfContratado':
            cpfContratado_ = child_.text
            cpfContratado_ = self.gds_validate_string(cpfContratado_, node, 'cpfContratado')
            self.cpfContratado = cpfContratado_
            # validate type st_CPF
            self.validate_st_CPF(self.cpfContratado)
        elif nodeName_ == 'cnpjContratado':
            cnpjContratado_ = child_.text
            cnpjContratado_ = self.gds_validate_string(cnpjContratado_, node, 'cnpjContratado')
            self.cnpjContratado = cnpjContratado_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.cnpjContratado)
        elif nodeName_ == 'nomeContratado':
            nomeContratado_ = child_.text
            nomeContratado_ = self.gds_validate_string(nomeContratado_, node, 'nomeContratado')
            self.nomeContratado = nomeContratado_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeContratado)
# end class ct_contratadoDados


class ct_contratadoProfissionalDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nomeProfissional=None, conselhoProfissional=None, numeroConselhoProfissional=None, UF=None, CBOS=None):
        self.original_tagname_ = None
        self.nomeProfissional = nomeProfissional
        self.validate_st_texto70(self.nomeProfissional)
        self.conselhoProfissional = conselhoProfissional
        self.validate_dm_conselhoProfissional(self.conselhoProfissional)
        self.numeroConselhoProfissional = numeroConselhoProfissional
        self.validate_st_texto15(self.numeroConselhoProfissional)
        self.UF = UF
        self.validate_dm_UF(self.UF)
        self.CBOS = CBOS
        self.validate_dm_CBOS(self.CBOS)
    def factory(*args_, **kwargs_):
        if ct_contratadoProfissionalDados.subclass:
            return ct_contratadoProfissionalDados.subclass(*args_, **kwargs_)
        else:
            return ct_contratadoProfissionalDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nomeProfissional(self): return self.nomeProfissional
    def set_nomeProfissional(self, nomeProfissional): self.nomeProfissional = nomeProfissional
    def get_conselhoProfissional(self): return self.conselhoProfissional
    def set_conselhoProfissional(self, conselhoProfissional): self.conselhoProfissional = conselhoProfissional
    def get_numeroConselhoProfissional(self): return self.numeroConselhoProfissional
    def set_numeroConselhoProfissional(self, numeroConselhoProfissional): self.numeroConselhoProfissional = numeroConselhoProfissional
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def get_CBOS(self): return self.CBOS
    def set_CBOS(self, CBOS): self.CBOS = CBOS
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_conselhoProfissional(self, value):
        # Validate type dm_conselhoProfissional, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_UF(self, value):
        # Validate type dm_UF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '35', '41', '42', '43', '50', '51', '52', '53', '98']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_UF' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_UF' % {"value" : value.encode("utf-8")} )
    def validate_dm_CBOS(self, value):
        # Validate type dm_CBOS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['201115', '203015', '213150', '225105', '225110', '225148', '225185', '225115', '225120', '225210', '225215', '225220', '225225', '225230', '225235', '225240', '225305', '225350', '225125', '225130', '225135', '225140', '225310', '225145', '225150', '225315', '225320', '225155', '225160', '225245', '225165', '225170', '225175', '225180', '225250', '225190', '225195', '225103', '225106', '225255', '225109', '225260', '225112', '225118', '225265', '225121', '225270', '225275', '225325', '225124', '225127', '225280', '225133', '225330', '225136', '225139', '225285', '223204', '223208', '223212', '223216', '223220', '223224', '223228', '223232', '223236', '223240', '223244', '223248', '223252', '223256', '223260', '223264', '223268', '223272', '223505', '223605', '223910', '223905', '223710', '223810', '239425', '251510', '251545', '251550', '251605', '322205', '322220', '322225', '322230', '516210', '225121', '225325', '223276', '223280', '223284', '223288', '223293', '225122', '225142', '225151', '225203', '225290', '225295', '225335', '225340', '225345', '999999']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_CBOS' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nomeProfissional is not None or
            self.conselhoProfissional is not None or
            self.numeroConselhoProfissional is not None or
            self.UF is not None or
            self.CBOS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_contratadoProfissionalDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_contratadoProfissionalDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_contratadoProfissionalDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_contratadoProfissionalDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_contratadoProfissionalDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nomeProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProfissional>%s</%snomeProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProfissional).encode(ExternalEncoding), input_name='nomeProfissional'), namespace_, eol_))
        if self.conselhoProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sconselhoProfissional>%s</%sconselhoProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.conselhoProfissional).encode(ExternalEncoding), input_name='conselhoProfissional'), namespace_, eol_))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroConselhoProfissional>%s</%snumeroConselhoProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroConselhoProfissional).encode(ExternalEncoding), input_name='numeroConselhoProfissional'), namespace_, eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_format_string(quote_xml(self.UF).encode(ExternalEncoding), input_name='UF'), namespace_, eol_))
        if self.CBOS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCBOS>%s</%sCBOS>%s' % (namespace_, self.gds_format_string(quote_xml(self.CBOS).encode(ExternalEncoding), input_name='CBOS'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_contratadoProfissionalDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nomeProfissional is not None:
            showIndent(outfile, level)
            outfile.write('nomeProfissional=%s,\n' % quote_python(self.nomeProfissional).encode(ExternalEncoding))
        if self.conselhoProfissional is not None:
            showIndent(outfile, level)
            outfile.write('conselhoProfissional=%s,\n' % quote_python(self.conselhoProfissional).encode(ExternalEncoding))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level)
            outfile.write('numeroConselhoProfissional=%s,\n' % quote_python(self.numeroConselhoProfissional).encode(ExternalEncoding))
        if self.UF is not None:
            showIndent(outfile, level)
            outfile.write('UF=%s,\n' % quote_python(self.UF).encode(ExternalEncoding))
        if self.CBOS is not None:
            showIndent(outfile, level)
            outfile.write('CBOS=%s,\n' % quote_python(self.CBOS).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nomeProfissional':
            nomeProfissional_ = child_.text
            nomeProfissional_ = self.gds_validate_string(nomeProfissional_, node, 'nomeProfissional')
            self.nomeProfissional = nomeProfissional_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProfissional)
        elif nodeName_ == 'conselhoProfissional':
            conselhoProfissional_ = child_.text
            conselhoProfissional_ = self.gds_validate_string(conselhoProfissional_, node, 'conselhoProfissional')
            self.conselhoProfissional = conselhoProfissional_
            # validate type dm_conselhoProfissional
            self.validate_dm_conselhoProfissional(self.conselhoProfissional)
        elif nodeName_ == 'numeroConselhoProfissional':
            numeroConselhoProfissional_ = child_.text
            numeroConselhoProfissional_ = self.gds_validate_string(numeroConselhoProfissional_, node, 'numeroConselhoProfissional')
            self.numeroConselhoProfissional = numeroConselhoProfissional_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroConselhoProfissional)
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
            # validate type dm_UF
            self.validate_dm_UF(self.UF)
        elif nodeName_ == 'CBOS':
            CBOS_ = child_.text
            CBOS_ = self.gds_validate_string(CBOS_, node, 'CBOS')
            self.CBOS = CBOS_
            # validate type dm_CBOS
            self.validate_dm_CBOS(self.CBOS)
# end class ct_contratadoProfissionalDados


class ct_creditoOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorCredito=None, descricao=None):
        self.original_tagname_ = None
        self.valorCredito = valorCredito
        self.descricao = descricao
        self.validate_st_texto40(self.descricao)
    def factory(*args_, **kwargs_):
        if ct_creditoOdonto.subclass:
            return ct_creditoOdonto.subclass(*args_, **kwargs_)
        else:
            return ct_creditoOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorCredito(self): return self.valorCredito
    def set_valorCredito(self, valorCredito): self.valorCredito = valorCredito
    def get_descricao(self): return self.descricao
    def set_descricao(self, descricao): self.descricao = descricao
    def validate_st_texto40(self, value):
        # Validate type st_texto40, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.valorCredito is not None or
            self.descricao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_creditoOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_creditoOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_creditoOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_creditoOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_creditoOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorCredito is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorCredito>%s</%svalorCredito>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorCredito).encode(ExternalEncoding), input_name='valorCredito'), namespace_, eol_))
        if self.descricao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricao>%s</%sdescricao>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricao).encode(ExternalEncoding), input_name='descricao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_creditoOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorCredito is not None:
            showIndent(outfile, level)
            outfile.write('valorCredito=%s,\n' % quote_python(self.valorCredito).encode(ExternalEncoding))
        if self.descricao is not None:
            showIndent(outfile, level)
            outfile.write('descricao=%s,\n' % quote_python(self.descricao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorCredito':
            valorCredito_ = child_.text
            valorCredito_ = self.gds_validate_string(valorCredito_, node, 'valorCredito')
            self.valorCredito = valorCredito_
        elif nodeName_ == 'descricao':
            descricao_ = child_.text
            descricao_ = self.gds_validate_string(descricao_, node, 'descricao')
            self.descricao = descricao_
            # validate type st_texto40
            self.validate_st_texto40(self.descricao)
# end class ct_creditoOdonto


class ct_dadosResumoDemonstrativo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataProtocolo=None, numeroProtocolo=None, numeroLote=None, valorInformado=None, valorProcessado=None, valorLiberado=None, valorGlosa=None):
        self.original_tagname_ = None
        if isinstance(dataProtocolo, basestring):
            initvalue_ = datetime_.datetime.strptime(dataProtocolo, '%Y-%m-%d').date()
        else:
            initvalue_ = dataProtocolo
        self.dataProtocolo = initvalue_
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.valorInformado = valorInformado
        self.valorProcessado = valorProcessado
        self.valorLiberado = valorLiberado
        self.valorGlosa = valorGlosa
    def factory(*args_, **kwargs_):
        if ct_dadosResumoDemonstrativo.subclass:
            return ct_dadosResumoDemonstrativo.subclass(*args_, **kwargs_)
        else:
            return ct_dadosResumoDemonstrativo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataProtocolo(self): return self.dataProtocolo
    def set_dataProtocolo(self, dataProtocolo): self.dataProtocolo = dataProtocolo
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_valorInformado(self): return self.valorInformado
    def set_valorInformado(self, valorInformado): self.valorInformado = valorInformado
    def get_valorProcessado(self): return self.valorProcessado
    def set_valorProcessado(self, valorProcessado): self.valorProcessado = valorProcessado
    def get_valorLiberado(self): return self.valorLiberado
    def set_valorLiberado(self, valorLiberado): self.valorLiberado = valorLiberado
    def get_valorGlosa(self): return self.valorGlosa
    def set_valorGlosa(self, valorGlosa): self.valorGlosa = valorGlosa
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataProtocolo is not None or
            self.numeroProtocolo is not None or
            self.numeroLote is not None or
            self.valorInformado is not None or
            self.valorProcessado is not None or
            self.valorLiberado is not None or
            self.valorGlosa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_dadosResumoDemonstrativo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_dadosResumoDemonstrativo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_dadosResumoDemonstrativo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_dadosResumoDemonstrativo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_dadosResumoDemonstrativo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataProtocolo>%s</%sdataProtocolo>%s' % (namespace_, self.gds_format_date(self.dataProtocolo, input_name='dataProtocolo'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.valorInformado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformado>%s</%svalorInformado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformado).encode(ExternalEncoding), input_name='valorInformado'), namespace_, eol_))
        if self.valorProcessado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessado>%s</%svalorProcessado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessado).encode(ExternalEncoding), input_name='valorProcessado'), namespace_, eol_))
        if self.valorLiberado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberado>%s</%svalorLiberado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberado).encode(ExternalEncoding), input_name='valorLiberado'), namespace_, eol_))
        if self.valorGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosa>%s</%svalorGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosa).encode(ExternalEncoding), input_name='valorGlosa'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_dadosResumoDemonstrativo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('dataProtocolo=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataProtocolo, input_name='dataProtocolo'))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.valorInformado is not None:
            showIndent(outfile, level)
            outfile.write('valorInformado=%s,\n' % quote_python(self.valorInformado).encode(ExternalEncoding))
        if self.valorProcessado is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessado=%s,\n' % quote_python(self.valorProcessado).encode(ExternalEncoding))
        if self.valorLiberado is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberado=%s,\n' % quote_python(self.valorLiberado).encode(ExternalEncoding))
        if self.valorGlosa is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosa=%s,\n' % quote_python(self.valorGlosa).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataProtocolo':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataProtocolo = dval_
            # validate type st_data
            self.validate_st_data(self.dataProtocolo)
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'valorInformado':
            valorInformado_ = child_.text
            valorInformado_ = self.gds_validate_string(valorInformado_, node, 'valorInformado')
            self.valorInformado = valorInformado_
        elif nodeName_ == 'valorProcessado':
            valorProcessado_ = child_.text
            valorProcessado_ = self.gds_validate_string(valorProcessado_, node, 'valorProcessado')
            self.valorProcessado = valorProcessado_
        elif nodeName_ == 'valorLiberado':
            valorLiberado_ = child_.text
            valorLiberado_ = self.gds_validate_string(valorLiberado_, node, 'valorLiberado')
            self.valorLiberado = valorLiberado_
        elif nodeName_ == 'valorGlosa':
            valorGlosa_ = child_.text
            valorGlosa_ = self.gds_validate_string(valorGlosa_, node, 'valorGlosa')
            self.valorGlosa = valorGlosa_
# end class ct_dadosResumoDemonstrativo


class ct_dadosComplementaresBeneficiario(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, peso=None, altura=None, superficieCorporal=None, idade=None, sexo=None):
        self.original_tagname_ = None
        self.peso = peso
        self.altura = altura
        self.superficieCorporal = superficieCorporal
        self.idade = idade
        self.validate_st_numerico3(self.idade)
        self.sexo = sexo
        self.validate_dm_sexo(self.sexo)
    def factory(*args_, **kwargs_):
        if ct_dadosComplementaresBeneficiario.subclass:
            return ct_dadosComplementaresBeneficiario.subclass(*args_, **kwargs_)
        else:
            return ct_dadosComplementaresBeneficiario(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_peso(self): return self.peso
    def set_peso(self, peso): self.peso = peso
    def get_altura(self): return self.altura
    def set_altura(self, altura): self.altura = altura
    def get_superficieCorporal(self): return self.superficieCorporal
    def set_superficieCorporal(self, superficieCorporal): self.superficieCorporal = superficieCorporal
    def get_idade(self): return self.idade
    def set_idade(self, idade): self.idade = idade
    def get_sexo(self): return self.sexo
    def set_sexo(self, sexo): self.sexo = sexo
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_sexo(self, value):
        # Validate type dm_sexo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_sexo' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_sexo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.peso is not None or
            self.altura is not None or
            self.superficieCorporal is not None or
            self.idade is not None or
            self.sexo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_dadosComplementaresBeneficiario', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_dadosComplementaresBeneficiario')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_dadosComplementaresBeneficiario', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_dadosComplementaresBeneficiario'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_dadosComplementaresBeneficiario', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.peso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%speso>%s</%speso>%s' % (namespace_, self.gds_format_string(quote_xml(self.peso).encode(ExternalEncoding), input_name='peso'), namespace_, eol_))
        if self.altura is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saltura>%s</%saltura>%s' % (namespace_, self.gds_format_string(quote_xml(self.altura).encode(ExternalEncoding), input_name='altura'), namespace_, eol_))
        if self.superficieCorporal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssuperficieCorporal>%s</%ssuperficieCorporal>%s' % (namespace_, self.gds_format_string(quote_xml(self.superficieCorporal).encode(ExternalEncoding), input_name='superficieCorporal'), namespace_, eol_))
        if self.idade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidade>%s</%sidade>%s' % (namespace_, self.gds_format_integer(self.idade, input_name='idade'), namespace_, eol_))
        if self.sexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssexo>%s</%ssexo>%s' % (namespace_, self.gds_format_string(quote_xml(self.sexo).encode(ExternalEncoding), input_name='sexo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_dadosComplementaresBeneficiario'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.peso is not None:
            showIndent(outfile, level)
            outfile.write('peso=%s,\n' % quote_python(self.peso).encode(ExternalEncoding))
        if self.altura is not None:
            showIndent(outfile, level)
            outfile.write('altura=%s,\n' % quote_python(self.altura).encode(ExternalEncoding))
        if self.superficieCorporal is not None:
            showIndent(outfile, level)
            outfile.write('superficieCorporal=%s,\n' % quote_python(self.superficieCorporal).encode(ExternalEncoding))
        if self.idade is not None:
            showIndent(outfile, level)
            outfile.write('idade=%d,\n' % self.idade)
        if self.sexo is not None:
            showIndent(outfile, level)
            outfile.write('sexo=%s,\n' % quote_python(self.sexo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'peso':
            peso_ = child_.text
            peso_ = self.gds_validate_string(peso_, node, 'peso')
            self.peso = peso_
        elif nodeName_ == 'altura':
            altura_ = child_.text
            altura_ = self.gds_validate_string(altura_, node, 'altura')
            self.altura = altura_
        elif nodeName_ == 'superficieCorporal':
            superficieCorporal_ = child_.text
            superficieCorporal_ = self.gds_validate_string(superficieCorporal_, node, 'superficieCorporal')
            self.superficieCorporal = superficieCorporal_
        elif nodeName_ == 'idade':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'idade')
            self.idade = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.idade)
        elif nodeName_ == 'sexo':
            sexo_ = child_.text
            sexo_ = self.gds_validate_string(sexo_, node, 'sexo')
            self.sexo = sexo_
            # validate type dm_sexo
            self.validate_dm_sexo(self.sexo)
# end class ct_dadosComplementaresBeneficiario


class ct_dadosComplementaresBeneficiarioRadio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, idade=None, sexo=None):
        self.original_tagname_ = None
        self.idade = idade
        self.validate_st_numerico3(self.idade)
        self.sexo = sexo
        self.validate_dm_sexo(self.sexo)
    def factory(*args_, **kwargs_):
        if ct_dadosComplementaresBeneficiarioRadio.subclass:
            return ct_dadosComplementaresBeneficiarioRadio.subclass(*args_, **kwargs_)
        else:
            return ct_dadosComplementaresBeneficiarioRadio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_idade(self): return self.idade
    def set_idade(self, idade): self.idade = idade
    def get_sexo(self): return self.sexo
    def set_sexo(self, sexo): self.sexo = sexo
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_sexo(self, value):
        # Validate type dm_sexo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_sexo' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_sexo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.idade is not None or
            self.sexo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_dadosComplementaresBeneficiarioRadio', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_dadosComplementaresBeneficiarioRadio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_dadosComplementaresBeneficiarioRadio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_dadosComplementaresBeneficiarioRadio'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_dadosComplementaresBeneficiarioRadio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.idade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidade>%s</%sidade>%s' % (namespace_, self.gds_format_integer(self.idade, input_name='idade'), namespace_, eol_))
        if self.sexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssexo>%s</%ssexo>%s' % (namespace_, self.gds_format_string(quote_xml(self.sexo).encode(ExternalEncoding), input_name='sexo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_dadosComplementaresBeneficiarioRadio'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.idade is not None:
            showIndent(outfile, level)
            outfile.write('idade=%d,\n' % self.idade)
        if self.sexo is not None:
            showIndent(outfile, level)
            outfile.write('sexo=%s,\n' % quote_python(self.sexo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'idade':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'idade')
            self.idade = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.idade)
        elif nodeName_ == 'sexo':
            sexo_ = child_.text
            sexo_ = self.gds_validate_string(sexo_, node, 'sexo')
            self.sexo = sexo_
            # validate type dm_sexo
            self.validate_dm_sexo(self.sexo)
# end class ct_dadosComplementaresBeneficiarioRadio


class ct_demonstrativoCabecalho(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroDemonstrativo=None, nomeOperadora=None, numeroCNPJ=None, dataEmissao=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroDemonstrativo = numeroDemonstrativo
        self.validate_st_texto20(self.numeroDemonstrativo)
        self.nomeOperadora = nomeOperadora
        self.validate_st_texto70(self.nomeOperadora)
        self.numeroCNPJ = numeroCNPJ
        self.validate_st_CNPJ(self.numeroCNPJ)
        if isinstance(dataEmissao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEmissao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEmissao
        self.dataEmissao = initvalue_
    def factory(*args_, **kwargs_):
        if ct_demonstrativoCabecalho.subclass:
            return ct_demonstrativoCabecalho.subclass(*args_, **kwargs_)
        else:
            return ct_demonstrativoCabecalho(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroDemonstrativo(self): return self.numeroDemonstrativo
    def set_numeroDemonstrativo(self, numeroDemonstrativo): self.numeroDemonstrativo = numeroDemonstrativo
    def get_nomeOperadora(self): return self.nomeOperadora
    def set_nomeOperadora(self, nomeOperadora): self.nomeOperadora = nomeOperadora
    def get_numeroCNPJ(self): return self.numeroCNPJ
    def set_numeroCNPJ(self, numeroCNPJ): self.numeroCNPJ = numeroCNPJ
    def get_dataEmissao(self): return self.dataEmissao
    def set_dataEmissao(self, dataEmissao): self.dataEmissao = dataEmissao
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroDemonstrativo is not None or
            self.nomeOperadora is not None or
            self.numeroCNPJ is not None or
            self.dataEmissao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_demonstrativoCabecalho', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_demonstrativoCabecalho')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_demonstrativoCabecalho', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_demonstrativoCabecalho'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_demonstrativoCabecalho', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroDemonstrativo>%s</%snumeroDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroDemonstrativo).encode(ExternalEncoding), input_name='numeroDemonstrativo'), namespace_, eol_))
        if self.nomeOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeOperadora>%s</%snomeOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeOperadora).encode(ExternalEncoding), input_name='nomeOperadora'), namespace_, eol_))
        if self.numeroCNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNPJ>%s</%snumeroCNPJ>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNPJ).encode(ExternalEncoding), input_name='numeroCNPJ'), namespace_, eol_))
        if self.dataEmissao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEmissao>%s</%sdataEmissao>%s' % (namespace_, self.gds_format_date(self.dataEmissao, input_name='dataEmissao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_demonstrativoCabecalho'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('numeroDemonstrativo=%s,\n' % quote_python(self.numeroDemonstrativo).encode(ExternalEncoding))
        if self.nomeOperadora is not None:
            showIndent(outfile, level)
            outfile.write('nomeOperadora=%s,\n' % quote_python(self.nomeOperadora).encode(ExternalEncoding))
        if self.numeroCNPJ is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNPJ=%s,\n' % quote_python(self.numeroCNPJ).encode(ExternalEncoding))
        if self.dataEmissao is not None:
            showIndent(outfile, level)
            outfile.write('dataEmissao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEmissao, input_name='dataEmissao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroDemonstrativo':
            numeroDemonstrativo_ = child_.text
            numeroDemonstrativo_ = self.gds_validate_string(numeroDemonstrativo_, node, 'numeroDemonstrativo')
            self.numeroDemonstrativo = numeroDemonstrativo_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroDemonstrativo)
        elif nodeName_ == 'nomeOperadora':
            nomeOperadora_ = child_.text
            nomeOperadora_ = self.gds_validate_string(nomeOperadora_, node, 'nomeOperadora')
            self.nomeOperadora = nomeOperadora_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeOperadora)
        elif nodeName_ == 'numeroCNPJ':
            numeroCNPJ_ = child_.text
            numeroCNPJ_ = self.gds_validate_string(numeroCNPJ_, node, 'numeroCNPJ')
            self.numeroCNPJ = numeroCNPJ_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.numeroCNPJ)
        elif nodeName_ == 'dataEmissao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEmissao = dval_
            # validate type st_data
            self.validate_st_data(self.dataEmissao)
# end class ct_demonstrativoCabecalho


class ct_demonstrativoRetorno(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, demonstrativoAnaliseConta=None, demonstrativoPagamento=None, demonstrativoPagamentoOdonto=None, situacaoDemonstrativoRetorno=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        if demonstrativoAnaliseConta is None:
            self.demonstrativoAnaliseConta = []
        else:
            self.demonstrativoAnaliseConta = demonstrativoAnaliseConta
        self.demonstrativoPagamento = demonstrativoPagamento
        self.demonstrativoPagamentoOdonto = demonstrativoPagamentoOdonto
        self.situacaoDemonstrativoRetorno = situacaoDemonstrativoRetorno
    def factory(*args_, **kwargs_):
        if ct_demonstrativoRetorno.subclass:
            return ct_demonstrativoRetorno.subclass(*args_, **kwargs_)
        else:
            return ct_demonstrativoRetorno(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_demonstrativoAnaliseConta(self): return self.demonstrativoAnaliseConta
    def set_demonstrativoAnaliseConta(self, demonstrativoAnaliseConta): self.demonstrativoAnaliseConta = demonstrativoAnaliseConta
    def add_demonstrativoAnaliseConta(self, value): self.demonstrativoAnaliseConta.append(value)
    def insert_demonstrativoAnaliseConta_at(self, index, value): self.demonstrativoAnaliseConta.insert(index, value)
    def replace_demonstrativoAnaliseConta_at(self, index, value): self.demonstrativoAnaliseConta[index] = value
    def get_demonstrativoPagamento(self): return self.demonstrativoPagamento
    def set_demonstrativoPagamento(self, demonstrativoPagamento): self.demonstrativoPagamento = demonstrativoPagamento
    def get_demonstrativoPagamentoOdonto(self): return self.demonstrativoPagamentoOdonto
    def set_demonstrativoPagamentoOdonto(self, demonstrativoPagamentoOdonto): self.demonstrativoPagamentoOdonto = demonstrativoPagamentoOdonto
    def get_situacaoDemonstrativoRetorno(self): return self.situacaoDemonstrativoRetorno
    def set_situacaoDemonstrativoRetorno(self, situacaoDemonstrativoRetorno): self.situacaoDemonstrativoRetorno = situacaoDemonstrativoRetorno
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.demonstrativoAnaliseConta or
            self.demonstrativoPagamento is not None or
            self.demonstrativoPagamentoOdonto is not None or
            self.situacaoDemonstrativoRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_demonstrativoRetorno', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_demonstrativoRetorno')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_demonstrativoRetorno', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_demonstrativoRetorno'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_demonstrativoRetorno', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        for demonstrativoAnaliseConta_ in self.demonstrativoAnaliseConta:
            demonstrativoAnaliseConta_.export(outfile, level, namespace_, name_='demonstrativoAnaliseConta', pretty_print=pretty_print)
        if self.demonstrativoPagamento is not None:
            self.demonstrativoPagamento.export(outfile, level, namespace_, name_='demonstrativoPagamento', pretty_print=pretty_print)
        if self.demonstrativoPagamentoOdonto is not None:
            self.demonstrativoPagamentoOdonto.export(outfile, level, namespace_, name_='demonstrativoPagamentoOdonto', pretty_print=pretty_print)
        if self.situacaoDemonstrativoRetorno is not None:
            self.situacaoDemonstrativoRetorno.export(outfile, level, namespace_, name_='situacaoDemonstrativoRetorno', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_demonstrativoRetorno'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('demonstrativoAnaliseConta=[\n')
        level += 1
        for demonstrativoAnaliseConta_ in self.demonstrativoAnaliseConta:
            showIndent(outfile, level)
            outfile.write('model_.ctm_demonstrativoAnaliseConta(\n')
            demonstrativoAnaliseConta_.exportLiteral(outfile, level, name_='ctm_demonstrativoAnaliseConta')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.demonstrativoPagamento is not None:
            showIndent(outfile, level)
            outfile.write('demonstrativoPagamento=model_.ctm_demonstrativoPagamento(\n')
            self.demonstrativoPagamento.exportLiteral(outfile, level, name_='demonstrativoPagamento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.demonstrativoPagamentoOdonto is not None:
            showIndent(outfile, level)
            outfile.write('demonstrativoPagamentoOdonto=model_.cto_demonstrativoOdontologia(\n')
            self.demonstrativoPagamentoOdonto.exportLiteral(outfile, level, name_='demonstrativoPagamentoOdonto')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.situacaoDemonstrativoRetorno is not None:
            showIndent(outfile, level)
            outfile.write('situacaoDemonstrativoRetorno=model_.situacaoDemonstrativoRetorno(\n')
            self.situacaoDemonstrativoRetorno.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'demonstrativoAnaliseConta':
            obj_ = ctm_demonstrativoAnaliseConta.factory()
            obj_.build(child_)
            self.demonstrativoAnaliseConta.append(obj_)
            obj_.original_tagname_ = 'demonstrativoAnaliseConta'
        elif nodeName_ == 'demonstrativoPagamento':
            obj_ = ctm_demonstrativoPagamento.factory()
            obj_.build(child_)
            self.demonstrativoPagamento = obj_
            obj_.original_tagname_ = 'demonstrativoPagamento'
        elif nodeName_ == 'demonstrativoPagamentoOdonto':
            obj_ = cto_demonstrativoOdontologia.factory()
            obj_.build(child_)
            self.demonstrativoPagamentoOdonto = obj_
            obj_.original_tagname_ = 'demonstrativoPagamentoOdonto'
        elif nodeName_ == 'situacaoDemonstrativoRetorno':
            obj_ = situacaoDemonstrativoRetorno.factory()
            obj_.build(child_)
            self.situacaoDemonstrativoRetorno = obj_
            obj_.original_tagname_ = 'situacaoDemonstrativoRetorno'
# end class ct_demonstrativoRetorno


class situacaoDemonstrativoRetorno(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoOperadora=None, dadosPrestador=None, numeroProtocolo=None, protocoloSolicitacaoDemonstrativo=None, tipoDemonstrativo=None, dataSituacaoDemonstrativo=None, situacaoDemonstrativo=None):
        self.original_tagname_ = None
        self.identificacaoOperadora = identificacaoOperadora
        self.validate_st_registroANS(self.identificacaoOperadora)
        self.dadosPrestador = dadosPrestador
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.protocoloSolicitacaoDemonstrativo = protocoloSolicitacaoDemonstrativo
        self.validate_st_texto12(self.protocoloSolicitacaoDemonstrativo)
        self.tipoDemonstrativo = tipoDemonstrativo
        self.validate_dm_tipoDemonstrativo(self.tipoDemonstrativo)
        if isinstance(dataSituacaoDemonstrativo, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSituacaoDemonstrativo, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSituacaoDemonstrativo
        self.dataSituacaoDemonstrativo = initvalue_
        self.situacaoDemonstrativo = situacaoDemonstrativo
        self.validate_dm_statusProtocolo(self.situacaoDemonstrativo)
    def factory(*args_, **kwargs_):
        if situacaoDemonstrativoRetorno.subclass:
            return situacaoDemonstrativoRetorno.subclass(*args_, **kwargs_)
        else:
            return situacaoDemonstrativoRetorno(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOperadora(self): return self.identificacaoOperadora
    def set_identificacaoOperadora(self, identificacaoOperadora): self.identificacaoOperadora = identificacaoOperadora
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_protocoloSolicitacaoDemonstrativo(self): return self.protocoloSolicitacaoDemonstrativo
    def set_protocoloSolicitacaoDemonstrativo(self, protocoloSolicitacaoDemonstrativo): self.protocoloSolicitacaoDemonstrativo = protocoloSolicitacaoDemonstrativo
    def get_tipoDemonstrativo(self): return self.tipoDemonstrativo
    def set_tipoDemonstrativo(self, tipoDemonstrativo): self.tipoDemonstrativo = tipoDemonstrativo
    def get_dataSituacaoDemonstrativo(self): return self.dataSituacaoDemonstrativo
    def set_dataSituacaoDemonstrativo(self, dataSituacaoDemonstrativo): self.dataSituacaoDemonstrativo = dataSituacaoDemonstrativo
    def get_situacaoDemonstrativo(self): return self.situacaoDemonstrativo
    def set_situacaoDemonstrativo(self, situacaoDemonstrativo): self.situacaoDemonstrativo = situacaoDemonstrativo
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoDemonstrativo(self, value):
        # Validate type dm_tipoDemonstrativo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoDemonstrativo' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_statusProtocolo(self, value):
        # Validate type dm_statusProtocolo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.identificacaoOperadora is not None or
            self.dadosPrestador is not None or
            self.numeroProtocolo is not None or
            self.protocoloSolicitacaoDemonstrativo is not None or
            self.tipoDemonstrativo is not None or
            self.dataSituacaoDemonstrativo is not None or
            self.situacaoDemonstrativo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='situacaoDemonstrativoRetorno', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='situacaoDemonstrativoRetorno')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='situacaoDemonstrativoRetorno', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='situacaoDemonstrativoRetorno'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='situacaoDemonstrativoRetorno', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificacaoOperadora>%s</%sidentificacaoOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.identificacaoOperadora).encode(ExternalEncoding), input_name='identificacaoOperadora'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.protocoloSolicitacaoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprotocoloSolicitacaoDemonstrativo>%s</%sprotocoloSolicitacaoDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.protocoloSolicitacaoDemonstrativo).encode(ExternalEncoding), input_name='protocoloSolicitacaoDemonstrativo'), namespace_, eol_))
        if self.tipoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoDemonstrativo>%s</%stipoDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoDemonstrativo).encode(ExternalEncoding), input_name='tipoDemonstrativo'), namespace_, eol_))
        if self.dataSituacaoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSituacaoDemonstrativo>%s</%sdataSituacaoDemonstrativo>%s' % (namespace_, self.gds_format_date(self.dataSituacaoDemonstrativo, input_name='dataSituacaoDemonstrativo'), namespace_, eol_))
        if self.situacaoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssituacaoDemonstrativo>%s</%ssituacaoDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.situacaoDemonstrativo).encode(ExternalEncoding), input_name='situacaoDemonstrativo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='situacaoDemonstrativoRetorno'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOperadora=%s,\n' % quote_python(self.identificacaoOperadora).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.protocoloSolicitacaoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('protocoloSolicitacaoDemonstrativo=%s,\n' % quote_python(self.protocoloSolicitacaoDemonstrativo).encode(ExternalEncoding))
        if self.tipoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('tipoDemonstrativo=%s,\n' % quote_python(self.tipoDemonstrativo).encode(ExternalEncoding))
        if self.dataSituacaoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('dataSituacaoDemonstrativo=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSituacaoDemonstrativo, input_name='dataSituacaoDemonstrativo'))
        if self.situacaoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('situacaoDemonstrativo=%s,\n' % quote_python(self.situacaoDemonstrativo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOperadora':
            identificacaoOperadora_ = child_.text
            identificacaoOperadora_ = self.gds_validate_string(identificacaoOperadora_, node, 'identificacaoOperadora')
            self.identificacaoOperadora = identificacaoOperadora_
            # validate type st_registroANS
            self.validate_st_registroANS(self.identificacaoOperadora)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'protocoloSolicitacaoDemonstrativo':
            protocoloSolicitacaoDemonstrativo_ = child_.text
            protocoloSolicitacaoDemonstrativo_ = self.gds_validate_string(protocoloSolicitacaoDemonstrativo_, node, 'protocoloSolicitacaoDemonstrativo')
            self.protocoloSolicitacaoDemonstrativo = protocoloSolicitacaoDemonstrativo_
            # validate type st_texto12
            self.validate_st_texto12(self.protocoloSolicitacaoDemonstrativo)
        elif nodeName_ == 'tipoDemonstrativo':
            tipoDemonstrativo_ = child_.text
            tipoDemonstrativo_ = self.gds_validate_string(tipoDemonstrativo_, node, 'tipoDemonstrativo')
            self.tipoDemonstrativo = tipoDemonstrativo_
            # validate type dm_tipoDemonstrativo
            self.validate_dm_tipoDemonstrativo(self.tipoDemonstrativo)
        elif nodeName_ == 'dataSituacaoDemonstrativo':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSituacaoDemonstrativo = dval_
            # validate type st_data
            self.validate_st_data(self.dataSituacaoDemonstrativo)
        elif nodeName_ == 'situacaoDemonstrativo':
            situacaoDemonstrativo_ = child_.text
            situacaoDemonstrativo_ = self.gds_validate_string(situacaoDemonstrativo_, node, 'situacaoDemonstrativo')
            self.situacaoDemonstrativo = situacaoDemonstrativo_
            # validate type dm_statusProtocolo
            self.validate_dm_statusProtocolo(self.situacaoDemonstrativo)
# end class situacaoDemonstrativoRetorno


class ct_demonstrativoSolicitacao(GeneratedsSuper):
    """estrutura para solicitação de demonstrativo de pagamento"""
    subclass = None
    superclass = None
    def __init__(self, demonstrativoPagamento=None, demonstrativoAnalise=None):
        self.original_tagname_ = None
        self.demonstrativoPagamento = demonstrativoPagamento
        self.demonstrativoAnalise = demonstrativoAnalise
    def factory(*args_, **kwargs_):
        if ct_demonstrativoSolicitacao.subclass:
            return ct_demonstrativoSolicitacao.subclass(*args_, **kwargs_)
        else:
            return ct_demonstrativoSolicitacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_demonstrativoPagamento(self): return self.demonstrativoPagamento
    def set_demonstrativoPagamento(self, demonstrativoPagamento): self.demonstrativoPagamento = demonstrativoPagamento
    def get_demonstrativoAnalise(self): return self.demonstrativoAnalise
    def set_demonstrativoAnalise(self, demonstrativoAnalise): self.demonstrativoAnalise = demonstrativoAnalise
    def hasContent_(self):
        if (
            self.demonstrativoPagamento is not None or
            self.demonstrativoAnalise is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_demonstrativoSolicitacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_demonstrativoSolicitacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_demonstrativoSolicitacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_demonstrativoSolicitacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_demonstrativoSolicitacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.demonstrativoPagamento is not None:
            self.demonstrativoPagamento.export(outfile, level, namespace_, name_='demonstrativoPagamento', pretty_print=pretty_print)
        if self.demonstrativoAnalise is not None:
            self.demonstrativoAnalise.export(outfile, level, namespace_, name_='demonstrativoAnalise', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_demonstrativoSolicitacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.demonstrativoPagamento is not None:
            showIndent(outfile, level)
            outfile.write('demonstrativoPagamento=model_.demonstrativoPagamento(\n')
            self.demonstrativoPagamento.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.demonstrativoAnalise is not None:
            showIndent(outfile, level)
            outfile.write('demonstrativoAnalise=model_.demonstrativoAnalise(\n')
            self.demonstrativoAnalise.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'demonstrativoPagamento':
            obj_ = demonstrativoPagamento.factory()
            obj_.build(child_)
            self.demonstrativoPagamento = obj_
            obj_.original_tagname_ = 'demonstrativoPagamento'
        elif nodeName_ == 'demonstrativoAnalise':
            obj_ = demonstrativoAnalise.factory()
            obj_.build(child_)
            self.demonstrativoAnalise = obj_
            obj_.original_tagname_ = 'demonstrativoAnalise'
# end class ct_demonstrativoSolicitacao


class demonstrativoPagamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosPrestador=None, dataSolicitacao=None, tipoDemonstrativo=None, periodo=None):
        self.original_tagname_ = None
        self.dadosPrestador = dadosPrestador
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
        self.tipoDemonstrativo = tipoDemonstrativo
        self.validate_dm_tipoDemonstrativoPagamento(self.tipoDemonstrativo)
        self.periodo = periodo
    def factory(*args_, **kwargs_):
        if demonstrativoPagamento.subclass:
            return demonstrativoPagamento.subclass(*args_, **kwargs_)
        else:
            return demonstrativoPagamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def get_tipoDemonstrativo(self): return self.tipoDemonstrativo
    def set_tipoDemonstrativo(self, tipoDemonstrativo): self.tipoDemonstrativo = tipoDemonstrativo
    def get_periodo(self): return self.periodo
    def set_periodo(self, periodo): self.periodo = periodo
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tipoDemonstrativoPagamento(self, value):
        # Validate type dm_tipoDemonstrativoPagamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoDemonstrativoPagamento' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosPrestador is not None or
            self.dataSolicitacao is not None or
            self.tipoDemonstrativo is not None or
            self.periodo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='demonstrativoPagamento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='demonstrativoPagamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='demonstrativoPagamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='demonstrativoPagamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='demonstrativoPagamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
        if self.tipoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoDemonstrativo>%s</%stipoDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoDemonstrativo).encode(ExternalEncoding), input_name='tipoDemonstrativo'), namespace_, eol_))
        if self.periodo is not None:
            self.periodo.export(outfile, level, namespace_, name_='periodo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='demonstrativoPagamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
        if self.tipoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('tipoDemonstrativo=%s,\n' % quote_python(self.tipoDemonstrativo).encode(ExternalEncoding))
        if self.periodo is not None:
            showIndent(outfile, level)
            outfile.write('periodo=model_.periodo(\n')
            self.periodo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
        elif nodeName_ == 'tipoDemonstrativo':
            tipoDemonstrativo_ = child_.text
            tipoDemonstrativo_ = self.gds_validate_string(tipoDemonstrativo_, node, 'tipoDemonstrativo')
            self.tipoDemonstrativo = tipoDemonstrativo_
            # validate type dm_tipoDemonstrativoPagamento
            self.validate_dm_tipoDemonstrativoPagamento(self.tipoDemonstrativo)
        elif nodeName_ == 'periodo':
            obj_ = periodo.factory()
            obj_.build(child_)
            self.periodo = obj_
            obj_.original_tagname_ = 'periodo'
# end class demonstrativoPagamento


class periodo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataPagamento=None, competencia=None):
        self.original_tagname_ = None
        if isinstance(dataPagamento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataPagamento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataPagamento
        self.dataPagamento = initvalue_
        self.competencia = competencia
        self.validate_st_competencia(self.competencia)
    def factory(*args_, **kwargs_):
        if periodo.subclass:
            return periodo.subclass(*args_, **kwargs_)
        else:
            return periodo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataPagamento(self): return self.dataPagamento
    def set_dataPagamento(self, dataPagamento): self.dataPagamento = dataPagamento
    def get_competencia(self): return self.competencia
    def set_competencia(self, competencia): self.competencia = competencia
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_competencia(self, value):
        # Validate type st_competencia, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_competencia_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_competencia_patterns_, ))
    validate_st_competencia_patterns_ = [['^[0-9]{4}[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.dataPagamento is not None or
            self.competencia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='periodo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='periodo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='periodo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='periodo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='periodo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataPagamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataPagamento>%s</%sdataPagamento>%s' % (namespace_, self.gds_format_date(self.dataPagamento, input_name='dataPagamento'), namespace_, eol_))
        if self.competencia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scompetencia>%s</%scompetencia>%s' % (namespace_, self.gds_format_string(quote_xml(self.competencia).encode(ExternalEncoding), input_name='competencia'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='periodo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataPagamento is not None:
            showIndent(outfile, level)
            outfile.write('dataPagamento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataPagamento, input_name='dataPagamento'))
        if self.competencia is not None:
            showIndent(outfile, level)
            outfile.write('competencia=%s,\n' % quote_python(self.competencia).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataPagamento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataPagamento = dval_
            # validate type st_data
            self.validate_st_data(self.dataPagamento)
        elif nodeName_ == 'competencia':
            competencia_ = child_.text
            competencia_ = self.gds_validate_string(competencia_, node, 'competencia')
            self.competencia = competencia_
            # validate type st_competencia
            self.validate_st_competencia(self.competencia)
# end class periodo


class demonstrativoAnalise(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosPrestador=None, dataSolicitacao=None, protocolos=None):
        self.original_tagname_ = None
        self.dadosPrestador = dadosPrestador
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
        self.protocolos = protocolos
    def factory(*args_, **kwargs_):
        if demonstrativoAnalise.subclass:
            return demonstrativoAnalise.subclass(*args_, **kwargs_)
        else:
            return demonstrativoAnalise(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def get_protocolos(self): return self.protocolos
    def set_protocolos(self, protocolos): self.protocolos = protocolos
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.dadosPrestador is not None or
            self.dataSolicitacao is not None or
            self.protocolos is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='demonstrativoAnalise', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='demonstrativoAnalise')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='demonstrativoAnalise', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='demonstrativoAnalise'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='demonstrativoAnalise', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
        if self.protocolos is not None:
            self.protocolos.export(outfile, level, namespace_, name_='protocolos', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='demonstrativoAnalise'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
        if self.protocolos is not None:
            showIndent(outfile, level)
            outfile.write('protocolos=model_.protocolos(\n')
            self.protocolos.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
        elif nodeName_ == 'protocolos':
            obj_ = protocolos.factory()
            obj_.build(child_)
            self.protocolos = obj_
            obj_.original_tagname_ = 'protocolos'
# end class demonstrativoAnalise


class protocolos(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None):
        self.original_tagname_ = None
        if numeroProtocolo is None:
            self.numeroProtocolo = []
        else:
            self.numeroProtocolo = numeroProtocolo
    def factory(*args_, **kwargs_):
        if protocolos.subclass:
            return protocolos.subclass(*args_, **kwargs_)
        else:
            return protocolos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def add_numeroProtocolo(self, value): self.numeroProtocolo.append(value)
    def insert_numeroProtocolo_at(self, index, value): self.numeroProtocolo.insert(index, value)
    def replace_numeroProtocolo_at(self, index, value): self.numeroProtocolo[index] = value
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroProtocolo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='protocolos', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='protocolos')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='protocolos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='protocolos'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='protocolos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for numeroProtocolo_ in self.numeroProtocolo:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(numeroProtocolo_).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='protocolos'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('numeroProtocolo=[\n')
        level += 1
        for numeroProtocolo_ in self.numeroProtocolo:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(numeroProtocolo_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo.append(numeroProtocolo_)
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo[-1])
# end class protocolos


class ct_diagnostico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tabelaDiagnostico=None, codigoDiagnostico=None, descricaoDiagnostico=None):
        self.original_tagname_ = None
        self.tabelaDiagnostico = tabelaDiagnostico
        self.validate_dm_tabelasDiagnostico(self.tabelaDiagnostico)
        self.codigoDiagnostico = codigoDiagnostico
        self.validate_st_texto4(self.codigoDiagnostico)
        self.descricaoDiagnostico = descricaoDiagnostico
        self.validate_st_texto150(self.descricaoDiagnostico)
    def factory(*args_, **kwargs_):
        if ct_diagnostico.subclass:
            return ct_diagnostico.subclass(*args_, **kwargs_)
        else:
            return ct_diagnostico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tabelaDiagnostico(self): return self.tabelaDiagnostico
    def set_tabelaDiagnostico(self, tabelaDiagnostico): self.tabelaDiagnostico = tabelaDiagnostico
    def get_codigoDiagnostico(self): return self.codigoDiagnostico
    def set_codigoDiagnostico(self, codigoDiagnostico): self.codigoDiagnostico = codigoDiagnostico
    def get_descricaoDiagnostico(self): return self.descricaoDiagnostico
    def set_descricaoDiagnostico(self, descricaoDiagnostico): self.descricaoDiagnostico = descricaoDiagnostico
    def validate_dm_tabelasDiagnostico(self, value):
        # Validate type dm_tabelasDiagnostico, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['CID-10']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tabelasDiagnostico' % {"value" : value.encode("utf-8")} )
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tabelaDiagnostico is not None or
            self.codigoDiagnostico is not None or
            self.descricaoDiagnostico is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_diagnostico', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_diagnostico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_diagnostico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_diagnostico'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_diagnostico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tabelaDiagnostico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stabelaDiagnostico>%s</%stabelaDiagnostico>%s' % (namespace_, self.gds_format_string(quote_xml(self.tabelaDiagnostico).encode(ExternalEncoding), input_name='tabelaDiagnostico'), namespace_, eol_))
        if self.codigoDiagnostico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoDiagnostico>%s</%scodigoDiagnostico>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoDiagnostico).encode(ExternalEncoding), input_name='codigoDiagnostico'), namespace_, eol_))
        if self.descricaoDiagnostico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricaoDiagnostico>%s</%sdescricaoDiagnostico>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricaoDiagnostico).encode(ExternalEncoding), input_name='descricaoDiagnostico'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_diagnostico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.tabelaDiagnostico is not None:
            showIndent(outfile, level)
            outfile.write('tabelaDiagnostico=%s,\n' % quote_python(self.tabelaDiagnostico).encode(ExternalEncoding))
        if self.codigoDiagnostico is not None:
            showIndent(outfile, level)
            outfile.write('codigoDiagnostico=%s,\n' % quote_python(self.codigoDiagnostico).encode(ExternalEncoding))
        if self.descricaoDiagnostico is not None:
            showIndent(outfile, level)
            outfile.write('descricaoDiagnostico=%s,\n' % quote_python(self.descricaoDiagnostico).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tabelaDiagnostico':
            tabelaDiagnostico_ = child_.text
            tabelaDiagnostico_ = self.gds_validate_string(tabelaDiagnostico_, node, 'tabelaDiagnostico')
            self.tabelaDiagnostico = tabelaDiagnostico_
            # validate type dm_tabelasDiagnostico
            self.validate_dm_tabelasDiagnostico(self.tabelaDiagnostico)
        elif nodeName_ == 'codigoDiagnostico':
            codigoDiagnostico_ = child_.text
            codigoDiagnostico_ = self.gds_validate_string(codigoDiagnostico_, node, 'codigoDiagnostico')
            self.codigoDiagnostico = codigoDiagnostico_
            # validate type st_texto4
            self.validate_st_texto4(self.codigoDiagnostico)
        elif nodeName_ == 'descricaoDiagnostico':
            descricaoDiagnostico_ = child_.text
            descricaoDiagnostico_ = self.gds_validate_string(descricaoDiagnostico_, node, 'descricaoDiagnostico')
            self.descricaoDiagnostico = descricaoDiagnostico_
            # validate type st_texto150
            self.validate_st_texto150(self.descricaoDiagnostico)
# end class ct_diagnostico


class ct_diagnosticoOncologico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataDiagnostico=None, diagnosticoCID=None, estadiamento=None, finalidade=None, ecog=None, diagnosticoHispatologico=None, infoRelevantes=None):
        self.original_tagname_ = None
        if isinstance(dataDiagnostico, basestring):
            initvalue_ = datetime_.datetime.strptime(dataDiagnostico, '%Y-%m-%d').date()
        else:
            initvalue_ = dataDiagnostico
        self.dataDiagnostico = initvalue_
        if diagnosticoCID is None:
            self.diagnosticoCID = []
        else:
            self.diagnosticoCID = diagnosticoCID
        self.estadiamento = estadiamento
        self.validate_dm_estadiamento(self.estadiamento)
        self.finalidade = finalidade
        self.validate_dm_finalidadeTratamento(self.finalidade)
        self.ecog = ecog
        self.validate_dm_ecog(self.ecog)
        self.diagnosticoHispatologico = diagnosticoHispatologico
        self.validate_st_texto1000(self.diagnosticoHispatologico)
        self.infoRelevantes = infoRelevantes
        self.validate_st_texto1000(self.infoRelevantes)
    def factory(*args_, **kwargs_):
        if ct_diagnosticoOncologico.subclass:
            return ct_diagnosticoOncologico.subclass(*args_, **kwargs_)
        else:
            return ct_diagnosticoOncologico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataDiagnostico(self): return self.dataDiagnostico
    def set_dataDiagnostico(self, dataDiagnostico): self.dataDiagnostico = dataDiagnostico
    def get_diagnosticoCID(self): return self.diagnosticoCID
    def set_diagnosticoCID(self, diagnosticoCID): self.diagnosticoCID = diagnosticoCID
    def add_diagnosticoCID(self, value): self.diagnosticoCID.append(value)
    def insert_diagnosticoCID_at(self, index, value): self.diagnosticoCID.insert(index, value)
    def replace_diagnosticoCID_at(self, index, value): self.diagnosticoCID[index] = value
    def get_estadiamento(self): return self.estadiamento
    def set_estadiamento(self, estadiamento): self.estadiamento = estadiamento
    def get_finalidade(self): return self.finalidade
    def set_finalidade(self, finalidade): self.finalidade = finalidade
    def get_ecog(self): return self.ecog
    def set_ecog(self, ecog): self.ecog = ecog
    def get_diagnosticoHispatologico(self): return self.diagnosticoHispatologico
    def set_diagnosticoHispatologico(self, diagnosticoHispatologico): self.diagnosticoHispatologico = diagnosticoHispatologico
    def get_infoRelevantes(self): return self.infoRelevantes
    def set_infoRelevantes(self, infoRelevantes): self.infoRelevantes = infoRelevantes
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_dm_estadiamento(self, value):
        # Validate type dm_estadiamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_estadiamento' % {"value" : value.encode("utf-8")} )
    def validate_dm_finalidadeTratamento(self, value):
        # Validate type dm_finalidadeTratamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_finalidadeTratamento' % {"value" : value.encode("utf-8")} )
    def validate_dm_ecog(self, value):
        # Validate type dm_ecog, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_ecog' % {"value" : value.encode("utf-8")} )
    def validate_st_texto1000(self, value):
        # Validate type st_texto1000, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataDiagnostico is not None or
            self.diagnosticoCID or
            self.estadiamento is not None or
            self.finalidade is not None or
            self.ecog is not None or
            self.diagnosticoHispatologico is not None or
            self.infoRelevantes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_diagnosticoOncologico', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_diagnosticoOncologico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_diagnosticoOncologico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_diagnosticoOncologico'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_diagnosticoOncologico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataDiagnostico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataDiagnostico>%s</%sdataDiagnostico>%s' % (namespace_, self.gds_format_date(self.dataDiagnostico, input_name='dataDiagnostico'), namespace_, eol_))
        for diagnosticoCID_ in self.diagnosticoCID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiagnosticoCID>%s</%sdiagnosticoCID>%s' % (namespace_, self.gds_format_string(quote_xml(diagnosticoCID_).encode(ExternalEncoding), input_name='diagnosticoCID'), namespace_, eol_))
        if self.estadiamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sestadiamento>%s</%sestadiamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.estadiamento).encode(ExternalEncoding), input_name='estadiamento'), namespace_, eol_))
        if self.finalidade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfinalidade>%s</%sfinalidade>%s' % (namespace_, self.gds_format_string(quote_xml(self.finalidade).encode(ExternalEncoding), input_name='finalidade'), namespace_, eol_))
        if self.ecog is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%secog>%s</%secog>%s' % (namespace_, self.gds_format_string(quote_xml(self.ecog).encode(ExternalEncoding), input_name='ecog'), namespace_, eol_))
        if self.diagnosticoHispatologico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiagnosticoHispatologico>%s</%sdiagnosticoHispatologico>%s' % (namespace_, self.gds_format_string(quote_xml(self.diagnosticoHispatologico).encode(ExternalEncoding), input_name='diagnosticoHispatologico'), namespace_, eol_))
        if self.infoRelevantes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinfoRelevantes>%s</%sinfoRelevantes>%s' % (namespace_, self.gds_format_string(quote_xml(self.infoRelevantes).encode(ExternalEncoding), input_name='infoRelevantes'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_diagnosticoOncologico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataDiagnostico is not None:
            showIndent(outfile, level)
            outfile.write('dataDiagnostico=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataDiagnostico, input_name='dataDiagnostico'))
        showIndent(outfile, level)
        outfile.write('diagnosticoCID=[\n')
        level += 1
        for diagnosticoCID_ in self.diagnosticoCID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(diagnosticoCID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.estadiamento is not None:
            showIndent(outfile, level)
            outfile.write('estadiamento=%s,\n' % quote_python(self.estadiamento).encode(ExternalEncoding))
        if self.finalidade is not None:
            showIndent(outfile, level)
            outfile.write('finalidade=%s,\n' % quote_python(self.finalidade).encode(ExternalEncoding))
        if self.ecog is not None:
            showIndent(outfile, level)
            outfile.write('ecog=%s,\n' % quote_python(self.ecog).encode(ExternalEncoding))
        if self.diagnosticoHispatologico is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoHispatologico=%s,\n' % quote_python(self.diagnosticoHispatologico).encode(ExternalEncoding))
        if self.infoRelevantes is not None:
            showIndent(outfile, level)
            outfile.write('infoRelevantes=%s,\n' % quote_python(self.infoRelevantes).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataDiagnostico':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataDiagnostico = dval_
            # validate type st_data
            self.validate_st_data(self.dataDiagnostico)
        elif nodeName_ == 'diagnosticoCID':
            diagnosticoCID_ = child_.text
            diagnosticoCID_ = self.gds_validate_string(diagnosticoCID_, node, 'diagnosticoCID')
            self.diagnosticoCID.append(diagnosticoCID_)
            # validate type st_texto4
            self.validate_st_texto4(self.diagnosticoCID[-1])
        elif nodeName_ == 'estadiamento':
            estadiamento_ = child_.text
            estadiamento_ = self.gds_validate_string(estadiamento_, node, 'estadiamento')
            self.estadiamento = estadiamento_
            # validate type dm_estadiamento
            self.validate_dm_estadiamento(self.estadiamento)
        elif nodeName_ == 'finalidade':
            finalidade_ = child_.text
            finalidade_ = self.gds_validate_string(finalidade_, node, 'finalidade')
            self.finalidade = finalidade_
            # validate type dm_finalidadeTratamento
            self.validate_dm_finalidadeTratamento(self.finalidade)
        elif nodeName_ == 'ecog':
            ecog_ = child_.text
            ecog_ = self.gds_validate_string(ecog_, node, 'ecog')
            self.ecog = ecog_
            # validate type dm_ecog
            self.validate_dm_ecog(self.ecog)
        elif nodeName_ == 'diagnosticoHispatologico':
            diagnosticoHispatologico_ = child_.text
            diagnosticoHispatologico_ = self.gds_validate_string(diagnosticoHispatologico_, node, 'diagnosticoHispatologico')
            self.diagnosticoHispatologico = diagnosticoHispatologico_
            # validate type st_texto1000
            self.validate_st_texto1000(self.diagnosticoHispatologico)
        elif nodeName_ == 'infoRelevantes':
            infoRelevantes_ = child_.text
            infoRelevantes_ = self.gds_validate_string(infoRelevantes_, node, 'infoRelevantes')
            self.infoRelevantes = infoRelevantes_
            # validate type st_texto1000
            self.validate_st_texto1000(self.infoRelevantes)
# end class ct_diagnosticoOncologico


class ct_descontos(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, indicador=None, tipoDebitoCredito=None, descricaoDbCr=None, valorDbCr=None):
        self.original_tagname_ = None
        self.indicador = indicador
        self.validate_dm_debitoCreditoIndicador(self.indicador)
        self.tipoDebitoCredito = tipoDebitoCredito
        self.validate_dm_debitoCreditoTipo(self.tipoDebitoCredito)
        self.descricaoDbCr = descricaoDbCr
        self.validate_st_texto40(self.descricaoDbCr)
        self.valorDbCr = valorDbCr
    def factory(*args_, **kwargs_):
        if ct_descontos.subclass:
            return ct_descontos.subclass(*args_, **kwargs_)
        else:
            return ct_descontos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_indicador(self): return self.indicador
    def set_indicador(self, indicador): self.indicador = indicador
    def get_tipoDebitoCredito(self): return self.tipoDebitoCredito
    def set_tipoDebitoCredito(self, tipoDebitoCredito): self.tipoDebitoCredito = tipoDebitoCredito
    def get_descricaoDbCr(self): return self.descricaoDbCr
    def set_descricaoDbCr(self, descricaoDbCr): self.descricaoDbCr = descricaoDbCr
    def get_valorDbCr(self): return self.valorDbCr
    def set_valorDbCr(self, valorDbCr): self.valorDbCr = valorDbCr
    def validate_dm_debitoCreditoIndicador(self, value):
        # Validate type dm_debitoCreditoIndicador, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_debitoCreditoIndicador' % {"value" : value.encode("utf-8")} )
    def validate_dm_debitoCreditoTipo(self, value):
        # Validate type dm_debitoCreditoTipo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '07', '08', '09']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_debitoCreditoTipo' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_debitoCreditoTipo' % {"value" : value.encode("utf-8")} )
    def validate_st_texto40(self, value):
        # Validate type st_texto40, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.indicador is not None or
            self.tipoDebitoCredito is not None or
            self.descricaoDbCr is not None or
            self.valorDbCr is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_descontos', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_descontos')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_descontos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_descontos'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_descontos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.indicador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicador>%s</%sindicador>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicador).encode(ExternalEncoding), input_name='indicador'), namespace_, eol_))
        if self.tipoDebitoCredito is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoDebitoCredito>%s</%stipoDebitoCredito>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoDebitoCredito).encode(ExternalEncoding), input_name='tipoDebitoCredito'), namespace_, eol_))
        if self.descricaoDbCr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricaoDbCr>%s</%sdescricaoDbCr>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricaoDbCr).encode(ExternalEncoding), input_name='descricaoDbCr'), namespace_, eol_))
        if self.valorDbCr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorDbCr>%s</%svalorDbCr>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorDbCr).encode(ExternalEncoding), input_name='valorDbCr'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_descontos'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.indicador is not None:
            showIndent(outfile, level)
            outfile.write('indicador=%s,\n' % quote_python(self.indicador).encode(ExternalEncoding))
        if self.tipoDebitoCredito is not None:
            showIndent(outfile, level)
            outfile.write('tipoDebitoCredito=%s,\n' % quote_python(self.tipoDebitoCredito).encode(ExternalEncoding))
        if self.descricaoDbCr is not None:
            showIndent(outfile, level)
            outfile.write('descricaoDbCr=%s,\n' % quote_python(self.descricaoDbCr).encode(ExternalEncoding))
        if self.valorDbCr is not None:
            showIndent(outfile, level)
            outfile.write('valorDbCr=%s,\n' % quote_python(self.valorDbCr).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'indicador':
            indicador_ = child_.text
            indicador_ = self.gds_validate_string(indicador_, node, 'indicador')
            self.indicador = indicador_
            # validate type dm_debitoCreditoIndicador
            self.validate_dm_debitoCreditoIndicador(self.indicador)
        elif nodeName_ == 'tipoDebitoCredito':
            tipoDebitoCredito_ = child_.text
            tipoDebitoCredito_ = self.gds_validate_string(tipoDebitoCredito_, node, 'tipoDebitoCredito')
            self.tipoDebitoCredito = tipoDebitoCredito_
            # validate type dm_debitoCreditoTipo
            self.validate_dm_debitoCreditoTipo(self.tipoDebitoCredito)
        elif nodeName_ == 'descricaoDbCr':
            descricaoDbCr_ = child_.text
            descricaoDbCr_ = self.gds_validate_string(descricaoDbCr_, node, 'descricaoDbCr')
            self.descricaoDbCr = descricaoDbCr_
            # validate type st_texto40
            self.validate_st_texto40(self.descricaoDbCr)
        elif nodeName_ == 'valorDbCr':
            valorDbCr_ = child_.text
            valorDbCr_ = self.gds_validate_string(valorDbCr_, node, 'valorDbCr')
            self.valorDbCr = valorDbCr_
# end class ct_descontos


class ct_drogasSolicitadas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataProvavel=None, identificacao=None, qtDoses=None, viaAdministracao=None, frequencia=None):
        self.original_tagname_ = None
        if isinstance(dataProvavel, basestring):
            initvalue_ = datetime_.datetime.strptime(dataProvavel, '%Y-%m-%d').date()
        else:
            initvalue_ = dataProvavel
        self.dataProvavel = initvalue_
        self.identificacao = identificacao
        self.qtDoses = qtDoses
        self.viaAdministracao = viaAdministracao
        self.validate_dm_viaAdministracao(self.viaAdministracao)
        self.frequencia = frequencia
        self.validate_st_numerico2(self.frequencia)
    def factory(*args_, **kwargs_):
        if ct_drogasSolicitadas.subclass:
            return ct_drogasSolicitadas.subclass(*args_, **kwargs_)
        else:
            return ct_drogasSolicitadas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataProvavel(self): return self.dataProvavel
    def set_dataProvavel(self, dataProvavel): self.dataProvavel = dataProvavel
    def get_identificacao(self): return self.identificacao
    def set_identificacao(self, identificacao): self.identificacao = identificacao
    def get_qtDoses(self): return self.qtDoses
    def set_qtDoses(self, qtDoses): self.qtDoses = qtDoses
    def get_viaAdministracao(self): return self.viaAdministracao
    def set_viaAdministracao(self, viaAdministracao): self.viaAdministracao = viaAdministracao
    def get_frequencia(self): return self.frequencia
    def set_frequencia(self, frequencia): self.frequencia = frequencia
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_viaAdministracao(self, value):
        # Validate type dm_viaAdministracao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_viaAdministracao' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_viaAdministracao' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def hasContent_(self):
        if (
            self.dataProvavel is not None or
            self.identificacao is not None or
            self.qtDoses is not None or
            self.viaAdministracao is not None or
            self.frequencia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_drogasSolicitadas', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_drogasSolicitadas')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_drogasSolicitadas', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_drogasSolicitadas'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_drogasSolicitadas', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataProvavel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataProvavel>%s</%sdataProvavel>%s' % (namespace_, self.gds_format_date(self.dataProvavel, input_name='dataProvavel'), namespace_, eol_))
        if self.identificacao is not None:
            self.identificacao.export(outfile, level, namespace_, name_='identificacao', pretty_print=pretty_print)
        if self.qtDoses is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtDoses>%s</%sqtDoses>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtDoses).encode(ExternalEncoding), input_name='qtDoses'), namespace_, eol_))
        if self.viaAdministracao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sviaAdministracao>%s</%sviaAdministracao>%s' % (namespace_, self.gds_format_string(quote_xml(self.viaAdministracao).encode(ExternalEncoding), input_name='viaAdministracao'), namespace_, eol_))
        if self.frequencia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfrequencia>%s</%sfrequencia>%s' % (namespace_, self.gds_format_integer(self.frequencia, input_name='frequencia'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_drogasSolicitadas'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataProvavel is not None:
            showIndent(outfile, level)
            outfile.write('dataProvavel=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataProvavel, input_name='dataProvavel'))
        if self.identificacao is not None:
            showIndent(outfile, level)
            outfile.write('identificacao=model_.ct_procedimentoDados(\n')
            self.identificacao.exportLiteral(outfile, level, name_='identificacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.qtDoses is not None:
            showIndent(outfile, level)
            outfile.write('qtDoses=%s,\n' % quote_python(self.qtDoses).encode(ExternalEncoding))
        if self.viaAdministracao is not None:
            showIndent(outfile, level)
            outfile.write('viaAdministracao=%s,\n' % quote_python(self.viaAdministracao).encode(ExternalEncoding))
        if self.frequencia is not None:
            showIndent(outfile, level)
            outfile.write('frequencia=%d,\n' % self.frequencia)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataProvavel':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataProvavel = dval_
            # validate type st_data
            self.validate_st_data(self.dataProvavel)
        elif nodeName_ == 'identificacao':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.identificacao = obj_
            obj_.original_tagname_ = 'identificacao'
        elif nodeName_ == 'qtDoses':
            qtDoses_ = child_.text
            qtDoses_ = self.gds_validate_string(qtDoses_, node, 'qtDoses')
            self.qtDoses = qtDoses_
        elif nodeName_ == 'viaAdministracao':
            viaAdministracao_ = child_.text
            viaAdministracao_ = self.gds_validate_string(viaAdministracao_, node, 'viaAdministracao')
            self.viaAdministracao = viaAdministracao_
            # validate type dm_viaAdministracao
            self.validate_dm_viaAdministracao(self.viaAdministracao)
        elif nodeName_ == 'frequencia':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'frequencia')
            self.frequencia = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.frequencia)
# end class ct_drogasSolicitadas


class ct_elegibilidadeRecibo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroCarteira=None, validadeCarteira=None, nomeBeneficiario=None, numeroCNS=None, identificadorBeneficiario=None, respostaSolicitacao=None, motivosNegativa=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        if isinstance(validadeCarteira, basestring):
            initvalue_ = datetime_.datetime.strptime(validadeCarteira, '%Y-%m-%d').date()
        else:
            initvalue_ = validadeCarteira
        self.validadeCarteira = initvalue_
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.identificadorBeneficiario = identificadorBeneficiario
        self.respostaSolicitacao = respostaSolicitacao
        self.validate_dm_simNao(self.respostaSolicitacao)
        self.motivosNegativa = motivosNegativa
    def factory(*args_, **kwargs_):
        if ct_elegibilidadeRecibo.subclass:
            return ct_elegibilidadeRecibo.subclass(*args_, **kwargs_)
        else:
            return ct_elegibilidadeRecibo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_validadeCarteira(self): return self.validadeCarteira
    def set_validadeCarteira(self, validadeCarteira): self.validadeCarteira = validadeCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def get_respostaSolicitacao(self): return self.respostaSolicitacao
    def set_respostaSolicitacao(self, respostaSolicitacao): self.respostaSolicitacao = respostaSolicitacao
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroCarteira is not None or
            self.validadeCarteira is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.identificadorBeneficiario is not None or
            self.respostaSolicitacao is not None or
            self.motivosNegativa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_elegibilidadeRecibo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_elegibilidadeRecibo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_elegibilidadeRecibo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_elegibilidadeRecibo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_elegibilidadeRecibo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.validadeCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalidadeCarteira>%s</%svalidadeCarteira>%s' % (namespace_, self.gds_format_date(self.validadeCarteira, input_name='validadeCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
        if self.respostaSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srespostaSolicitacao>%s</%srespostaSolicitacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.respostaSolicitacao).encode(ExternalEncoding), input_name='respostaSolicitacao'), namespace_, eol_))
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_elegibilidadeRecibo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.validadeCarteira is not None:
            showIndent(outfile, level)
            outfile.write('validadeCarteira=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.validadeCarteira, input_name='validadeCarteira'))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.respostaSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('respostaSolicitacao=%s,\n' % quote_python(self.respostaSolicitacao).encode(ExternalEncoding))
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'validadeCarteira':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.validadeCarteira = dval_
            # validate type st_data
            self.validate_st_data(self.validadeCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
        elif nodeName_ == 'respostaSolicitacao':
            respostaSolicitacao_ = child_.text
            respostaSolicitacao_ = self.gds_validate_string(respostaSolicitacao_, node, 'respostaSolicitacao')
            self.respostaSolicitacao = respostaSolicitacao_
            # validate type dm_simNao
            self.validate_dm_simNao(self.respostaSolicitacao)
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
# end class ct_elegibilidadeRecibo


class motivosNegativa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivoNegativa=None):
        self.original_tagname_ = None
        if motivoNegativa is None:
            self.motivoNegativa = []
        else:
            self.motivoNegativa = motivoNegativa
    def factory(*args_, **kwargs_):
        if motivosNegativa.subclass:
            return motivosNegativa.subclass(*args_, **kwargs_)
        else:
            return motivosNegativa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivoNegativa(self): return self.motivoNegativa
    def set_motivoNegativa(self, motivoNegativa): self.motivoNegativa = motivoNegativa
    def add_motivoNegativa(self, value): self.motivoNegativa.append(value)
    def insert_motivoNegativa_at(self, index, value): self.motivoNegativa.insert(index, value)
    def replace_motivoNegativa_at(self, index, value): self.motivoNegativa[index] = value
    def hasContent_(self):
        if (
            self.motivoNegativa
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='motivosNegativa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='motivosNegativa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='motivosNegativa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='motivosNegativa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='motivosNegativa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for motivoNegativa_ in self.motivoNegativa:
            motivoNegativa_.export(outfile, level, namespace_, name_='motivoNegativa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='motivosNegativa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('motivoNegativa=[\n')
        level += 1
        for motivoNegativa_ in self.motivoNegativa:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivoNegativa_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivoNegativa':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivoNegativa.append(obj_)
            obj_.original_tagname_ = 'motivoNegativa'
# end class motivosNegativa


class ct_glosaRecibo(GeneratedsSuper):
    """recibo de recurso de glosa"""
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaRecGlosaPrestador=None, numeroGuiaRecGlosaOperadora=None, nomeOperadora=None, objetoRecurso=None, dadosContratado=None, numeroLote=None, numeroProtocolo=None, opcaoRecurso=None, dataRecurso=None, valorTotalRecursado=None, valorTotalAcatado=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
        self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
        self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        self.nomeOperadora = nomeOperadora
        self.validate_st_texto70(self.nomeOperadora)
        self.objetoRecurso = objetoRecurso
        self.validate_dm_objetoRecurso(self.objetoRecurso)
        self.dadosContratado = dadosContratado
        self.numeroLote = numeroLote
        self.validate_st_numerico12(self.numeroLote)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_numerico12(self.numeroProtocolo)
        self.opcaoRecurso = opcaoRecurso
        if isinstance(dataRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRecurso
        self.dataRecurso = initvalue_
        self.valorTotalRecursado = valorTotalRecursado
        self.valorTotalAcatado = valorTotalAcatado
    def factory(*args_, **kwargs_):
        if ct_glosaRecibo.subclass:
            return ct_glosaRecibo.subclass(*args_, **kwargs_)
        else:
            return ct_glosaRecibo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaRecGlosaPrestador(self): return self.numeroGuiaRecGlosaPrestador
    def set_numeroGuiaRecGlosaPrestador(self, numeroGuiaRecGlosaPrestador): self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
    def get_numeroGuiaRecGlosaOperadora(self): return self.numeroGuiaRecGlosaOperadora
    def set_numeroGuiaRecGlosaOperadora(self, numeroGuiaRecGlosaOperadora): self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
    def get_nomeOperadora(self): return self.nomeOperadora
    def set_nomeOperadora(self, nomeOperadora): self.nomeOperadora = nomeOperadora
    def get_objetoRecurso(self): return self.objetoRecurso
    def set_objetoRecurso(self, objetoRecurso): self.objetoRecurso = objetoRecurso
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_opcaoRecurso(self): return self.opcaoRecurso
    def set_opcaoRecurso(self, opcaoRecurso): self.opcaoRecurso = opcaoRecurso
    def get_dataRecurso(self): return self.dataRecurso
    def set_dataRecurso(self, dataRecurso): self.dataRecurso = dataRecurso
    def get_valorTotalRecursado(self): return self.valorTotalRecursado
    def set_valorTotalRecursado(self, valorTotalRecursado): self.valorTotalRecursado = valorTotalRecursado
    def get_valorTotalAcatado(self): return self.valorTotalAcatado
    def set_valorTotalAcatado(self, valorTotalAcatado): self.valorTotalAcatado = valorTotalAcatado
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_objetoRecurso(self, value):
        # Validate type dm_objetoRecurso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_objetoRecurso' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico12(self, value):
        # Validate type st_numerico12, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico12' % {"value" : value} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaRecGlosaPrestador is not None or
            self.numeroGuiaRecGlosaOperadora is not None or
            self.nomeOperadora is not None or
            self.objetoRecurso is not None or
            self.dadosContratado is not None or
            self.numeroLote is not None or
            self.numeroProtocolo is not None or
            self.opcaoRecurso is not None or
            self.dataRecurso is not None or
            self.valorTotalRecursado is not None or
            self.valorTotalAcatado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_glosaRecibo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_glosaRecibo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_glosaRecibo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_glosaRecibo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_glosaRecibo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaPrestador>%s</%snumeroGuiaRecGlosaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaPrestador'), namespace_, eol_))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaOperadora>%s</%snumeroGuiaRecGlosaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaOperadora'), namespace_, eol_))
        if self.nomeOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeOperadora>%s</%snomeOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeOperadora).encode(ExternalEncoding), input_name='nomeOperadora'), namespace_, eol_))
        if self.objetoRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjetoRecurso>%s</%sobjetoRecurso>%s' % (namespace_, self.gds_format_string(quote_xml(self.objetoRecurso).encode(ExternalEncoding), input_name='objetoRecurso'), namespace_, eol_))
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_integer(self.numeroLote, input_name='numeroLote'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_integer(self.numeroProtocolo, input_name='numeroProtocolo'), namespace_, eol_))
        if self.opcaoRecurso is not None:
            self.opcaoRecurso.export(outfile, level, namespace_, name_='opcaoRecurso', pretty_print=pretty_print)
        if self.dataRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRecurso>%s</%sdataRecurso>%s' % (namespace_, self.gds_format_date(self.dataRecurso, input_name='dataRecurso'), namespace_, eol_))
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalRecursado>%s</%svalorTotalRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalRecursado).encode(ExternalEncoding), input_name='valorTotalRecursado'), namespace_, eol_))
        if self.valorTotalAcatado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalAcatado>%s</%svalorTotalAcatado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalAcatado).encode(ExternalEncoding), input_name='valorTotalAcatado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_glosaRecibo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaPrestador=%s,\n' % quote_python(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaOperadora=%s,\n' % quote_python(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding))
        if self.nomeOperadora is not None:
            showIndent(outfile, level)
            outfile.write('nomeOperadora=%s,\n' % quote_python(self.nomeOperadora).encode(ExternalEncoding))
        if self.objetoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('objetoRecurso=%s,\n' % quote_python(self.objetoRecurso).encode(ExternalEncoding))
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.dadosContratado(\n')
            self.dadosContratado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%d,\n' % self.numeroLote)
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%d,\n' % self.numeroProtocolo)
        if self.opcaoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('opcaoRecurso=model_.opcaoRecurso(\n')
            self.opcaoRecurso.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRecurso, input_name='dataRecurso'))
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalRecursado=%s,\n' % quote_python(self.valorTotalRecursado).encode(ExternalEncoding))
        if self.valorTotalAcatado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalAcatado=%s,\n' % quote_python(self.valorTotalAcatado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaRecGlosaPrestador':
            numeroGuiaRecGlosaPrestador_ = child_.text
            numeroGuiaRecGlosaPrestador_ = self.gds_validate_string(numeroGuiaRecGlosaPrestador_, node, 'numeroGuiaRecGlosaPrestador')
            self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        elif nodeName_ == 'numeroGuiaRecGlosaOperadora':
            numeroGuiaRecGlosaOperadora_ = child_.text
            numeroGuiaRecGlosaOperadora_ = self.gds_validate_string(numeroGuiaRecGlosaOperadora_, node, 'numeroGuiaRecGlosaOperadora')
            self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        elif nodeName_ == 'nomeOperadora':
            nomeOperadora_ = child_.text
            nomeOperadora_ = self.gds_validate_string(nomeOperadora_, node, 'nomeOperadora')
            self.nomeOperadora = nomeOperadora_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeOperadora)
        elif nodeName_ == 'objetoRecurso':
            objetoRecurso_ = child_.text
            objetoRecurso_ = self.gds_validate_string(objetoRecurso_, node, 'objetoRecurso')
            self.objetoRecurso = objetoRecurso_
            # validate type dm_objetoRecurso
            self.validate_dm_objetoRecurso(self.objetoRecurso)
        elif nodeName_ == 'dadosContratado':
            obj_ = dadosContratado.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'numeroLote':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroLote')
            self.numeroLote = ival_
            # validate type st_numerico12
            self.validate_st_numerico12(self.numeroLote)
        elif nodeName_ == 'numeroProtocolo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroProtocolo')
            self.numeroProtocolo = ival_
            # validate type st_numerico12
            self.validate_st_numerico12(self.numeroProtocolo)
        elif nodeName_ == 'opcaoRecurso':
            obj_ = opcaoRecurso.factory()
            obj_.build(child_)
            self.opcaoRecurso = obj_
            obj_.original_tagname_ = 'opcaoRecurso'
        elif nodeName_ == 'dataRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataRecurso)
        elif nodeName_ == 'valorTotalRecursado':
            valorTotalRecursado_ = child_.text
            valorTotalRecursado_ = self.gds_validate_string(valorTotalRecursado_, node, 'valorTotalRecursado')
            self.valorTotalRecursado = valorTotalRecursado_
        elif nodeName_ == 'valorTotalAcatado':
            valorTotalAcatado_ = child_.text
            valorTotalAcatado_ = self.gds_validate_string(valorTotalAcatado_, node, 'valorTotalAcatado')
            self.valorTotalAcatado = valorTotalAcatado_
# end class ct_glosaRecibo


class dadosContratado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoPrestador=None, nomePrestador=None):
        self.original_tagname_ = None
        self.codigoPrestador = codigoPrestador
        self.validate_st_texto14(self.codigoPrestador)
        self.nomePrestador = nomePrestador
        self.validate_st_texto70(self.nomePrestador)
    def factory(*args_, **kwargs_):
        if dadosContratado.subclass:
            return dadosContratado.subclass(*args_, **kwargs_)
        else:
            return dadosContratado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoPrestador(self): return self.codigoPrestador
    def set_codigoPrestador(self, codigoPrestador): self.codigoPrestador = codigoPrestador
    def get_nomePrestador(self): return self.nomePrestador
    def set_nomePrestador(self, nomePrestador): self.nomePrestador = nomePrestador
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoPrestador is not None or
            self.nomePrestador is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosContratado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosContratado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosContratado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosContratado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosContratado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPrestador>%s</%scodigoPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoPrestador).encode(ExternalEncoding), input_name='codigoPrestador'), namespace_, eol_))
        if self.nomePrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomePrestador>%s</%snomePrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomePrestador).encode(ExternalEncoding), input_name='nomePrestador'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosContratado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoPrestador is not None:
            showIndent(outfile, level)
            outfile.write('codigoPrestador=%s,\n' % quote_python(self.codigoPrestador).encode(ExternalEncoding))
        if self.nomePrestador is not None:
            showIndent(outfile, level)
            outfile.write('nomePrestador=%s,\n' % quote_python(self.nomePrestador).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoPrestador':
            codigoPrestador_ = child_.text
            codigoPrestador_ = self.gds_validate_string(codigoPrestador_, node, 'codigoPrestador')
            self.codigoPrestador = codigoPrestador_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoPrestador)
        elif nodeName_ == 'nomePrestador':
            nomePrestador_ = child_.text
            nomePrestador_ = self.gds_validate_string(nomePrestador_, node, 'nomePrestador')
            self.nomePrestador = nomePrestador_
            # validate type st_texto70
            self.validate_st_texto70(self.nomePrestador)
# end class dadosContratado


class opcaoRecurso(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, recursoProtocolo=None, recursoGuia=None):
        self.original_tagname_ = None
        self.recursoProtocolo = recursoProtocolo
        if recursoGuia is None:
            self.recursoGuia = []
        else:
            self.recursoGuia = recursoGuia
    def factory(*args_, **kwargs_):
        if opcaoRecurso.subclass:
            return opcaoRecurso.subclass(*args_, **kwargs_)
        else:
            return opcaoRecurso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_recursoProtocolo(self): return self.recursoProtocolo
    def set_recursoProtocolo(self, recursoProtocolo): self.recursoProtocolo = recursoProtocolo
    def get_recursoGuia(self): return self.recursoGuia
    def set_recursoGuia(self, recursoGuia): self.recursoGuia = recursoGuia
    def add_recursoGuia(self, value): self.recursoGuia.append(value)
    def insert_recursoGuia_at(self, index, value): self.recursoGuia.insert(index, value)
    def replace_recursoGuia_at(self, index, value): self.recursoGuia[index] = value
    def hasContent_(self):
        if (
            self.recursoProtocolo is not None or
            self.recursoGuia
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='opcaoRecurso', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='opcaoRecurso')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='opcaoRecurso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='opcaoRecurso'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='opcaoRecurso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.recursoProtocolo is not None:
            self.recursoProtocolo.export(outfile, level, namespace_, name_='recursoProtocolo', pretty_print=pretty_print)
        for recursoGuia_ in self.recursoGuia:
            recursoGuia_.export(outfile, level, namespace_, name_='recursoGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='opcaoRecurso'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.recursoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('recursoProtocolo=model_.recursoProtocolo(\n')
            self.recursoProtocolo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('recursoGuia=[\n')
        level += 1
        for recursoGuia_ in self.recursoGuia:
            showIndent(outfile, level)
            outfile.write('model_.recursoGuia(\n')
            recursoGuia_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'recursoProtocolo':
            obj_ = recursoProtocolo.factory()
            obj_.build(child_)
            self.recursoProtocolo = obj_
            obj_.original_tagname_ = 'recursoProtocolo'
        elif nodeName_ == 'recursoGuia':
            obj_ = recursoGuia.factory()
            obj_.build(child_)
            self.recursoGuia.append(obj_)
            obj_.original_tagname_ = 'recursoGuia'
# end class opcaoRecurso


class recursoProtocolo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoGlosaProtocolo=None, justificativaProtocolo=None, recursoAcatado=None):
        self.original_tagname_ = None
        self.codigoGlosaProtocolo = codigoGlosaProtocolo
        self.validate_dm_tipoGlosa(self.codigoGlosaProtocolo)
        self.justificativaProtocolo = justificativaProtocolo
        self.validate_st_texto150(self.justificativaProtocolo)
        self.recursoAcatado = recursoAcatado
        self.validate_dm_simNao(self.recursoAcatado)
    def factory(*args_, **kwargs_):
        if recursoProtocolo.subclass:
            return recursoProtocolo.subclass(*args_, **kwargs_)
        else:
            return recursoProtocolo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoGlosaProtocolo(self): return self.codigoGlosaProtocolo
    def set_codigoGlosaProtocolo(self, codigoGlosaProtocolo): self.codigoGlosaProtocolo = codigoGlosaProtocolo
    def get_justificativaProtocolo(self): return self.justificativaProtocolo
    def set_justificativaProtocolo(self, justificativaProtocolo): self.justificativaProtocolo = justificativaProtocolo
    def get_recursoAcatado(self): return self.recursoAcatado
    def set_recursoAcatado(self, recursoAcatado): self.recursoAcatado = recursoAcatado
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoGlosaProtocolo is not None or
            self.justificativaProtocolo is not None or
            self.recursoAcatado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='recursoProtocolo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='recursoProtocolo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='recursoProtocolo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='recursoProtocolo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='recursoProtocolo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoGlosaProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoGlosaProtocolo>%s</%scodigoGlosaProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoGlosaProtocolo).encode(ExternalEncoding), input_name='codigoGlosaProtocolo'), namespace_, eol_))
        if self.justificativaProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaProtocolo>%s</%sjustificativaProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaProtocolo).encode(ExternalEncoding), input_name='justificativaProtocolo'), namespace_, eol_))
        if self.recursoAcatado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecursoAcatado>%s</%srecursoAcatado>%s' % (namespace_, self.gds_format_string(quote_xml(self.recursoAcatado).encode(ExternalEncoding), input_name='recursoAcatado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='recursoProtocolo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoGlosaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('codigoGlosaProtocolo=%s,\n' % quote_python(self.codigoGlosaProtocolo).encode(ExternalEncoding))
        if self.justificativaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('justificativaProtocolo=%s,\n' % quote_python(self.justificativaProtocolo).encode(ExternalEncoding))
        if self.recursoAcatado is not None:
            showIndent(outfile, level)
            outfile.write('recursoAcatado=%s,\n' % quote_python(self.recursoAcatado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoGlosaProtocolo':
            codigoGlosaProtocolo_ = child_.text
            codigoGlosaProtocolo_ = self.gds_validate_string(codigoGlosaProtocolo_, node, 'codigoGlosaProtocolo')
            self.codigoGlosaProtocolo = codigoGlosaProtocolo_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codigoGlosaProtocolo)
        elif nodeName_ == 'justificativaProtocolo':
            justificativaProtocolo_ = child_.text
            justificativaProtocolo_ = self.gds_validate_string(justificativaProtocolo_, node, 'justificativaProtocolo')
            self.justificativaProtocolo = justificativaProtocolo_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaProtocolo)
        elif nodeName_ == 'recursoAcatado':
            recursoAcatado_ = child_.text
            recursoAcatado_ = self.gds_validate_string(recursoAcatado_, node, 'recursoAcatado')
            self.recursoAcatado = recursoAcatado_
            # validate type dm_simNao
            self.validate_dm_simNao(self.recursoAcatado)
# end class recursoProtocolo


class recursoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, respostaGuia=None, respostaGuiaItens=None):
        self.original_tagname_ = None
        self.respostaGuia = respostaGuia
        self.respostaGuiaItens = respostaGuiaItens
    def factory(*args_, **kwargs_):
        if recursoGuia.subclass:
            return recursoGuia.subclass(*args_, **kwargs_)
        else:
            return recursoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_respostaGuia(self): return self.respostaGuia
    def set_respostaGuia(self, respostaGuia): self.respostaGuia = respostaGuia
    def get_respostaGuiaItens(self): return self.respostaGuiaItens
    def set_respostaGuiaItens(self, respostaGuiaItens): self.respostaGuiaItens = respostaGuiaItens
    def hasContent_(self):
        if (
            self.respostaGuia is not None or
            self.respostaGuiaItens is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='recursoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='recursoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='recursoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='recursoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='recursoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.respostaGuia is not None:
            self.respostaGuia.export(outfile, level, namespace_, name_='respostaGuia', pretty_print=pretty_print)
        if self.respostaGuiaItens is not None:
            self.respostaGuiaItens.export(outfile, level, namespace_, name_='respostaGuiaItens', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='recursoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.respostaGuia is not None:
            showIndent(outfile, level)
            outfile.write('respostaGuia=model_.ct_respostaGlosaGuiaMedica(\n')
            self.respostaGuia.exportLiteral(outfile, level, name_='respostaGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.respostaGuiaItens is not None:
            showIndent(outfile, level)
            outfile.write('respostaGuiaItens=model_.ct_respostaGlosaItemMedico(\n')
            self.respostaGuiaItens.exportLiteral(outfile, level, name_='respostaGuiaItens')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'respostaGuia':
            obj_ = ct_respostaGlosaGuiaMedica.factory()
            obj_.build(child_)
            self.respostaGuia = obj_
            obj_.original_tagname_ = 'respostaGuia'
        elif nodeName_ == 'respostaGuiaItens':
            obj_ = ct_respostaGlosaItemMedico.factory()
            obj_.build(child_)
            self.respostaGuiaItens = obj_
            obj_.original_tagname_ = 'respostaGuiaItens'
# end class recursoGuia


class ct_glosaReciboOdonto(GeneratedsSuper):
    """retorno do recurso de glosa de odonto"""
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaRecGlosaPrestador=None, nomeOperadora=None, numeroGuiaRecGlosaOperadora=None, objetoRecurso=None, dadosContratado=None, numeroLote=None, numeroProtocolo=None, opcaoRecurso=None, dataRecurso=None, valorTotalRecursado=None, valorTotalAcatado=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
        self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        self.nomeOperadora = nomeOperadora
        self.validate_st_texto70(self.nomeOperadora)
        self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
        self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        self.objetoRecurso = objetoRecurso
        self.validate_dm_objetoRecurso(self.objetoRecurso)
        self.dadosContratado = dadosContratado
        self.numeroLote = numeroLote
        self.validate_st_numerico12(self.numeroLote)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_numerico12(self.numeroProtocolo)
        self.opcaoRecurso = opcaoRecurso
        if isinstance(dataRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRecurso
        self.dataRecurso = initvalue_
        self.valorTotalRecursado = valorTotalRecursado
        self.valorTotalAcatado = valorTotalAcatado
    def factory(*args_, **kwargs_):
        if ct_glosaReciboOdonto.subclass:
            return ct_glosaReciboOdonto.subclass(*args_, **kwargs_)
        else:
            return ct_glosaReciboOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaRecGlosaPrestador(self): return self.numeroGuiaRecGlosaPrestador
    def set_numeroGuiaRecGlosaPrestador(self, numeroGuiaRecGlosaPrestador): self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
    def get_nomeOperadora(self): return self.nomeOperadora
    def set_nomeOperadora(self, nomeOperadora): self.nomeOperadora = nomeOperadora
    def get_numeroGuiaRecGlosaOperadora(self): return self.numeroGuiaRecGlosaOperadora
    def set_numeroGuiaRecGlosaOperadora(self, numeroGuiaRecGlosaOperadora): self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
    def get_objetoRecurso(self): return self.objetoRecurso
    def set_objetoRecurso(self, objetoRecurso): self.objetoRecurso = objetoRecurso
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_opcaoRecurso(self): return self.opcaoRecurso
    def set_opcaoRecurso(self, opcaoRecurso): self.opcaoRecurso = opcaoRecurso
    def get_dataRecurso(self): return self.dataRecurso
    def set_dataRecurso(self, dataRecurso): self.dataRecurso = dataRecurso
    def get_valorTotalRecursado(self): return self.valorTotalRecursado
    def set_valorTotalRecursado(self, valorTotalRecursado): self.valorTotalRecursado = valorTotalRecursado
    def get_valorTotalAcatado(self): return self.valorTotalAcatado
    def set_valorTotalAcatado(self, valorTotalAcatado): self.valorTotalAcatado = valorTotalAcatado
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_objetoRecurso(self, value):
        # Validate type dm_objetoRecurso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_objetoRecurso' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico12(self, value):
        # Validate type st_numerico12, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico12' % {"value" : value} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaRecGlosaPrestador is not None or
            self.nomeOperadora is not None or
            self.numeroGuiaRecGlosaOperadora is not None or
            self.objetoRecurso is not None or
            self.dadosContratado is not None or
            self.numeroLote is not None or
            self.numeroProtocolo is not None or
            self.opcaoRecurso is not None or
            self.dataRecurso is not None or
            self.valorTotalRecursado is not None or
            self.valorTotalAcatado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_glosaReciboOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_glosaReciboOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_glosaReciboOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_glosaReciboOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_glosaReciboOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaPrestador>%s</%snumeroGuiaRecGlosaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaPrestador'), namespace_, eol_))
        if self.nomeOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeOperadora>%s</%snomeOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeOperadora).encode(ExternalEncoding), input_name='nomeOperadora'), namespace_, eol_))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaOperadora>%s</%snumeroGuiaRecGlosaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaOperadora'), namespace_, eol_))
        if self.objetoRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjetoRecurso>%s</%sobjetoRecurso>%s' % (namespace_, self.gds_format_string(quote_xml(self.objetoRecurso).encode(ExternalEncoding), input_name='objetoRecurso'), namespace_, eol_))
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_integer(self.numeroLote, input_name='numeroLote'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_integer(self.numeroProtocolo, input_name='numeroProtocolo'), namespace_, eol_))
        if self.opcaoRecurso is not None:
            self.opcaoRecurso.export(outfile, level, namespace_, name_='opcaoRecurso', pretty_print=pretty_print)
        if self.dataRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRecurso>%s</%sdataRecurso>%s' % (namespace_, self.gds_format_date(self.dataRecurso, input_name='dataRecurso'), namespace_, eol_))
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalRecursado>%s</%svalorTotalRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalRecursado).encode(ExternalEncoding), input_name='valorTotalRecursado'), namespace_, eol_))
        if self.valorTotalAcatado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalAcatado>%s</%svalorTotalAcatado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalAcatado).encode(ExternalEncoding), input_name='valorTotalAcatado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_glosaReciboOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaPrestador=%s,\n' % quote_python(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding))
        if self.nomeOperadora is not None:
            showIndent(outfile, level)
            outfile.write('nomeOperadora=%s,\n' % quote_python(self.nomeOperadora).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaOperadora=%s,\n' % quote_python(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding))
        if self.objetoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('objetoRecurso=%s,\n' % quote_python(self.objetoRecurso).encode(ExternalEncoding))
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.dadosContratado(\n')
            self.dadosContratado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%d,\n' % self.numeroLote)
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%d,\n' % self.numeroProtocolo)
        if self.opcaoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('opcaoRecurso=model_.opcaoRecurso(\n')
            self.opcaoRecurso.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRecurso, input_name='dataRecurso'))
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalRecursado=%s,\n' % quote_python(self.valorTotalRecursado).encode(ExternalEncoding))
        if self.valorTotalAcatado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalAcatado=%s,\n' % quote_python(self.valorTotalAcatado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaRecGlosaPrestador':
            numeroGuiaRecGlosaPrestador_ = child_.text
            numeroGuiaRecGlosaPrestador_ = self.gds_validate_string(numeroGuiaRecGlosaPrestador_, node, 'numeroGuiaRecGlosaPrestador')
            self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        elif nodeName_ == 'nomeOperadora':
            nomeOperadora_ = child_.text
            nomeOperadora_ = self.gds_validate_string(nomeOperadora_, node, 'nomeOperadora')
            self.nomeOperadora = nomeOperadora_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeOperadora)
        elif nodeName_ == 'numeroGuiaRecGlosaOperadora':
            numeroGuiaRecGlosaOperadora_ = child_.text
            numeroGuiaRecGlosaOperadora_ = self.gds_validate_string(numeroGuiaRecGlosaOperadora_, node, 'numeroGuiaRecGlosaOperadora')
            self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        elif nodeName_ == 'objetoRecurso':
            objetoRecurso_ = child_.text
            objetoRecurso_ = self.gds_validate_string(objetoRecurso_, node, 'objetoRecurso')
            self.objetoRecurso = objetoRecurso_
            # validate type dm_objetoRecurso
            self.validate_dm_objetoRecurso(self.objetoRecurso)
        elif nodeName_ == 'dadosContratado':
            obj_ = dadosContratado.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'numeroLote':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroLote')
            self.numeroLote = ival_
            # validate type st_numerico12
            self.validate_st_numerico12(self.numeroLote)
        elif nodeName_ == 'numeroProtocolo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroProtocolo')
            self.numeroProtocolo = ival_
            # validate type st_numerico12
            self.validate_st_numerico12(self.numeroProtocolo)
        elif nodeName_ == 'opcaoRecurso':
            obj_ = opcaoRecurso.factory()
            obj_.build(child_)
            self.opcaoRecurso = obj_
            obj_.original_tagname_ = 'opcaoRecurso'
        elif nodeName_ == 'dataRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataRecurso)
        elif nodeName_ == 'valorTotalRecursado':
            valorTotalRecursado_ = child_.text
            valorTotalRecursado_ = self.gds_validate_string(valorTotalRecursado_, node, 'valorTotalRecursado')
            self.valorTotalRecursado = valorTotalRecursado_
        elif nodeName_ == 'valorTotalAcatado':
            valorTotalAcatado_ = child_.text
            valorTotalAcatado_ = self.gds_validate_string(valorTotalAcatado_, node, 'valorTotalAcatado')
            self.valorTotalAcatado = valorTotalAcatado_
# end class ct_glosaReciboOdonto


class ct_elegibilidadeVerifica(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosPrestador=None, numeroCarteira=None, nomeBeneficiario=None, numeroCNS=None, identificadorBeneficiario=None, validadeCarteira=None):
        self.original_tagname_ = None
        self.dadosPrestador = dadosPrestador
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.identificadorBeneficiario = identificadorBeneficiario
        if isinstance(validadeCarteira, basestring):
            initvalue_ = datetime_.datetime.strptime(validadeCarteira, '%Y-%m-%d').date()
        else:
            initvalue_ = validadeCarteira
        self.validadeCarteira = initvalue_
    def factory(*args_, **kwargs_):
        if ct_elegibilidadeVerifica.subclass:
            return ct_elegibilidadeVerifica.subclass(*args_, **kwargs_)
        else:
            return ct_elegibilidadeVerifica(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def get_validadeCarteira(self): return self.validadeCarteira
    def set_validadeCarteira(self, validadeCarteira): self.validadeCarteira = validadeCarteira
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.dadosPrestador is not None or
            self.numeroCarteira is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.identificadorBeneficiario is not None or
            self.validadeCarteira is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_elegibilidadeVerifica', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_elegibilidadeVerifica')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_elegibilidadeVerifica', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_elegibilidadeVerifica'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_elegibilidadeVerifica', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
        if self.validadeCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalidadeCarteira>%s</%svalidadeCarteira>%s' % (namespace_, self.gds_format_date(self.validadeCarteira, input_name='validadeCarteira'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_elegibilidadeVerifica'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.validadeCarteira is not None:
            showIndent(outfile, level)
            outfile.write('validadeCarteira=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.validadeCarteira, input_name='validadeCarteira'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
        elif nodeName_ == 'validadeCarteira':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.validadeCarteira = dval_
            # validate type st_data
            self.validate_st_data(self.validadeCarteira)
# end class ct_elegibilidadeVerifica


class ct_fontePagadora(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, identificacaoUnidadePagadora=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.identificacaoUnidadePagadora = identificacaoUnidadePagadora
        self.validate_st_CNPJ(self.identificacaoUnidadePagadora)
    def factory(*args_, **kwargs_):
        if ct_fontePagadora.subclass:
            return ct_fontePagadora.subclass(*args_, **kwargs_)
        else:
            return ct_fontePagadora(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_identificacaoUnidadePagadora(self): return self.identificacaoUnidadePagadora
    def set_identificacaoUnidadePagadora(self, identificacaoUnidadePagadora): self.identificacaoUnidadePagadora = identificacaoUnidadePagadora
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.identificacaoUnidadePagadora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_fontePagadora', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_fontePagadora')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_fontePagadora', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_fontePagadora'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_fontePagadora', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.identificacaoUnidadePagadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificacaoUnidadePagadora>%s</%sidentificacaoUnidadePagadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.identificacaoUnidadePagadora).encode(ExternalEncoding), input_name='identificacaoUnidadePagadora'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_fontePagadora'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.identificacaoUnidadePagadora is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoUnidadePagadora=%s,\n' % quote_python(self.identificacaoUnidadePagadora).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'identificacaoUnidadePagadora':
            identificacaoUnidadePagadora_ = child_.text
            identificacaoUnidadePagadora_ = self.gds_validate_string(identificacaoUnidadePagadora_, node, 'identificacaoUnidadePagadora')
            self.identificacaoUnidadePagadora = identificacaoUnidadePagadora_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.identificacaoUnidadePagadora)
# end class ct_fontePagadora


class ct_guiaCabecalho(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaPrestador=None, extensiontype_=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_guiaCabecalho.subclass:
            return ct_guiaCabecalho.subclass(*args_, **kwargs_)
        else:
            return ct_guiaCabecalho(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaPrestador is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaCabecalho', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaCabecalho')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaCabecalho', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaCabecalho'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaCabecalho', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_guiaCabecalho'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
# end class ct_guiaCabecalho


class ct_guiaCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tipoGuia=None, dadosPrestador=None, numeroProtocolo=None, guiasCancelamento=None):
        self.original_tagname_ = None
        self.tipoGuia = tipoGuia
        self.validate_dm_tipoGuia(self.tipoGuia)
        self.dadosPrestador = dadosPrestador
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        if guiasCancelamento is None:
            self.guiasCancelamento = []
        else:
            self.guiasCancelamento = guiasCancelamento
    def factory(*args_, **kwargs_):
        if ct_guiaCancelamento.subclass:
            return ct_guiaCancelamento.subclass(*args_, **kwargs_)
        else:
            return ct_guiaCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tipoGuia(self): return self.tipoGuia
    def set_tipoGuia(self, tipoGuia): self.tipoGuia = tipoGuia
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_guiasCancelamento(self): return self.guiasCancelamento
    def set_guiasCancelamento(self, guiasCancelamento): self.guiasCancelamento = guiasCancelamento
    def add_guiasCancelamento(self, value): self.guiasCancelamento.append(value)
    def insert_guiasCancelamento_at(self, index, value): self.guiasCancelamento.insert(index, value)
    def replace_guiasCancelamento_at(self, index, value): self.guiasCancelamento[index] = value
    def validate_dm_tipoGuia(self, value):
        # Validate type dm_tipoGuia, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGuia' % {"value" : value.encode("utf-8")} )
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tipoGuia is not None or
            self.dadosPrestador is not None or
            self.numeroProtocolo is not None or
            self.guiasCancelamento
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaCancelamento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaCancelamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaCancelamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tipoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoGuia>%s</%stipoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoGuia).encode(ExternalEncoding), input_name='tipoGuia'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        for guiasCancelamento_ in self.guiasCancelamento:
            guiasCancelamento_.export(outfile, level, namespace_, name_='guiasCancelamento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaCancelamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.tipoGuia is not None:
            showIndent(outfile, level)
            outfile.write('tipoGuia=%s,\n' % quote_python(self.tipoGuia).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('guiasCancelamento=[\n')
        level += 1
        for guiasCancelamento_ in self.guiasCancelamento:
            showIndent(outfile, level)
            outfile.write('model_.guiasCancelamento(\n')
            guiasCancelamento_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tipoGuia':
            tipoGuia_ = child_.text
            tipoGuia_ = self.gds_validate_string(tipoGuia_, node, 'tipoGuia')
            self.tipoGuia = tipoGuia_
            # validate type dm_tipoGuia
            self.validate_dm_tipoGuia(self.tipoGuia)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'guiasCancelamento':
            obj_ = guiasCancelamento.factory()
            obj_.build(child_)
            self.guiasCancelamento.append(obj_)
            obj_.original_tagname_ = 'guiasCancelamento'
# end class ct_guiaCancelamento


class guiasCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
    def factory(*args_, **kwargs_):
        if guiasCancelamento.subclass:
            return guiasCancelamento.subclass(*args_, **kwargs_)
        else:
            return guiasCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='guiasCancelamento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='guiasCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='guiasCancelamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='guiasCancelamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='guiasCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='guiasCancelamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
# end class guiasCancelamento


class ct_guiaCancelamentoRecibo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, dadosPrestador=None, guiasCanceladas=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.dadosPrestador = dadosPrestador
        self.guiasCanceladas = guiasCanceladas
    def factory(*args_, **kwargs_):
        if ct_guiaCancelamentoRecibo.subclass:
            return ct_guiaCancelamentoRecibo.subclass(*args_, **kwargs_)
        else:
            return ct_guiaCancelamentoRecibo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_guiasCanceladas(self): return self.guiasCanceladas
    def set_guiasCanceladas(self, guiasCanceladas): self.guiasCanceladas = guiasCanceladas
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.dadosPrestador is not None or
            self.guiasCanceladas is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaCancelamentoRecibo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaCancelamentoRecibo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaCancelamentoRecibo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaCancelamentoRecibo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaCancelamentoRecibo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.guiasCanceladas is not None:
            self.guiasCanceladas.export(outfile, level, namespace_, name_='guiasCanceladas', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaCancelamentoRecibo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.guiasCanceladas is not None:
            showIndent(outfile, level)
            outfile.write('guiasCanceladas=model_.guiasCanceladas(\n')
            self.guiasCanceladas.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'guiasCanceladas':
            obj_ = guiasCanceladas.factory()
            obj_.build(child_)
            self.guiasCanceladas = obj_
            obj_.original_tagname_ = 'guiasCanceladas'
# end class ct_guiaCancelamentoRecibo


class guiasCanceladas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosGuia=None):
        self.original_tagname_ = None
        if dadosGuia is None:
            self.dadosGuia = []
        else:
            self.dadosGuia = dadosGuia
    def factory(*args_, **kwargs_):
        if guiasCanceladas.subclass:
            return guiasCanceladas.subclass(*args_, **kwargs_)
        else:
            return guiasCanceladas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosGuia(self): return self.dadosGuia
    def set_dadosGuia(self, dadosGuia): self.dadosGuia = dadosGuia
    def add_dadosGuia(self, value): self.dadosGuia.append(value)
    def insert_dadosGuia_at(self, index, value): self.dadosGuia.insert(index, value)
    def replace_dadosGuia_at(self, index, value): self.dadosGuia[index] = value
    def hasContent_(self):
        if (
            self.dadosGuia
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='guiasCanceladas', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='guiasCanceladas')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='guiasCanceladas', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='guiasCanceladas'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='guiasCanceladas', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dadosGuia_ in self.dadosGuia:
            dadosGuia_.export(outfile, level, namespace_, name_='dadosGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='guiasCanceladas'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dadosGuia=[\n')
        level += 1
        for dadosGuia_ in self.dadosGuia:
            showIndent(outfile, level)
            outfile.write('model_.dadosGuia(\n')
            dadosGuia_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosGuia':
            obj_ = dadosGuia.factory()
            obj_.build(child_)
            self.dadosGuia.append(obj_)
            obj_.original_tagname_ = 'dadosGuia'
# end class guiasCanceladas


class dadosGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, tipoGuia=None, statusCancelamento=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.tipoGuia = tipoGuia
        self.validate_dm_tipoGuia(self.tipoGuia)
        self.statusCancelamento = statusCancelamento
        self.validate_dm_statusCancelamento(self.statusCancelamento)
    def factory(*args_, **kwargs_):
        if dadosGuia.subclass:
            return dadosGuia.subclass(*args_, **kwargs_)
        else:
            return dadosGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_tipoGuia(self): return self.tipoGuia
    def set_tipoGuia(self, tipoGuia): self.tipoGuia = tipoGuia
    def get_statusCancelamento(self): return self.statusCancelamento
    def set_statusCancelamento(self, statusCancelamento): self.statusCancelamento = statusCancelamento
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoGuia(self, value):
        # Validate type dm_tipoGuia, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGuia' % {"value" : value.encode("utf-8")} )
    def validate_dm_statusCancelamento(self, value):
        # Validate type dm_statusCancelamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusCancelamento' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_statusCancelamento' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.tipoGuia is not None or
            self.statusCancelamento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.tipoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoGuia>%s</%stipoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoGuia).encode(ExternalEncoding), input_name='tipoGuia'), namespace_, eol_))
        if self.statusCancelamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusCancelamento>%s</%sstatusCancelamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusCancelamento).encode(ExternalEncoding), input_name='statusCancelamento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.tipoGuia is not None:
            showIndent(outfile, level)
            outfile.write('tipoGuia=%s,\n' % quote_python(self.tipoGuia).encode(ExternalEncoding))
        if self.statusCancelamento is not None:
            showIndent(outfile, level)
            outfile.write('statusCancelamento=%s,\n' % quote_python(self.statusCancelamento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'tipoGuia':
            tipoGuia_ = child_.text
            tipoGuia_ = self.gds_validate_string(tipoGuia_, node, 'tipoGuia')
            self.tipoGuia = tipoGuia_
            # validate type dm_tipoGuia
            self.validate_dm_tipoGuia(self.tipoGuia)
        elif nodeName_ == 'statusCancelamento':
            statusCancelamento_ = child_.text
            statusCancelamento_ = self.gds_validate_string(statusCancelamento_, node, 'statusCancelamento')
            self.statusCancelamento = statusCancelamento_
            # validate type dm_statusCancelamento
            self.validate_dm_statusCancelamento(self.statusCancelamento)
# end class dadosGuia


class ct_guiaDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, dadosBeneficiario=None, dataRealizacao=None, vlInformadoGuia=None, glosaGuia=None, procedimentosRealizados=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.dadosBeneficiario = dadosBeneficiario
        if isinstance(dataRealizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRealizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRealizacao
        self.dataRealizacao = initvalue_
        self.vlInformadoGuia = vlInformadoGuia
        self.glosaGuia = glosaGuia
        self.procedimentosRealizados = procedimentosRealizados
    def factory(*args_, **kwargs_):
        if ct_guiaDados.subclass:
            return ct_guiaDados.subclass(*args_, **kwargs_)
        else:
            return ct_guiaDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dataRealizacao(self): return self.dataRealizacao
    def set_dataRealizacao(self, dataRealizacao): self.dataRealizacao = dataRealizacao
    def get_vlInformadoGuia(self): return self.vlInformadoGuia
    def set_vlInformadoGuia(self, vlInformadoGuia): self.vlInformadoGuia = vlInformadoGuia
    def get_glosaGuia(self): return self.glosaGuia
    def set_glosaGuia(self, glosaGuia): self.glosaGuia = glosaGuia
    def get_procedimentosRealizados(self): return self.procedimentosRealizados
    def set_procedimentosRealizados(self, procedimentosRealizados): self.procedimentosRealizados = procedimentosRealizados
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.dadosBeneficiario is not None or
            self.dataRealizacao is not None or
            self.vlInformadoGuia is not None or
            self.glosaGuia is not None or
            self.procedimentosRealizados is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dataRealizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRealizacao>%s</%sdataRealizacao>%s' % (namespace_, self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'), namespace_, eol_))
        if self.vlInformadoGuia is not None:
            self.vlInformadoGuia.export(outfile, level, namespace_, name_='vlInformadoGuia', pretty_print=pretty_print)
        if self.glosaGuia is not None:
            self.glosaGuia.export(outfile, level, namespace_, name_='glosaGuia', pretty_print=pretty_print)
        if self.procedimentosRealizados is not None:
            self.procedimentosRealizados.export(outfile, level, namespace_, name_='procedimentosRealizados', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataRealizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataRealizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'))
        if self.vlInformadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('vlInformadoGuia=model_.ct_valorTotal(\n')
            self.vlInformadoGuia.exportLiteral(outfile, level, name_='vlInformadoGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.glosaGuia is not None:
            showIndent(outfile, level)
            outfile.write('glosaGuia=model_.glosaGuia(\n')
            self.glosaGuia.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosRealizados is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosRealizados=model_.procedimentosRealizados(\n')
            self.procedimentosRealizados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dataRealizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRealizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataRealizacao)
        elif nodeName_ == 'vlInformadoGuia':
            obj_ = ct_valorTotal.factory()
            obj_.build(child_)
            self.vlInformadoGuia = obj_
            obj_.original_tagname_ = 'vlInformadoGuia'
        elif nodeName_ == 'glosaGuia':
            obj_ = glosaGuia.factory()
            obj_.build(child_)
            self.glosaGuia = obj_
            obj_.original_tagname_ = 'glosaGuia'
        elif nodeName_ == 'procedimentosRealizados':
            obj_ = procedimentosRealizados.factory()
            obj_.build(child_)
            self.procedimentosRealizados = obj_
            obj_.original_tagname_ = 'procedimentosRealizados'
# end class ct_guiaDados


class glosaGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivoGlosa=None):
        self.original_tagname_ = None
        if motivoGlosa is None:
            self.motivoGlosa = []
        else:
            self.motivoGlosa = motivoGlosa
    def factory(*args_, **kwargs_):
        if glosaGuia.subclass:
            return glosaGuia.subclass(*args_, **kwargs_)
        else:
            return glosaGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivoGlosa(self): return self.motivoGlosa
    def set_motivoGlosa(self, motivoGlosa): self.motivoGlosa = motivoGlosa
    def add_motivoGlosa(self, value): self.motivoGlosa.append(value)
    def insert_motivoGlosa_at(self, index, value): self.motivoGlosa.insert(index, value)
    def replace_motivoGlosa_at(self, index, value): self.motivoGlosa[index] = value
    def hasContent_(self):
        if (
            self.motivoGlosa
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='glosaGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='glosaGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='glosaGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='glosaGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='glosaGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for motivoGlosa_ in self.motivoGlosa:
            motivoGlosa_.export(outfile, level, namespace_, name_='motivoGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='glosaGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('motivoGlosa=[\n')
        level += 1
        for motivoGlosa_ in self.motivoGlosa:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivoGlosa_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivoGlosa':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivoGlosa.append(obj_)
            obj_.original_tagname_ = 'motivoGlosa'
# end class glosaGuia


class procedimentosRealizados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimentoRealizado=None):
        self.original_tagname_ = None
        if procedimentoRealizado is None:
            self.procedimentoRealizado = []
        else:
            self.procedimentoRealizado = procedimentoRealizado
    def factory(*args_, **kwargs_):
        if procedimentosRealizados.subclass:
            return procedimentosRealizados.subclass(*args_, **kwargs_)
        else:
            return procedimentosRealizados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimentoRealizado(self): return self.procedimentoRealizado
    def set_procedimentoRealizado(self, procedimentoRealizado): self.procedimentoRealizado = procedimentoRealizado
    def add_procedimentoRealizado(self, value): self.procedimentoRealizado.append(value)
    def insert_procedimentoRealizado_at(self, index, value): self.procedimentoRealizado.insert(index, value)
    def replace_procedimentoRealizado_at(self, index, value): self.procedimentoRealizado[index] = value
    def hasContent_(self):
        if (
            self.procedimentoRealizado
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentosRealizados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentosRealizados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentosRealizados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentosRealizados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentosRealizados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for procedimentoRealizado_ in self.procedimentoRealizado:
            procedimentoRealizado_.export(outfile, level, namespace_, name_='procedimentoRealizado', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='procedimentosRealizados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('procedimentoRealizado=[\n')
        level += 1
        for procedimentoRealizado_ in self.procedimentoRealizado:
            showIndent(outfile, level)
            outfile.write('model_.procedimentoRealizado(\n')
            procedimentoRealizado_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimentoRealizado':
            obj_ = procedimentoRealizado.factory()
            obj_.build(child_)
            self.procedimentoRealizado.append(obj_)
            obj_.original_tagname_ = 'procedimentoRealizado'
# end class procedimentosRealizados


class glosasProcedimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivoGlosa=None, valorGlosaProcedimento=None):
        self.original_tagname_ = None
        if motivoGlosa is None:
            self.motivoGlosa = []
        else:
            self.motivoGlosa = motivoGlosa
        self.valorGlosaProcedimento = valorGlosaProcedimento
    def factory(*args_, **kwargs_):
        if glosasProcedimento.subclass:
            return glosasProcedimento.subclass(*args_, **kwargs_)
        else:
            return glosasProcedimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivoGlosa(self): return self.motivoGlosa
    def set_motivoGlosa(self, motivoGlosa): self.motivoGlosa = motivoGlosa
    def add_motivoGlosa(self, value): self.motivoGlosa.append(value)
    def insert_motivoGlosa_at(self, index, value): self.motivoGlosa.insert(index, value)
    def replace_motivoGlosa_at(self, index, value): self.motivoGlosa[index] = value
    def get_valorGlosaProcedimento(self): return self.valorGlosaProcedimento
    def set_valorGlosaProcedimento(self, valorGlosaProcedimento): self.valorGlosaProcedimento = valorGlosaProcedimento
    def hasContent_(self):
        if (
            self.motivoGlosa or
            self.valorGlosaProcedimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='glosasProcedimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='glosasProcedimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='glosasProcedimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='glosasProcedimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='glosasProcedimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for motivoGlosa_ in self.motivoGlosa:
            motivoGlosa_.export(outfile, level, namespace_, name_='motivoGlosa', pretty_print=pretty_print)
        if self.valorGlosaProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosaProcedimento>%s</%svalorGlosaProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosaProcedimento).encode(ExternalEncoding), input_name='valorGlosaProcedimento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='glosasProcedimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('motivoGlosa=[\n')
        level += 1
        for motivoGlosa_ in self.motivoGlosa:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivoGlosa_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.valorGlosaProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosaProcedimento=%s,\n' % quote_python(self.valorGlosaProcedimento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivoGlosa':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivoGlosa.append(obj_)
            obj_.original_tagname_ = 'motivoGlosa'
        elif nodeName_ == 'valorGlosaProcedimento':
            valorGlosaProcedimento_ = child_.text
            valorGlosaProcedimento_ = self.gds_validate_string(valorGlosaProcedimento_, node, 'valorGlosaProcedimento')
            self.valorGlosaProcedimento = valorGlosaProcedimento_
# end class glosasProcedimento


class ct_guiaDadosAnexo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, dadosBeneficiario=None, dataEmissao_SolicitacaoAnexo=None, vlInformadoGuia=None, glosaAnexo=None, procedimentosSolicitados=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.dadosBeneficiario = dadosBeneficiario
        if isinstance(dataEmissao_SolicitacaoAnexo, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEmissao_SolicitacaoAnexo, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEmissao_SolicitacaoAnexo
        self.dataEmissao_SolicitacaoAnexo = initvalue_
        self.vlInformadoGuia = vlInformadoGuia
        self.glosaAnexo = glosaAnexo
        self.procedimentosSolicitados = procedimentosSolicitados
    def factory(*args_, **kwargs_):
        if ct_guiaDadosAnexo.subclass:
            return ct_guiaDadosAnexo.subclass(*args_, **kwargs_)
        else:
            return ct_guiaDadosAnexo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dataEmissao_SolicitacaoAnexo(self): return self.dataEmissao_SolicitacaoAnexo
    def set_dataEmissao_SolicitacaoAnexo(self, dataEmissao_SolicitacaoAnexo): self.dataEmissao_SolicitacaoAnexo = dataEmissao_SolicitacaoAnexo
    def get_vlInformadoGuia(self): return self.vlInformadoGuia
    def set_vlInformadoGuia(self, vlInformadoGuia): self.vlInformadoGuia = vlInformadoGuia
    def get_glosaAnexo(self): return self.glosaAnexo
    def set_glosaAnexo(self, glosaAnexo): self.glosaAnexo = glosaAnexo
    def get_procedimentosSolicitados(self): return self.procedimentosSolicitados
    def set_procedimentosSolicitados(self, procedimentosSolicitados): self.procedimentosSolicitados = procedimentosSolicitados
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.dadosBeneficiario is not None or
            self.dataEmissao_SolicitacaoAnexo is not None or
            self.vlInformadoGuia is not None or
            self.glosaAnexo is not None or
            self.procedimentosSolicitados is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaDadosAnexo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaDadosAnexo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaDadosAnexo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaDadosAnexo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaDadosAnexo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dataEmissao_SolicitacaoAnexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEmissao_SolicitacaoAnexo>%s</%sdataEmissao_SolicitacaoAnexo>%s' % (namespace_, self.gds_format_date(self.dataEmissao_SolicitacaoAnexo, input_name='dataEmissao_SolicitacaoAnexo'), namespace_, eol_))
        if self.vlInformadoGuia is not None:
            self.vlInformadoGuia.export(outfile, level, namespace_, name_='vlInformadoGuia', pretty_print=pretty_print)
        if self.glosaAnexo is not None:
            self.glosaAnexo.export(outfile, level, namespace_, name_='glosaAnexo', pretty_print=pretty_print)
        if self.procedimentosSolicitados is not None:
            self.procedimentosSolicitados.export(outfile, level, namespace_, name_='procedimentosSolicitados', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaDadosAnexo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataEmissao_SolicitacaoAnexo is not None:
            showIndent(outfile, level)
            outfile.write('dataEmissao_SolicitacaoAnexo=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEmissao_SolicitacaoAnexo, input_name='dataEmissao_SolicitacaoAnexo'))
        if self.vlInformadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('vlInformadoGuia=model_.ct_valorTotal(\n')
            self.vlInformadoGuia.exportLiteral(outfile, level, name_='vlInformadoGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.glosaAnexo is not None:
            showIndent(outfile, level)
            outfile.write('glosaAnexo=model_.glosaAnexo(\n')
            self.glosaAnexo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosSolicitados is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosSolicitados=model_.procedimentosSolicitados(\n')
            self.procedimentosSolicitados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dataEmissao_SolicitacaoAnexo':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEmissao_SolicitacaoAnexo = dval_
            # validate type st_data
            self.validate_st_data(self.dataEmissao_SolicitacaoAnexo)
        elif nodeName_ == 'vlInformadoGuia':
            obj_ = ct_valorTotal.factory()
            obj_.build(child_)
            self.vlInformadoGuia = obj_
            obj_.original_tagname_ = 'vlInformadoGuia'
        elif nodeName_ == 'glosaAnexo':
            obj_ = glosaAnexo.factory()
            obj_.build(child_)
            self.glosaAnexo = obj_
            obj_.original_tagname_ = 'glosaAnexo'
        elif nodeName_ == 'procedimentosSolicitados':
            obj_ = procedimentosSolicitados.factory()
            obj_.build(child_)
            self.procedimentosSolicitados = obj_
            obj_.original_tagname_ = 'procedimentosSolicitados'
# end class ct_guiaDadosAnexo


class glosaAnexo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivoGlosa=None, vlGlosaAnexo=None):
        self.original_tagname_ = None
        if motivoGlosa is None:
            self.motivoGlosa = []
        else:
            self.motivoGlosa = motivoGlosa
        self.vlGlosaAnexo = vlGlosaAnexo
    def factory(*args_, **kwargs_):
        if glosaAnexo.subclass:
            return glosaAnexo.subclass(*args_, **kwargs_)
        else:
            return glosaAnexo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivoGlosa(self): return self.motivoGlosa
    def set_motivoGlosa(self, motivoGlosa): self.motivoGlosa = motivoGlosa
    def add_motivoGlosa(self, value): self.motivoGlosa.append(value)
    def insert_motivoGlosa_at(self, index, value): self.motivoGlosa.insert(index, value)
    def replace_motivoGlosa_at(self, index, value): self.motivoGlosa[index] = value
    def get_vlGlosaAnexo(self): return self.vlGlosaAnexo
    def set_vlGlosaAnexo(self, vlGlosaAnexo): self.vlGlosaAnexo = vlGlosaAnexo
    def hasContent_(self):
        if (
            self.motivoGlosa or
            self.vlGlosaAnexo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='glosaAnexo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='glosaAnexo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='glosaAnexo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='glosaAnexo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='glosaAnexo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for motivoGlosa_ in self.motivoGlosa:
            motivoGlosa_.export(outfile, level, namespace_, name_='motivoGlosa', pretty_print=pretty_print)
        if self.vlGlosaAnexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svlGlosaAnexo>%s</%svlGlosaAnexo>%s' % (namespace_, self.gds_format_string(quote_xml(self.vlGlosaAnexo).encode(ExternalEncoding), input_name='vlGlosaAnexo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='glosaAnexo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('motivoGlosa=[\n')
        level += 1
        for motivoGlosa_ in self.motivoGlosa:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivoGlosa_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.vlGlosaAnexo is not None:
            showIndent(outfile, level)
            outfile.write('vlGlosaAnexo=%s,\n' % quote_python(self.vlGlosaAnexo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivoGlosa':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivoGlosa.append(obj_)
            obj_.original_tagname_ = 'motivoGlosa'
        elif nodeName_ == 'vlGlosaAnexo':
            vlGlosaAnexo_ = child_.text
            vlGlosaAnexo_ = self.gds_validate_string(vlGlosaAnexo_, node, 'vlGlosaAnexo')
            self.vlGlosaAnexo = vlGlosaAnexo_
# end class glosaAnexo


class procedimentosSolicitados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimentoSolicitado=None):
        self.original_tagname_ = None
        if procedimentoSolicitado is None:
            self.procedimentoSolicitado = []
        else:
            self.procedimentoSolicitado = procedimentoSolicitado
    def factory(*args_, **kwargs_):
        if procedimentosSolicitados.subclass:
            return procedimentosSolicitados.subclass(*args_, **kwargs_)
        else:
            return procedimentosSolicitados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimentoSolicitado(self): return self.procedimentoSolicitado
    def set_procedimentoSolicitado(self, procedimentoSolicitado): self.procedimentoSolicitado = procedimentoSolicitado
    def add_procedimentoSolicitado(self, value): self.procedimentoSolicitado.append(value)
    def insert_procedimentoSolicitado_at(self, index, value): self.procedimentoSolicitado.insert(index, value)
    def replace_procedimentoSolicitado_at(self, index, value): self.procedimentoSolicitado[index] = value
    def hasContent_(self):
        if (
            self.procedimentoSolicitado
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentosSolicitados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentosSolicitados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentosSolicitados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentosSolicitados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentosSolicitados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for procedimentoSolicitado_ in self.procedimentoSolicitado:
            procedimentoSolicitado_.export(outfile, level, namespace_, name_='procedimentoSolicitado', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='procedimentosSolicitados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('procedimentoSolicitado=[\n')
        level += 1
        for procedimentoSolicitado_ in self.procedimentoSolicitado:
            showIndent(outfile, level)
            outfile.write('model_.procedimentoSolicitado(\n')
            procedimentoSolicitado_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimentoSolicitado':
            obj_ = procedimentoSolicitado.factory()
            obj_.build(child_)
            self.procedimentoSolicitado.append(obj_)
            obj_.original_tagname_ = 'procedimentoSolicitado'
# end class procedimentosSolicitados


class procedimentoSolicitado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimento=None, opcaoFabricante=None, qtdSolicitada=None, valorSolicitado=None, qtdAutorizada=None, valorAutorizado=None, glosasProcedimento=None):
        self.original_tagname_ = None
        self.procedimento = procedimento
        self.opcaoFabricante = opcaoFabricante
        self.validate_dm_opcaoFabricante(self.opcaoFabricante)
        self.qtdSolicitada = qtdSolicitada
        self.valorSolicitado = valorSolicitado
        self.qtdAutorizada = qtdAutorizada
        self.valorAutorizado = valorAutorizado
        self.glosasProcedimento = glosasProcedimento
    def factory(*args_, **kwargs_):
        if procedimentoSolicitado.subclass:
            return procedimentoSolicitado.subclass(*args_, **kwargs_)
        else:
            return procedimentoSolicitado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_opcaoFabricante(self): return self.opcaoFabricante
    def set_opcaoFabricante(self, opcaoFabricante): self.opcaoFabricante = opcaoFabricante
    def get_qtdSolicitada(self): return self.qtdSolicitada
    def set_qtdSolicitada(self, qtdSolicitada): self.qtdSolicitada = qtdSolicitada
    def get_valorSolicitado(self): return self.valorSolicitado
    def set_valorSolicitado(self, valorSolicitado): self.valorSolicitado = valorSolicitado
    def get_qtdAutorizada(self): return self.qtdAutorizada
    def set_qtdAutorizada(self, qtdAutorizada): self.qtdAutorizada = qtdAutorizada
    def get_valorAutorizado(self): return self.valorAutorizado
    def set_valorAutorizado(self, valorAutorizado): self.valorAutorizado = valorAutorizado
    def get_glosasProcedimento(self): return self.glosasProcedimento
    def set_glosasProcedimento(self, glosasProcedimento): self.glosasProcedimento = glosasProcedimento
    def validate_dm_opcaoFabricante(self, value):
        # Validate type dm_opcaoFabricante, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_opcaoFabricante' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.procedimento is not None or
            self.opcaoFabricante is not None or
            self.qtdSolicitada is not None or
            self.valorSolicitado is not None or
            self.qtdAutorizada is not None or
            self.valorAutorizado is not None or
            self.glosasProcedimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentoSolicitado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentoSolicitado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentoSolicitado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentoSolicitado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentoSolicitado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.opcaoFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sopcaoFabricante>%s</%sopcaoFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.opcaoFabricante).encode(ExternalEncoding), input_name='opcaoFabricante'), namespace_, eol_))
        if self.qtdSolicitada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdSolicitada>%s</%sqtdSolicitada>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdSolicitada).encode(ExternalEncoding), input_name='qtdSolicitada'), namespace_, eol_))
        if self.valorSolicitado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorSolicitado>%s</%svalorSolicitado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorSolicitado).encode(ExternalEncoding), input_name='valorSolicitado'), namespace_, eol_))
        if self.qtdAutorizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdAutorizada>%s</%sqtdAutorizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdAutorizada).encode(ExternalEncoding), input_name='qtdAutorizada'), namespace_, eol_))
        if self.valorAutorizado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorAutorizado>%s</%svalorAutorizado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorAutorizado).encode(ExternalEncoding), input_name='valorAutorizado'), namespace_, eol_))
        if self.glosasProcedimento is not None:
            self.glosasProcedimento.export(outfile, level, namespace_, name_='glosasProcedimento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='procedimentoSolicitado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.opcaoFabricante is not None:
            showIndent(outfile, level)
            outfile.write('opcaoFabricante=%s,\n' % quote_python(self.opcaoFabricante).encode(ExternalEncoding))
        if self.qtdSolicitada is not None:
            showIndent(outfile, level)
            outfile.write('qtdSolicitada=%s,\n' % quote_python(self.qtdSolicitada).encode(ExternalEncoding))
        if self.valorSolicitado is not None:
            showIndent(outfile, level)
            outfile.write('valorSolicitado=%s,\n' % quote_python(self.valorSolicitado).encode(ExternalEncoding))
        if self.qtdAutorizada is not None:
            showIndent(outfile, level)
            outfile.write('qtdAutorizada=%s,\n' % quote_python(self.qtdAutorizada).encode(ExternalEncoding))
        if self.valorAutorizado is not None:
            showIndent(outfile, level)
            outfile.write('valorAutorizado=%s,\n' % quote_python(self.valorAutorizado).encode(ExternalEncoding))
        if self.glosasProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('glosasProcedimento=model_.glosasProcedimento(\n')
            self.glosasProcedimento.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'opcaoFabricante':
            opcaoFabricante_ = child_.text
            opcaoFabricante_ = self.gds_validate_string(opcaoFabricante_, node, 'opcaoFabricante')
            self.opcaoFabricante = opcaoFabricante_
            # validate type dm_opcaoFabricante
            self.validate_dm_opcaoFabricante(self.opcaoFabricante)
        elif nodeName_ == 'qtdSolicitada':
            qtdSolicitada_ = child_.text
            qtdSolicitada_ = self.gds_validate_string(qtdSolicitada_, node, 'qtdSolicitada')
            self.qtdSolicitada = qtdSolicitada_
        elif nodeName_ == 'valorSolicitado':
            valorSolicitado_ = child_.text
            valorSolicitado_ = self.gds_validate_string(valorSolicitado_, node, 'valorSolicitado')
            self.valorSolicitado = valorSolicitado_
        elif nodeName_ == 'qtdAutorizada':
            qtdAutorizada_ = child_.text
            qtdAutorizada_ = self.gds_validate_string(qtdAutorizada_, node, 'qtdAutorizada')
            self.qtdAutorizada = qtdAutorizada_
        elif nodeName_ == 'valorAutorizado':
            valorAutorizado_ = child_.text
            valorAutorizado_ = self.gds_validate_string(valorAutorizado_, node, 'valorAutorizado')
            self.valorAutorizado = valorAutorizado_
        elif nodeName_ == 'glosasProcedimento':
            obj_ = glosasProcedimento.factory()
            obj_.build(child_)
            self.glosasProcedimento = obj_
            obj_.original_tagname_ = 'glosasProcedimento'
# end class procedimentoSolicitado


class ct_guiaDadosOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, numeroCarteira=None, atendimentoRN=None, nomeBeneficiario=None, numeroCNS=None, identificadorBeneficiario=None, vlInformadoGuia=None, glosaGuia=None, procedimentosRealizados=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.atendimentoRN = atendimentoRN
        self.validate_dm_simNao(self.atendimentoRN)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.identificadorBeneficiario = identificadorBeneficiario
        self.vlInformadoGuia = vlInformadoGuia
        self.glosaGuia = glosaGuia
        self.procedimentosRealizados = procedimentosRealizados
    def factory(*args_, **kwargs_):
        if ct_guiaDadosOdonto.subclass:
            return ct_guiaDadosOdonto.subclass(*args_, **kwargs_)
        else:
            return ct_guiaDadosOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_atendimentoRN(self): return self.atendimentoRN
    def set_atendimentoRN(self, atendimentoRN): self.atendimentoRN = atendimentoRN
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def get_vlInformadoGuia(self): return self.vlInformadoGuia
    def set_vlInformadoGuia(self, vlInformadoGuia): self.vlInformadoGuia = vlInformadoGuia
    def get_glosaGuia(self): return self.glosaGuia
    def set_glosaGuia(self, glosaGuia): self.glosaGuia = glosaGuia
    def get_procedimentosRealizados(self): return self.procedimentosRealizados
    def set_procedimentosRealizados(self, procedimentosRealizados): self.procedimentosRealizados = procedimentosRealizados
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.numeroCarteira is not None or
            self.atendimentoRN is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.identificadorBeneficiario is not None or
            self.vlInformadoGuia is not None or
            self.glosaGuia is not None or
            self.procedimentosRealizados is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaDadosOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaDadosOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaDadosOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaDadosOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaDadosOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.atendimentoRN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%satendimentoRN>%s</%satendimentoRN>%s' % (namespace_, self.gds_format_string(quote_xml(self.atendimentoRN).encode(ExternalEncoding), input_name='atendimentoRN'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
        if self.vlInformadoGuia is not None:
            self.vlInformadoGuia.export(outfile, level, namespace_, name_='vlInformadoGuia', pretty_print=pretty_print)
        if self.glosaGuia is not None:
            self.glosaGuia.export(outfile, level, namespace_, name_='glosaGuia', pretty_print=pretty_print)
        if self.procedimentosRealizados is not None:
            self.procedimentosRealizados.export(outfile, level, namespace_, name_='procedimentosRealizados', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaDadosOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.atendimentoRN is not None:
            showIndent(outfile, level)
            outfile.write('atendimentoRN=%s,\n' % quote_python(self.atendimentoRN).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.vlInformadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('vlInformadoGuia=model_.ct_valorTotal(\n')
            self.vlInformadoGuia.exportLiteral(outfile, level, name_='vlInformadoGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.glosaGuia is not None:
            showIndent(outfile, level)
            outfile.write('glosaGuia=model_.glosaGuia(\n')
            self.glosaGuia.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosRealizados is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosRealizados=model_.procedimentosRealizados(\n')
            self.procedimentosRealizados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'atendimentoRN':
            atendimentoRN_ = child_.text
            atendimentoRN_ = self.gds_validate_string(atendimentoRN_, node, 'atendimentoRN')
            self.atendimentoRN = atendimentoRN_
            # validate type dm_simNao
            self.validate_dm_simNao(self.atendimentoRN)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
        elif nodeName_ == 'vlInformadoGuia':
            obj_ = ct_valorTotal.factory()
            obj_.build(child_)
            self.vlInformadoGuia = obj_
            obj_.original_tagname_ = 'vlInformadoGuia'
        elif nodeName_ == 'glosaGuia':
            obj_ = glosaGuia.factory()
            obj_.build(child_)
            self.glosaGuia = obj_
            obj_.original_tagname_ = 'glosaGuia'
        elif nodeName_ == 'procedimentosRealizados':
            obj_ = procedimentosRealizados.factory()
            obj_.build(child_)
            self.procedimentosRealizados = obj_
            obj_.original_tagname_ = 'procedimentosRealizados'
# end class ct_guiaDadosOdonto


class ct_guiaRecurso(GeneratedsSuper):
    """estrutura utilizada no retorno do recurso de glosa"""
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None, numDemoAnalisePagto=None, numeroGuiaRecurso=None, numeroGuiaOrigem=None, motivosGlosa=None):
        self.original_tagname_ = None
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.numDemoAnalisePagto = numDemoAnalisePagto
        self.validate_st_texto12(self.numDemoAnalisePagto)
        self.numeroGuiaRecurso = numeroGuiaRecurso
        self.validate_st_texto20(self.numeroGuiaRecurso)
        self.numeroGuiaOrigem = numeroGuiaOrigem
        self.validate_st_texto20(self.numeroGuiaOrigem)
        if motivosGlosa is None:
            self.motivosGlosa = []
        else:
            self.motivosGlosa = motivosGlosa
    def factory(*args_, **kwargs_):
        if ct_guiaRecurso.subclass:
            return ct_guiaRecurso.subclass(*args_, **kwargs_)
        else:
            return ct_guiaRecurso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_numDemoAnalisePagto(self): return self.numDemoAnalisePagto
    def set_numDemoAnalisePagto(self, numDemoAnalisePagto): self.numDemoAnalisePagto = numDemoAnalisePagto
    def get_numeroGuiaRecurso(self): return self.numeroGuiaRecurso
    def set_numeroGuiaRecurso(self, numeroGuiaRecurso): self.numeroGuiaRecurso = numeroGuiaRecurso
    def get_numeroGuiaOrigem(self): return self.numeroGuiaOrigem
    def set_numeroGuiaOrigem(self, numeroGuiaOrigem): self.numeroGuiaOrigem = numeroGuiaOrigem
    def get_motivosGlosa(self): return self.motivosGlosa
    def set_motivosGlosa(self, motivosGlosa): self.motivosGlosa = motivosGlosa
    def add_motivosGlosa(self, value): self.motivosGlosa.append(value)
    def insert_motivosGlosa_at(self, index, value): self.motivosGlosa.insert(index, value)
    def replace_motivosGlosa_at(self, index, value): self.motivosGlosa[index] = value
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroProtocolo is not None or
            self.numDemoAnalisePagto is not None or
            self.numeroGuiaRecurso is not None or
            self.numeroGuiaOrigem is not None or
            self.motivosGlosa
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaRecurso', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaRecurso')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaRecurso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaRecurso'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaRecurso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.numDemoAnalisePagto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumDemoAnalisePagto>%s</%snumDemoAnalisePagto>%s' % (namespace_, self.gds_format_string(quote_xml(self.numDemoAnalisePagto).encode(ExternalEncoding), input_name='numDemoAnalisePagto'), namespace_, eol_))
        if self.numeroGuiaRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecurso>%s</%snumeroGuiaRecurso>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecurso).encode(ExternalEncoding), input_name='numeroGuiaRecurso'), namespace_, eol_))
        if self.numeroGuiaOrigem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOrigem>%s</%snumeroGuiaOrigem>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOrigem).encode(ExternalEncoding), input_name='numeroGuiaOrigem'), namespace_, eol_))
        for motivosGlosa_ in self.motivosGlosa:
            motivosGlosa_.export(outfile, level, namespace_, name_='motivosGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaRecurso'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.numDemoAnalisePagto is not None:
            showIndent(outfile, level)
            outfile.write('numDemoAnalisePagto=%s,\n' % quote_python(self.numDemoAnalisePagto).encode(ExternalEncoding))
        if self.numeroGuiaRecurso is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecurso=%s,\n' % quote_python(self.numeroGuiaRecurso).encode(ExternalEncoding))
        if self.numeroGuiaOrigem is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOrigem=%s,\n' % quote_python(self.numeroGuiaOrigem).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('motivosGlosa=[\n')
        level += 1
        for motivosGlosa_ in self.motivosGlosa:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivosGlosa_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'numDemoAnalisePagto':
            numDemoAnalisePagto_ = child_.text
            numDemoAnalisePagto_ = self.gds_validate_string(numDemoAnalisePagto_, node, 'numDemoAnalisePagto')
            self.numDemoAnalisePagto = numDemoAnalisePagto_
            # validate type st_texto12
            self.validate_st_texto12(self.numDemoAnalisePagto)
        elif nodeName_ == 'numeroGuiaRecurso':
            numeroGuiaRecurso_ = child_.text
            numeroGuiaRecurso_ = self.gds_validate_string(numeroGuiaRecurso_, node, 'numeroGuiaRecurso')
            self.numeroGuiaRecurso = numeroGuiaRecurso_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecurso)
        elif nodeName_ == 'numeroGuiaOrigem':
            numeroGuiaOrigem_ = child_.text
            numeroGuiaOrigem_ = self.gds_validate_string(numeroGuiaOrigem_, node, 'numeroGuiaOrigem')
            self.numeroGuiaOrigem = numeroGuiaOrigem_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOrigem)
        elif nodeName_ == 'motivosGlosa':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivosGlosa.append(obj_)
            obj_.original_tagname_ = 'motivosGlosa'
# end class ct_guiaRecurso


class ct_guiaRecursoLote(GeneratedsSuper):
    """lote de recurso de glosa"""
    subclass = None
    superclass = None
    def __init__(self, guiaRecursoGlosaOdonto=None, guiaRecursoGlosa=None):
        self.original_tagname_ = None
        self.guiaRecursoGlosaOdonto = guiaRecursoGlosaOdonto
        self.guiaRecursoGlosa = guiaRecursoGlosa
    def factory(*args_, **kwargs_):
        if ct_guiaRecursoLote.subclass:
            return ct_guiaRecursoLote.subclass(*args_, **kwargs_)
        else:
            return ct_guiaRecursoLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_guiaRecursoGlosaOdonto(self): return self.guiaRecursoGlosaOdonto
    def set_guiaRecursoGlosaOdonto(self, guiaRecursoGlosaOdonto): self.guiaRecursoGlosaOdonto = guiaRecursoGlosaOdonto
    def get_guiaRecursoGlosa(self): return self.guiaRecursoGlosa
    def set_guiaRecursoGlosa(self, guiaRecursoGlosa): self.guiaRecursoGlosa = guiaRecursoGlosa
    def hasContent_(self):
        if (
            self.guiaRecursoGlosaOdonto is not None or
            self.guiaRecursoGlosa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaRecursoLote', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaRecursoLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaRecursoLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaRecursoLote'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaRecursoLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.guiaRecursoGlosaOdonto is not None:
            self.guiaRecursoGlosaOdonto.export(outfile, level, namespace_, name_='guiaRecursoGlosaOdonto', pretty_print=pretty_print)
        if self.guiaRecursoGlosa is not None:
            self.guiaRecursoGlosa.export(outfile, level, namespace_, name_='guiaRecursoGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_guiaRecursoLote'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.guiaRecursoGlosaOdonto is not None:
            showIndent(outfile, level)
            outfile.write('guiaRecursoGlosaOdonto=model_.cto_recursoGlosaOdonto(\n')
            self.guiaRecursoGlosaOdonto.exportLiteral(outfile, level, name_='guiaRecursoGlosaOdonto')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.guiaRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('guiaRecursoGlosa=model_.ctm_recursoGlosa(\n')
            self.guiaRecursoGlosa.exportLiteral(outfile, level, name_='guiaRecursoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'guiaRecursoGlosaOdonto':
            obj_ = cto_recursoGlosaOdonto.factory()
            obj_.build(child_)
            self.guiaRecursoGlosaOdonto = obj_
            obj_.original_tagname_ = 'guiaRecursoGlosaOdonto'
        elif nodeName_ == 'guiaRecursoGlosa':
            obj_ = ctm_recursoGlosa.factory()
            obj_.build(child_)
            self.guiaRecursoGlosa = obj_
            obj_.original_tagname_ = 'guiaRecursoGlosa'
# end class ct_guiaRecursoLote


class ct_guiaValorTotal(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorProcedimentos=None, valorDiarias=None, valorTaxasAlugueis=None, valorMateriais=None, valorMedicamentos=None, valorOPME=None, valorGasesMedicinais=None, valorTotalGeral=None):
        self.original_tagname_ = None
        self.valorProcedimentos = valorProcedimentos
        self.valorDiarias = valorDiarias
        self.valorTaxasAlugueis = valorTaxasAlugueis
        self.valorMateriais = valorMateriais
        self.valorMedicamentos = valorMedicamentos
        self.valorOPME = valorOPME
        self.valorGasesMedicinais = valorGasesMedicinais
        self.valorTotalGeral = valorTotalGeral
    def factory(*args_, **kwargs_):
        if ct_guiaValorTotal.subclass:
            return ct_guiaValorTotal.subclass(*args_, **kwargs_)
        else:
            return ct_guiaValorTotal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorProcedimentos(self): return self.valorProcedimentos
    def set_valorProcedimentos(self, valorProcedimentos): self.valorProcedimentos = valorProcedimentos
    def get_valorDiarias(self): return self.valorDiarias
    def set_valorDiarias(self, valorDiarias): self.valorDiarias = valorDiarias
    def get_valorTaxasAlugueis(self): return self.valorTaxasAlugueis
    def set_valorTaxasAlugueis(self, valorTaxasAlugueis): self.valorTaxasAlugueis = valorTaxasAlugueis
    def get_valorMateriais(self): return self.valorMateriais
    def set_valorMateriais(self, valorMateriais): self.valorMateriais = valorMateriais
    def get_valorMedicamentos(self): return self.valorMedicamentos
    def set_valorMedicamentos(self, valorMedicamentos): self.valorMedicamentos = valorMedicamentos
    def get_valorOPME(self): return self.valorOPME
    def set_valorOPME(self, valorOPME): self.valorOPME = valorOPME
    def get_valorGasesMedicinais(self): return self.valorGasesMedicinais
    def set_valorGasesMedicinais(self, valorGasesMedicinais): self.valorGasesMedicinais = valorGasesMedicinais
    def get_valorTotalGeral(self): return self.valorTotalGeral
    def set_valorTotalGeral(self, valorTotalGeral): self.valorTotalGeral = valorTotalGeral
    def hasContent_(self):
        if (
            self.valorProcedimentos is not None or
            self.valorDiarias is not None or
            self.valorTaxasAlugueis is not None or
            self.valorMateriais is not None or
            self.valorMedicamentos is not None or
            self.valorOPME is not None or
            self.valorGasesMedicinais is not None or
            self.valorTotalGeral is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaValorTotal', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaValorTotal')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaValorTotal', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaValorTotal'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaValorTotal', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorProcedimentos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcedimentos>%s</%svalorProcedimentos>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcedimentos).encode(ExternalEncoding), input_name='valorProcedimentos'), namespace_, eol_))
        if self.valorDiarias is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorDiarias>%s</%svalorDiarias>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorDiarias).encode(ExternalEncoding), input_name='valorDiarias'), namespace_, eol_))
        if self.valorTaxasAlugueis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTaxasAlugueis>%s</%svalorTaxasAlugueis>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTaxasAlugueis).encode(ExternalEncoding), input_name='valorTaxasAlugueis'), namespace_, eol_))
        if self.valorMateriais is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorMateriais>%s</%svalorMateriais>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorMateriais).encode(ExternalEncoding), input_name='valorMateriais'), namespace_, eol_))
        if self.valorMedicamentos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorMedicamentos>%s</%svalorMedicamentos>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorMedicamentos).encode(ExternalEncoding), input_name='valorMedicamentos'), namespace_, eol_))
        if self.valorOPME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorOPME>%s</%svalorOPME>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorOPME).encode(ExternalEncoding), input_name='valorOPME'), namespace_, eol_))
        if self.valorGasesMedicinais is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGasesMedicinais>%s</%svalorGasesMedicinais>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGasesMedicinais).encode(ExternalEncoding), input_name='valorGasesMedicinais'), namespace_, eol_))
        if self.valorTotalGeral is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalGeral>%s</%svalorTotalGeral>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalGeral).encode(ExternalEncoding), input_name='valorTotalGeral'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_guiaValorTotal'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorProcedimentos is not None:
            showIndent(outfile, level)
            outfile.write('valorProcedimentos=%s,\n' % quote_python(self.valorProcedimentos).encode(ExternalEncoding))
        if self.valorDiarias is not None:
            showIndent(outfile, level)
            outfile.write('valorDiarias=%s,\n' % quote_python(self.valorDiarias).encode(ExternalEncoding))
        if self.valorTaxasAlugueis is not None:
            showIndent(outfile, level)
            outfile.write('valorTaxasAlugueis=%s,\n' % quote_python(self.valorTaxasAlugueis).encode(ExternalEncoding))
        if self.valorMateriais is not None:
            showIndent(outfile, level)
            outfile.write('valorMateriais=%s,\n' % quote_python(self.valorMateriais).encode(ExternalEncoding))
        if self.valorMedicamentos is not None:
            showIndent(outfile, level)
            outfile.write('valorMedicamentos=%s,\n' % quote_python(self.valorMedicamentos).encode(ExternalEncoding))
        if self.valorOPME is not None:
            showIndent(outfile, level)
            outfile.write('valorOPME=%s,\n' % quote_python(self.valorOPME).encode(ExternalEncoding))
        if self.valorGasesMedicinais is not None:
            showIndent(outfile, level)
            outfile.write('valorGasesMedicinais=%s,\n' % quote_python(self.valorGasesMedicinais).encode(ExternalEncoding))
        if self.valorTotalGeral is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalGeral=%s,\n' % quote_python(self.valorTotalGeral).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorProcedimentos':
            valorProcedimentos_ = child_.text
            valorProcedimentos_ = self.gds_validate_string(valorProcedimentos_, node, 'valorProcedimentos')
            self.valorProcedimentos = valorProcedimentos_
        elif nodeName_ == 'valorDiarias':
            valorDiarias_ = child_.text
            valorDiarias_ = self.gds_validate_string(valorDiarias_, node, 'valorDiarias')
            self.valorDiarias = valorDiarias_
        elif nodeName_ == 'valorTaxasAlugueis':
            valorTaxasAlugueis_ = child_.text
            valorTaxasAlugueis_ = self.gds_validate_string(valorTaxasAlugueis_, node, 'valorTaxasAlugueis')
            self.valorTaxasAlugueis = valorTaxasAlugueis_
        elif nodeName_ == 'valorMateriais':
            valorMateriais_ = child_.text
            valorMateriais_ = self.gds_validate_string(valorMateriais_, node, 'valorMateriais')
            self.valorMateriais = valorMateriais_
        elif nodeName_ == 'valorMedicamentos':
            valorMedicamentos_ = child_.text
            valorMedicamentos_ = self.gds_validate_string(valorMedicamentos_, node, 'valorMedicamentos')
            self.valorMedicamentos = valorMedicamentos_
        elif nodeName_ == 'valorOPME':
            valorOPME_ = child_.text
            valorOPME_ = self.gds_validate_string(valorOPME_, node, 'valorOPME')
            self.valorOPME = valorOPME_
        elif nodeName_ == 'valorGasesMedicinais':
            valorGasesMedicinais_ = child_.text
            valorGasesMedicinais_ = self.gds_validate_string(valorGasesMedicinais_, node, 'valorGasesMedicinais')
            self.valorGasesMedicinais = valorGasesMedicinais_
        elif nodeName_ == 'valorTotalGeral':
            valorTotalGeral_ = child_.text
            valorTotalGeral_ = self.gds_validate_string(valorTotalGeral_, node, 'valorTotalGeral')
            self.valorTotalGeral = valorTotalGeral_
# end class ct_guiaValorTotal


class ct_guiaValorTotalSADT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorProcedimentos=None, valorTaxasAlugueis=None, valorMateriais=None, valorMedicamentos=None, valorOPME=None, valorGasesMedicinais=None, valorTotalGeral=None):
        self.original_tagname_ = None
        self.valorProcedimentos = valorProcedimentos
        self.valorTaxasAlugueis = valorTaxasAlugueis
        self.valorMateriais = valorMateriais
        self.valorMedicamentos = valorMedicamentos
        self.valorOPME = valorOPME
        self.valorGasesMedicinais = valorGasesMedicinais
        self.valorTotalGeral = valorTotalGeral
    def factory(*args_, **kwargs_):
        if ct_guiaValorTotalSADT.subclass:
            return ct_guiaValorTotalSADT.subclass(*args_, **kwargs_)
        else:
            return ct_guiaValorTotalSADT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorProcedimentos(self): return self.valorProcedimentos
    def set_valorProcedimentos(self, valorProcedimentos): self.valorProcedimentos = valorProcedimentos
    def get_valorTaxasAlugueis(self): return self.valorTaxasAlugueis
    def set_valorTaxasAlugueis(self, valorTaxasAlugueis): self.valorTaxasAlugueis = valorTaxasAlugueis
    def get_valorMateriais(self): return self.valorMateriais
    def set_valorMateriais(self, valorMateriais): self.valorMateriais = valorMateriais
    def get_valorMedicamentos(self): return self.valorMedicamentos
    def set_valorMedicamentos(self, valorMedicamentos): self.valorMedicamentos = valorMedicamentos
    def get_valorOPME(self): return self.valorOPME
    def set_valorOPME(self, valorOPME): self.valorOPME = valorOPME
    def get_valorGasesMedicinais(self): return self.valorGasesMedicinais
    def set_valorGasesMedicinais(self, valorGasesMedicinais): self.valorGasesMedicinais = valorGasesMedicinais
    def get_valorTotalGeral(self): return self.valorTotalGeral
    def set_valorTotalGeral(self, valorTotalGeral): self.valorTotalGeral = valorTotalGeral
    def hasContent_(self):
        if (
            self.valorProcedimentos is not None or
            self.valorTaxasAlugueis is not None or
            self.valorMateriais is not None or
            self.valorMedicamentos is not None or
            self.valorOPME is not None or
            self.valorGasesMedicinais is not None or
            self.valorTotalGeral is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_guiaValorTotalSADT', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_guiaValorTotalSADT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_guiaValorTotalSADT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_guiaValorTotalSADT'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_guiaValorTotalSADT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorProcedimentos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcedimentos>%s</%svalorProcedimentos>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcedimentos).encode(ExternalEncoding), input_name='valorProcedimentos'), namespace_, eol_))
        if self.valorTaxasAlugueis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTaxasAlugueis>%s</%svalorTaxasAlugueis>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTaxasAlugueis).encode(ExternalEncoding), input_name='valorTaxasAlugueis'), namespace_, eol_))
        if self.valorMateriais is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorMateriais>%s</%svalorMateriais>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorMateriais).encode(ExternalEncoding), input_name='valorMateriais'), namespace_, eol_))
        if self.valorMedicamentos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorMedicamentos>%s</%svalorMedicamentos>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorMedicamentos).encode(ExternalEncoding), input_name='valorMedicamentos'), namespace_, eol_))
        if self.valorOPME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorOPME>%s</%svalorOPME>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorOPME).encode(ExternalEncoding), input_name='valorOPME'), namespace_, eol_))
        if self.valorGasesMedicinais is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGasesMedicinais>%s</%svalorGasesMedicinais>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGasesMedicinais).encode(ExternalEncoding), input_name='valorGasesMedicinais'), namespace_, eol_))
        if self.valorTotalGeral is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalGeral>%s</%svalorTotalGeral>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalGeral).encode(ExternalEncoding), input_name='valorTotalGeral'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_guiaValorTotalSADT'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorProcedimentos is not None:
            showIndent(outfile, level)
            outfile.write('valorProcedimentos=%s,\n' % quote_python(self.valorProcedimentos).encode(ExternalEncoding))
        if self.valorTaxasAlugueis is not None:
            showIndent(outfile, level)
            outfile.write('valorTaxasAlugueis=%s,\n' % quote_python(self.valorTaxasAlugueis).encode(ExternalEncoding))
        if self.valorMateriais is not None:
            showIndent(outfile, level)
            outfile.write('valorMateriais=%s,\n' % quote_python(self.valorMateriais).encode(ExternalEncoding))
        if self.valorMedicamentos is not None:
            showIndent(outfile, level)
            outfile.write('valorMedicamentos=%s,\n' % quote_python(self.valorMedicamentos).encode(ExternalEncoding))
        if self.valorOPME is not None:
            showIndent(outfile, level)
            outfile.write('valorOPME=%s,\n' % quote_python(self.valorOPME).encode(ExternalEncoding))
        if self.valorGasesMedicinais is not None:
            showIndent(outfile, level)
            outfile.write('valorGasesMedicinais=%s,\n' % quote_python(self.valorGasesMedicinais).encode(ExternalEncoding))
        if self.valorTotalGeral is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalGeral=%s,\n' % quote_python(self.valorTotalGeral).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorProcedimentos':
            valorProcedimentos_ = child_.text
            valorProcedimentos_ = self.gds_validate_string(valorProcedimentos_, node, 'valorProcedimentos')
            self.valorProcedimentos = valorProcedimentos_
        elif nodeName_ == 'valorTaxasAlugueis':
            valorTaxasAlugueis_ = child_.text
            valorTaxasAlugueis_ = self.gds_validate_string(valorTaxasAlugueis_, node, 'valorTaxasAlugueis')
            self.valorTaxasAlugueis = valorTaxasAlugueis_
        elif nodeName_ == 'valorMateriais':
            valorMateriais_ = child_.text
            valorMateriais_ = self.gds_validate_string(valorMateriais_, node, 'valorMateriais')
            self.valorMateriais = valorMateriais_
        elif nodeName_ == 'valorMedicamentos':
            valorMedicamentos_ = child_.text
            valorMedicamentos_ = self.gds_validate_string(valorMedicamentos_, node, 'valorMedicamentos')
            self.valorMedicamentos = valorMedicamentos_
        elif nodeName_ == 'valorOPME':
            valorOPME_ = child_.text
            valorOPME_ = self.gds_validate_string(valorOPME_, node, 'valorOPME')
            self.valorOPME = valorOPME_
        elif nodeName_ == 'valorGasesMedicinais':
            valorGasesMedicinais_ = child_.text
            valorGasesMedicinais_ = self.gds_validate_string(valorGasesMedicinais_, node, 'valorGasesMedicinais')
            self.valorGasesMedicinais = valorGasesMedicinais_
        elif nodeName_ == 'valorTotalGeral':
            valorTotalGeral_ = child_.text
            valorTotalGeral_ = self.gds_validate_string(valorTotalGeral_, node, 'valorTotalGeral')
            self.valorTotalGeral = valorTotalGeral_
# end class ct_guiaValorTotalSADT


class ct_hipoteseDiagnostica(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, diagnostico=None, indicacaoAcidente=None):
        self.original_tagname_ = None
        self.diagnostico = diagnostico
        self.indicacaoAcidente = indicacaoAcidente
        self.validate_dm_indicadorAcidente(self.indicacaoAcidente)
    def factory(*args_, **kwargs_):
        if ct_hipoteseDiagnostica.subclass:
            return ct_hipoteseDiagnostica.subclass(*args_, **kwargs_)
        else:
            return ct_hipoteseDiagnostica(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_diagnostico(self): return self.diagnostico
    def set_diagnostico(self, diagnostico): self.diagnostico = diagnostico
    def get_indicacaoAcidente(self): return self.indicacaoAcidente
    def set_indicacaoAcidente(self, indicacaoAcidente): self.indicacaoAcidente = indicacaoAcidente
    def validate_dm_indicadorAcidente(self, value):
        # Validate type dm_indicadorAcidente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '9']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_indicadorAcidente' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.diagnostico is not None or
            self.indicacaoAcidente is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_hipoteseDiagnostica', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_hipoteseDiagnostica')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_hipoteseDiagnostica', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_hipoteseDiagnostica'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_hipoteseDiagnostica', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.diagnostico is not None:
            self.diagnostico.export(outfile, level, namespace_, name_='diagnostico', pretty_print=pretty_print)
        if self.indicacaoAcidente is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicacaoAcidente>%s</%sindicacaoAcidente>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicacaoAcidente).encode(ExternalEncoding), input_name='indicacaoAcidente'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_hipoteseDiagnostica'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.diagnostico is not None:
            showIndent(outfile, level)
            outfile.write('diagnostico=model_.ct_diagnostico(\n')
            self.diagnostico.exportLiteral(outfile, level, name_='diagnostico')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.indicacaoAcidente is not None:
            showIndent(outfile, level)
            outfile.write('indicacaoAcidente=%s,\n' % quote_python(self.indicacaoAcidente).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'diagnostico':
            obj_ = ct_diagnostico.factory()
            obj_.build(child_)
            self.diagnostico = obj_
            obj_.original_tagname_ = 'diagnostico'
        elif nodeName_ == 'indicacaoAcidente':
            indicacaoAcidente_ = child_.text
            indicacaoAcidente_ = self.gds_validate_string(indicacaoAcidente_, node, 'indicacaoAcidente')
            self.indicacaoAcidente = indicacaoAcidente_
            # validate type dm_indicadorAcidente
            self.validate_dm_indicadorAcidente(self.indicacaoAcidente)
# end class ct_hipoteseDiagnostica


class ct_identEquipe(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, grauPart=None, codProfissional=None, nomeProf=None, conselho=None, numeroConselhoProfissional=None, UF=None, CBOS=None):
        self.original_tagname_ = None
        self.grauPart = grauPart
        self.validate_dm_grauPart(self.grauPart)
        self.codProfissional = codProfissional
        self.nomeProf = nomeProf
        self.validate_st_texto70(self.nomeProf)
        self.conselho = conselho
        self.validate_dm_conselhoProfissional(self.conselho)
        self.numeroConselhoProfissional = numeroConselhoProfissional
        self.validate_st_texto15(self.numeroConselhoProfissional)
        self.UF = UF
        self.validate_dm_UF(self.UF)
        self.CBOS = CBOS
        self.validate_dm_CBOS(self.CBOS)
    def factory(*args_, **kwargs_):
        if ct_identEquipe.subclass:
            return ct_identEquipe.subclass(*args_, **kwargs_)
        else:
            return ct_identEquipe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_grauPart(self): return self.grauPart
    def set_grauPart(self, grauPart): self.grauPart = grauPart
    def get_codProfissional(self): return self.codProfissional
    def set_codProfissional(self, codProfissional): self.codProfissional = codProfissional
    def get_nomeProf(self): return self.nomeProf
    def set_nomeProf(self, nomeProf): self.nomeProf = nomeProf
    def get_conselho(self): return self.conselho
    def set_conselho(self, conselho): self.conselho = conselho
    def get_numeroConselhoProfissional(self): return self.numeroConselhoProfissional
    def set_numeroConselhoProfissional(self, numeroConselhoProfissional): self.numeroConselhoProfissional = numeroConselhoProfissional
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def get_CBOS(self): return self.CBOS
    def set_CBOS(self, CBOS): self.CBOS = CBOS
    def validate_dm_grauPart(self, value):
        # Validate type dm_grauPart, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_conselhoProfissional(self, value):
        # Validate type dm_conselhoProfissional, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_UF(self, value):
        # Validate type dm_UF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '35', '41', '42', '43', '50', '51', '52', '53', '98']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_UF' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_UF' % {"value" : value.encode("utf-8")} )
    def validate_dm_CBOS(self, value):
        # Validate type dm_CBOS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['201115', '203015', '213150', '225105', '225110', '225148', '225185', '225115', '225120', '225210', '225215', '225220', '225225', '225230', '225235', '225240', '225305', '225350', '225125', '225130', '225135', '225140', '225310', '225145', '225150', '225315', '225320', '225155', '225160', '225245', '225165', '225170', '225175', '225180', '225250', '225190', '225195', '225103', '225106', '225255', '225109', '225260', '225112', '225118', '225265', '225121', '225270', '225275', '225325', '225124', '225127', '225280', '225133', '225330', '225136', '225139', '225285', '223204', '223208', '223212', '223216', '223220', '223224', '223228', '223232', '223236', '223240', '223244', '223248', '223252', '223256', '223260', '223264', '223268', '223272', '223505', '223605', '223910', '223905', '223710', '223810', '239425', '251510', '251545', '251550', '251605', '322205', '322220', '322225', '322230', '516210', '225121', '225325', '223276', '223280', '223284', '223288', '223293', '225122', '225142', '225151', '225203', '225290', '225295', '225335', '225340', '225345', '999999']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_CBOS' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.grauPart is not None or
            self.codProfissional is not None or
            self.nomeProf is not None or
            self.conselho is not None or
            self.numeroConselhoProfissional is not None or
            self.UF is not None or
            self.CBOS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_identEquipe', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_identEquipe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_identEquipe', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_identEquipe'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_identEquipe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.grauPart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrauPart>%s</%sgrauPart>%s' % (namespace_, self.gds_format_string(quote_xml(self.grauPart).encode(ExternalEncoding), input_name='grauPart'), namespace_, eol_))
        if self.codProfissional is not None:
            self.codProfissional.export(outfile, level, namespace_, name_='codProfissional', pretty_print=pretty_print)
        if self.nomeProf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProf>%s</%snomeProf>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProf).encode(ExternalEncoding), input_name='nomeProf'), namespace_, eol_))
        if self.conselho is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sconselho>%s</%sconselho>%s' % (namespace_, self.gds_format_string(quote_xml(self.conselho).encode(ExternalEncoding), input_name='conselho'), namespace_, eol_))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroConselhoProfissional>%s</%snumeroConselhoProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroConselhoProfissional).encode(ExternalEncoding), input_name='numeroConselhoProfissional'), namespace_, eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_format_string(quote_xml(self.UF).encode(ExternalEncoding), input_name='UF'), namespace_, eol_))
        if self.CBOS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCBOS>%s</%sCBOS>%s' % (namespace_, self.gds_format_string(quote_xml(self.CBOS).encode(ExternalEncoding), input_name='CBOS'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_identEquipe'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.grauPart is not None:
            showIndent(outfile, level)
            outfile.write('grauPart=%s,\n' % quote_python(self.grauPart).encode(ExternalEncoding))
        if self.codProfissional is not None:
            showIndent(outfile, level)
            outfile.write('codProfissional=model_.codProfissional(\n')
            self.codProfissional.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nomeProf is not None:
            showIndent(outfile, level)
            outfile.write('nomeProf=%s,\n' % quote_python(self.nomeProf).encode(ExternalEncoding))
        if self.conselho is not None:
            showIndent(outfile, level)
            outfile.write('conselho=%s,\n' % quote_python(self.conselho).encode(ExternalEncoding))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level)
            outfile.write('numeroConselhoProfissional=%s,\n' % quote_python(self.numeroConselhoProfissional).encode(ExternalEncoding))
        if self.UF is not None:
            showIndent(outfile, level)
            outfile.write('UF=%s,\n' % quote_python(self.UF).encode(ExternalEncoding))
        if self.CBOS is not None:
            showIndent(outfile, level)
            outfile.write('CBOS=%s,\n' % quote_python(self.CBOS).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'grauPart':
            grauPart_ = child_.text
            grauPart_ = self.gds_validate_string(grauPart_, node, 'grauPart')
            self.grauPart = grauPart_
            # validate type dm_grauPart
            self.validate_dm_grauPart(self.grauPart)
        elif nodeName_ == 'codProfissional':
            obj_ = codProfissional.factory()
            obj_.build(child_)
            self.codProfissional = obj_
            obj_.original_tagname_ = 'codProfissional'
        elif nodeName_ == 'nomeProf':
            nomeProf_ = child_.text
            nomeProf_ = self.gds_validate_string(nomeProf_, node, 'nomeProf')
            self.nomeProf = nomeProf_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProf)
        elif nodeName_ == 'conselho':
            conselho_ = child_.text
            conselho_ = self.gds_validate_string(conselho_, node, 'conselho')
            self.conselho = conselho_
            # validate type dm_conselhoProfissional
            self.validate_dm_conselhoProfissional(self.conselho)
        elif nodeName_ == 'numeroConselhoProfissional':
            numeroConselhoProfissional_ = child_.text
            numeroConselhoProfissional_ = self.gds_validate_string(numeroConselhoProfissional_, node, 'numeroConselhoProfissional')
            self.numeroConselhoProfissional = numeroConselhoProfissional_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroConselhoProfissional)
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
            # validate type dm_UF
            self.validate_dm_UF(self.UF)
        elif nodeName_ == 'CBOS':
            CBOS_ = child_.text
            CBOS_ = self.gds_validate_string(CBOS_, node, 'CBOS')
            self.CBOS = CBOS_
            # validate type dm_CBOS
            self.validate_dm_CBOS(self.CBOS)
# end class ct_identEquipe


class codProfissional(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoPrestadorNaOperadora=None, cpfContratado=None):
        self.original_tagname_ = None
        self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora
        self.validate_st_texto14(self.codigoPrestadorNaOperadora)
        self.cpfContratado = cpfContratado
        self.validate_st_CPF(self.cpfContratado)
    def factory(*args_, **kwargs_):
        if codProfissional.subclass:
            return codProfissional.subclass(*args_, **kwargs_)
        else:
            return codProfissional(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoPrestadorNaOperadora(self): return self.codigoPrestadorNaOperadora
    def set_codigoPrestadorNaOperadora(self, codigoPrestadorNaOperadora): self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora
    def get_cpfContratado(self): return self.cpfContratado
    def set_cpfContratado(self, cpfContratado): self.cpfContratado = cpfContratado
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_CPF(self, value):
        # Validate type st_CPF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CPF_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CPF_patterns_, ))
    validate_st_CPF_patterns_ = [['^[0-9]{11}$']]
    def hasContent_(self):
        if (
            self.codigoPrestadorNaOperadora is not None or
            self.cpfContratado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='codProfissional', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codProfissional')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='codProfissional', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='codProfissional'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='codProfissional', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoPrestadorNaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPrestadorNaOperadora>%s</%scodigoPrestadorNaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoPrestadorNaOperadora).encode(ExternalEncoding), input_name='codigoPrestadorNaOperadora'), namespace_, eol_))
        if self.cpfContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scpfContratado>%s</%scpfContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.cpfContratado).encode(ExternalEncoding), input_name='cpfContratado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='codProfissional'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoPrestadorNaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('codigoPrestadorNaOperadora=%s,\n' % quote_python(self.codigoPrestadorNaOperadora).encode(ExternalEncoding))
        if self.cpfContratado is not None:
            showIndent(outfile, level)
            outfile.write('cpfContratado=%s,\n' % quote_python(self.cpfContratado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoPrestadorNaOperadora':
            codigoPrestadorNaOperadora_ = child_.text
            codigoPrestadorNaOperadora_ = self.gds_validate_string(codigoPrestadorNaOperadora_, node, 'codigoPrestadorNaOperadora')
            self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoPrestadorNaOperadora)
        elif nodeName_ == 'cpfContratado':
            cpfContratado_ = child_.text
            cpfContratado_ = self.gds_validate_string(cpfContratado_, node, 'cpfContratado')
            self.cpfContratado = cpfContratado_
            # validate type st_CPF
            self.validate_st_CPF(self.cpfContratado)
# end class codProfissional


class ct_identEquipeSADT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, grauPart=None, codProfissional=None, nomeProf=None, conselho=None, numeroConselhoProfissional=None, UF=None, CBOS=None):
        self.original_tagname_ = None
        self.grauPart = grauPart
        self.validate_dm_grauPart(self.grauPart)
        self.codProfissional = codProfissional
        self.nomeProf = nomeProf
        self.validate_st_texto70(self.nomeProf)
        self.conselho = conselho
        self.validate_dm_conselhoProfissional(self.conselho)
        self.numeroConselhoProfissional = numeroConselhoProfissional
        self.validate_st_texto15(self.numeroConselhoProfissional)
        self.UF = UF
        self.validate_dm_UF(self.UF)
        self.CBOS = CBOS
        self.validate_dm_CBOS(self.CBOS)
    def factory(*args_, **kwargs_):
        if ct_identEquipeSADT.subclass:
            return ct_identEquipeSADT.subclass(*args_, **kwargs_)
        else:
            return ct_identEquipeSADT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_grauPart(self): return self.grauPart
    def set_grauPart(self, grauPart): self.grauPart = grauPart
    def get_codProfissional(self): return self.codProfissional
    def set_codProfissional(self, codProfissional): self.codProfissional = codProfissional
    def get_nomeProf(self): return self.nomeProf
    def set_nomeProf(self, nomeProf): self.nomeProf = nomeProf
    def get_conselho(self): return self.conselho
    def set_conselho(self, conselho): self.conselho = conselho
    def get_numeroConselhoProfissional(self): return self.numeroConselhoProfissional
    def set_numeroConselhoProfissional(self, numeroConselhoProfissional): self.numeroConselhoProfissional = numeroConselhoProfissional
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def get_CBOS(self): return self.CBOS
    def set_CBOS(self, CBOS): self.CBOS = CBOS
    def validate_dm_grauPart(self, value):
        # Validate type dm_grauPart, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_conselhoProfissional(self, value):
        # Validate type dm_conselhoProfissional, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_UF(self, value):
        # Validate type dm_UF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '35', '41', '42', '43', '50', '51', '52', '53', '98']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_UF' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_UF' % {"value" : value.encode("utf-8")} )
    def validate_dm_CBOS(self, value):
        # Validate type dm_CBOS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['201115', '203015', '213150', '225105', '225110', '225148', '225185', '225115', '225120', '225210', '225215', '225220', '225225', '225230', '225235', '225240', '225305', '225350', '225125', '225130', '225135', '225140', '225310', '225145', '225150', '225315', '225320', '225155', '225160', '225245', '225165', '225170', '225175', '225180', '225250', '225190', '225195', '225103', '225106', '225255', '225109', '225260', '225112', '225118', '225265', '225121', '225270', '225275', '225325', '225124', '225127', '225280', '225133', '225330', '225136', '225139', '225285', '223204', '223208', '223212', '223216', '223220', '223224', '223228', '223232', '223236', '223240', '223244', '223248', '223252', '223256', '223260', '223264', '223268', '223272', '223505', '223605', '223910', '223905', '223710', '223810', '239425', '251510', '251545', '251550', '251605', '322205', '322220', '322225', '322230', '516210', '225121', '225325', '223276', '223280', '223284', '223288', '223293', '225122', '225142', '225151', '225203', '225290', '225295', '225335', '225340', '225345', '999999']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_CBOS' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.grauPart is not None or
            self.codProfissional is not None or
            self.nomeProf is not None or
            self.conselho is not None or
            self.numeroConselhoProfissional is not None or
            self.UF is not None or
            self.CBOS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_identEquipeSADT', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_identEquipeSADT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_identEquipeSADT', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_identEquipeSADT'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_identEquipeSADT', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.grauPart is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrauPart>%s</%sgrauPart>%s' % (namespace_, self.gds_format_string(quote_xml(self.grauPart).encode(ExternalEncoding), input_name='grauPart'), namespace_, eol_))
        if self.codProfissional is not None:
            self.codProfissional.export(outfile, level, namespace_, name_='codProfissional', pretty_print=pretty_print)
        if self.nomeProf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProf>%s</%snomeProf>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProf).encode(ExternalEncoding), input_name='nomeProf'), namespace_, eol_))
        if self.conselho is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sconselho>%s</%sconselho>%s' % (namespace_, self.gds_format_string(quote_xml(self.conselho).encode(ExternalEncoding), input_name='conselho'), namespace_, eol_))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroConselhoProfissional>%s</%snumeroConselhoProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroConselhoProfissional).encode(ExternalEncoding), input_name='numeroConselhoProfissional'), namespace_, eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_format_string(quote_xml(self.UF).encode(ExternalEncoding), input_name='UF'), namespace_, eol_))
        if self.CBOS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCBOS>%s</%sCBOS>%s' % (namespace_, self.gds_format_string(quote_xml(self.CBOS).encode(ExternalEncoding), input_name='CBOS'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_identEquipeSADT'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.grauPart is not None:
            showIndent(outfile, level)
            outfile.write('grauPart=%s,\n' % quote_python(self.grauPart).encode(ExternalEncoding))
        if self.codProfissional is not None:
            showIndent(outfile, level)
            outfile.write('codProfissional=model_.codProfissional(\n')
            self.codProfissional.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nomeProf is not None:
            showIndent(outfile, level)
            outfile.write('nomeProf=%s,\n' % quote_python(self.nomeProf).encode(ExternalEncoding))
        if self.conselho is not None:
            showIndent(outfile, level)
            outfile.write('conselho=%s,\n' % quote_python(self.conselho).encode(ExternalEncoding))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level)
            outfile.write('numeroConselhoProfissional=%s,\n' % quote_python(self.numeroConselhoProfissional).encode(ExternalEncoding))
        if self.UF is not None:
            showIndent(outfile, level)
            outfile.write('UF=%s,\n' % quote_python(self.UF).encode(ExternalEncoding))
        if self.CBOS is not None:
            showIndent(outfile, level)
            outfile.write('CBOS=%s,\n' % quote_python(self.CBOS).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'grauPart':
            grauPart_ = child_.text
            grauPart_ = self.gds_validate_string(grauPart_, node, 'grauPart')
            self.grauPart = grauPart_
            # validate type dm_grauPart
            self.validate_dm_grauPart(self.grauPart)
        elif nodeName_ == 'codProfissional':
            obj_ = codProfissional.factory()
            obj_.build(child_)
            self.codProfissional = obj_
            obj_.original_tagname_ = 'codProfissional'
        elif nodeName_ == 'nomeProf':
            nomeProf_ = child_.text
            nomeProf_ = self.gds_validate_string(nomeProf_, node, 'nomeProf')
            self.nomeProf = nomeProf_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProf)
        elif nodeName_ == 'conselho':
            conselho_ = child_.text
            conselho_ = self.gds_validate_string(conselho_, node, 'conselho')
            self.conselho = conselho_
            # validate type dm_conselhoProfissional
            self.validate_dm_conselhoProfissional(self.conselho)
        elif nodeName_ == 'numeroConselhoProfissional':
            numeroConselhoProfissional_ = child_.text
            numeroConselhoProfissional_ = self.gds_validate_string(numeroConselhoProfissional_, node, 'numeroConselhoProfissional')
            self.numeroConselhoProfissional = numeroConselhoProfissional_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroConselhoProfissional)
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
            # validate type dm_UF
            self.validate_dm_UF(self.UF)
        elif nodeName_ == 'CBOS':
            CBOS_ = child_.text
            CBOS_ = self.gds_validate_string(CBOS_, node, 'CBOS')
            self.CBOS = CBOS_
            # validate type dm_CBOS
            self.validate_dm_CBOS(self.CBOS)
# end class ct_identEquipeSADT


class ct_intervaloCiclos(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tempo=None, unidade=None):
        self.original_tagname_ = None
        self.tempo = tempo
        self.validate_st_numerico2(self.tempo)
        self.unidade = unidade
        self.validate_dm_unidadeTempoCiclo(self.unidade)
    def factory(*args_, **kwargs_):
        if ct_intervaloCiclos.subclass:
            return ct_intervaloCiclos.subclass(*args_, **kwargs_)
        else:
            return ct_intervaloCiclos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tempo(self): return self.tempo
    def set_tempo(self, tempo): self.tempo = tempo
    def get_unidade(self): return self.unidade
    def set_unidade(self, unidade): self.unidade = unidade
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_dm_unidadeTempoCiclo(self, value):
        # Validate type dm_unidadeTempoCiclo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_unidadeTempoCiclo' % {"value" : value.encode("utf-8")} )
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_unidadeTempoCiclo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tempo is not None or
            self.unidade is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_intervaloCiclos', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_intervaloCiclos')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_intervaloCiclos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_intervaloCiclos'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_intervaloCiclos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tempo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stempo>%s</%stempo>%s' % (namespace_, self.gds_format_integer(self.tempo, input_name='tempo'), namespace_, eol_))
        if self.unidade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunidade>%s</%sunidade>%s' % (namespace_, self.gds_format_string(quote_xml(self.unidade).encode(ExternalEncoding), input_name='unidade'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_intervaloCiclos'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.tempo is not None:
            showIndent(outfile, level)
            outfile.write('tempo=%d,\n' % self.tempo)
        if self.unidade is not None:
            showIndent(outfile, level)
            outfile.write('unidade=%s,\n' % quote_python(self.unidade).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tempo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'tempo')
            self.tempo = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.tempo)
        elif nodeName_ == 'unidade':
            unidade_ = child_.text
            unidade_ = self.gds_validate_string(unidade_, node, 'unidade')
            self.unidade = unidade_
            # validate type dm_unidadeTempoCiclo
            self.validate_dm_unidadeTempoCiclo(self.unidade)
# end class ct_intervaloCiclos


class ct_loteStatus(GeneratedsSuper):
    """resposta a uma solicitação de situação de protocolo"""
    subclass = None
    superclass = None
    def __init__(self, statusProtocolo=None, numeroProtocolo=None, numeroLote=None, dataEnvioLote=None, valorTotalLote=None, guiasTISS=None):
        self.original_tagname_ = None
        self.statusProtocolo = statusProtocolo
        self.validate_dm_statusProtocolo(self.statusProtocolo)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        if isinstance(dataEnvioLote, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioLote, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioLote
        self.dataEnvioLote = initvalue_
        self.valorTotalLote = valorTotalLote
        self.guiasTISS = guiasTISS
    def factory(*args_, **kwargs_):
        if ct_loteStatus.subclass:
            return ct_loteStatus.subclass(*args_, **kwargs_)
        else:
            return ct_loteStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_statusProtocolo(self): return self.statusProtocolo
    def set_statusProtocolo(self, statusProtocolo): self.statusProtocolo = statusProtocolo
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_dataEnvioLote(self): return self.dataEnvioLote
    def set_dataEnvioLote(self, dataEnvioLote): self.dataEnvioLote = dataEnvioLote
    def get_valorTotalLote(self): return self.valorTotalLote
    def set_valorTotalLote(self, valorTotalLote): self.valorTotalLote = valorTotalLote
    def get_guiasTISS(self): return self.guiasTISS
    def set_guiasTISS(self, guiasTISS): self.guiasTISS = guiasTISS
    def validate_dm_statusProtocolo(self, value):
        # Validate type dm_statusProtocolo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusProtocolo' % {"value" : value.encode("utf-8")} )
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.statusProtocolo is not None or
            self.numeroProtocolo is not None or
            self.numeroLote is not None or
            self.dataEnvioLote is not None or
            self.valorTotalLote is not None or
            self.guiasTISS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_loteStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_loteStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_loteStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_loteStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_loteStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.statusProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusProtocolo>%s</%sstatusProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusProtocolo).encode(ExternalEncoding), input_name='statusProtocolo'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioLote>%s</%sdataEnvioLote>%s' % (namespace_, self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'), namespace_, eol_))
        if self.valorTotalLote is not None:
            self.valorTotalLote.export(outfile, level, namespace_, name_='valorTotalLote', pretty_print=pretty_print)
        if self.guiasTISS is not None:
            self.guiasTISS.export(outfile, level, namespace_, name_='guiasTISS', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_loteStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.statusProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('statusProtocolo=%s,\n' % quote_python(self.statusProtocolo).encode(ExternalEncoding))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioLote=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'))
        if self.valorTotalLote is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalLote=model_.ct_valorTotal(\n')
            self.valorTotalLote.exportLiteral(outfile, level, name_='valorTotalLote')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.guiasTISS is not None:
            showIndent(outfile, level)
            outfile.write('guiasTISS=model_.guiasTISS(\n')
            self.guiasTISS.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'statusProtocolo':
            statusProtocolo_ = child_.text
            statusProtocolo_ = self.gds_validate_string(statusProtocolo_, node, 'statusProtocolo')
            self.statusProtocolo = statusProtocolo_
            # validate type dm_statusProtocolo
            self.validate_dm_statusProtocolo(self.statusProtocolo)
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'dataEnvioLote':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioLote = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioLote)
        elif nodeName_ == 'valorTotalLote':
            obj_ = ct_valorTotal.factory()
            obj_.build(child_)
            self.valorTotalLote = obj_
            obj_.original_tagname_ = 'valorTotalLote'
        elif nodeName_ == 'guiasTISS':
            obj_ = guiasTISS.factory()
            obj_.build(child_)
            self.guiasTISS = obj_
            obj_.original_tagname_ = 'guiasTISS'
# end class ct_loteStatus


class guiasTISS(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, guiasMedicas=None, guiasOdonto=None):
        self.original_tagname_ = None
        if guiasMedicas is None:
            self.guiasMedicas = []
        else:
            self.guiasMedicas = guiasMedicas
        if guiasOdonto is None:
            self.guiasOdonto = []
        else:
            self.guiasOdonto = guiasOdonto
    def factory(*args_, **kwargs_):
        if guiasTISS.subclass:
            return guiasTISS.subclass(*args_, **kwargs_)
        else:
            return guiasTISS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_guiasMedicas(self): return self.guiasMedicas
    def set_guiasMedicas(self, guiasMedicas): self.guiasMedicas = guiasMedicas
    def add_guiasMedicas(self, value): self.guiasMedicas.append(value)
    def insert_guiasMedicas_at(self, index, value): self.guiasMedicas.insert(index, value)
    def replace_guiasMedicas_at(self, index, value): self.guiasMedicas[index] = value
    def get_guiasOdonto(self): return self.guiasOdonto
    def set_guiasOdonto(self, guiasOdonto): self.guiasOdonto = guiasOdonto
    def add_guiasOdonto(self, value): self.guiasOdonto.append(value)
    def insert_guiasOdonto_at(self, index, value): self.guiasOdonto.insert(index, value)
    def replace_guiasOdonto_at(self, index, value): self.guiasOdonto[index] = value
    def hasContent_(self):
        if (
            self.guiasMedicas or
            self.guiasOdonto
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='guiasTISS', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='guiasTISS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='guiasTISS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='guiasTISS'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='guiasTISS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for guiasMedicas_ in self.guiasMedicas:
            guiasMedicas_.export(outfile, level, namespace_, name_='guiaConsulta', pretty_print=pretty_print)
        for guiasOdonto_ in self.guiasOdonto:
            guiasOdonto_.export(outfile, level, namespace_, name_='guiasOdonto', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='guiasTISS'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('guiasMedicas=[\n')
        level += 1
        for guiasMedicas_ in self.guiasMedicas:
            showIndent(outfile, level)
            outfile.write('model_.guiasMedicas(\n')
            guiasMedicas_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('guiasOdonto=[\n')
        level += 1
        for guiasOdonto_ in self.guiasOdonto:
            showIndent(outfile, level)
            outfile.write('model_.guiasOdonto(\n')
            guiasOdonto_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'guiasMedicas':
            obj_ = guiasMedicas.factory()
            obj_.build(child_)
            self.guiasMedicas.append(obj_)
            obj_.original_tagname_ = 'guiasMedicas'
        elif nodeName_ == 'guiasOdonto':
            obj_ = guiasOdonto.factory()
            obj_.build(child_)
            self.guiasOdonto.append(obj_)
            obj_.original_tagname_ = 'guiasOdonto'
# end class guiasTISS


class guiasMedicas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, guias=None):
        self.original_tagname_ = None
        self.guias = guias
    def factory(*args_, **kwargs_):
        if guiasMedicas.subclass:
            return guiasMedicas.subclass(*args_, **kwargs_)
        else:
            return guiasMedicas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_guias(self): return self.guias
    def set_guias(self, guias): self.guias = guias
    def hasContent_(self):
        if (
            self.guias is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='guiaConsulta', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='guiaConsulta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='guiaConsulta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='guiaConsulta'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='guiaConsulta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.guias is not None:
            self.guias.export(outfile, level, namespace_, name_='guias', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='guiaConsulta'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.guias is not None:
            showIndent(outfile, level)
            outfile.write('guias=model_.ct_guiaDados(\n')
            self.guias.exportLiteral(outfile, level, name_='guias')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'guias':
            obj_ = ct_guiaDados.factory()
            obj_.build(child_)
            self.guias = obj_
            obj_.original_tagname_ = 'guias'
# end class guiasMedicas


class guiasOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, guias=None):
        self.original_tagname_ = None
        self.guias = guias
    def factory(*args_, **kwargs_):
        if guiasOdonto.subclass:
            return guiasOdonto.subclass(*args_, **kwargs_)
        else:
            return guiasOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_guias(self): return self.guias
    def set_guias(self, guias): self.guias = guias
    def hasContent_(self):
        if (
            self.guias is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='guiasOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='guiasOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='guiasOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='guiasOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='guiasOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.guias is not None:
            self.guias.export(outfile, level, namespace_, name_='guias', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='guiasOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.guias is not None:
            showIndent(outfile, level)
            outfile.write('guias=model_.ct_guiaDadosOdonto(\n')
            self.guias.exportLiteral(outfile, level, name_='guias')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'guias':
            obj_ = ct_guiaDadosOdonto.factory()
            obj_.build(child_)
            self.guias = obj_
            obj_.original_tagname_ = 'guias'
# end class guiasOdonto


class ct_loteAnexoStatus(GeneratedsSuper):
    """resposta a uma solicitação de situação de protocolo"""
    subclass = None
    superclass = None
    def __init__(self, statusProtocolo=None, numeroProtocolo=None, numeroLote=None, dataEnvioLote=None, anexosClinicos=None):
        self.original_tagname_ = None
        self.statusProtocolo = statusProtocolo
        self.validate_dm_statusProtocolo(self.statusProtocolo)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        if isinstance(dataEnvioLote, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioLote, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioLote
        self.dataEnvioLote = initvalue_
        self.anexosClinicos = anexosClinicos
    def factory(*args_, **kwargs_):
        if ct_loteAnexoStatus.subclass:
            return ct_loteAnexoStatus.subclass(*args_, **kwargs_)
        else:
            return ct_loteAnexoStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_statusProtocolo(self): return self.statusProtocolo
    def set_statusProtocolo(self, statusProtocolo): self.statusProtocolo = statusProtocolo
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_dataEnvioLote(self): return self.dataEnvioLote
    def set_dataEnvioLote(self, dataEnvioLote): self.dataEnvioLote = dataEnvioLote
    def get_anexosClinicos(self): return self.anexosClinicos
    def set_anexosClinicos(self, anexosClinicos): self.anexosClinicos = anexosClinicos
    def validate_dm_statusProtocolo(self, value):
        # Validate type dm_statusProtocolo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusProtocolo' % {"value" : value.encode("utf-8")} )
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.statusProtocolo is not None or
            self.numeroProtocolo is not None or
            self.numeroLote is not None or
            self.dataEnvioLote is not None or
            self.anexosClinicos is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_loteAnexoStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_loteAnexoStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_loteAnexoStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_loteAnexoStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_loteAnexoStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.statusProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusProtocolo>%s</%sstatusProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusProtocolo).encode(ExternalEncoding), input_name='statusProtocolo'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioLote>%s</%sdataEnvioLote>%s' % (namespace_, self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'), namespace_, eol_))
        if self.anexosClinicos is not None:
            self.anexosClinicos.export(outfile, level, namespace_, name_='anexosClinicos', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_loteAnexoStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.statusProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('statusProtocolo=%s,\n' % quote_python(self.statusProtocolo).encode(ExternalEncoding))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioLote=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'))
        if self.anexosClinicos is not None:
            showIndent(outfile, level)
            outfile.write('anexosClinicos=model_.anexosClinicos(\n')
            self.anexosClinicos.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'statusProtocolo':
            statusProtocolo_ = child_.text
            statusProtocolo_ = self.gds_validate_string(statusProtocolo_, node, 'statusProtocolo')
            self.statusProtocolo = statusProtocolo_
            # validate type dm_statusProtocolo
            self.validate_dm_statusProtocolo(self.statusProtocolo)
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'dataEnvioLote':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioLote = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioLote)
        elif nodeName_ == 'anexosClinicos':
            obj_ = anexosClinicos.factory()
            obj_.build(child_)
            self.anexosClinicos = obj_
            obj_.original_tagname_ = 'anexosClinicos'
# end class ct_loteAnexoStatus


class ct_motivoGlosa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoGlosa=None, descricaoGlosa=None):
        self.original_tagname_ = None
        self.codigoGlosa = codigoGlosa
        self.validate_dm_tipoGlosa(self.codigoGlosa)
        self.descricaoGlosa = descricaoGlosa
        self.validate_st_texto500(self.descricaoGlosa)
    def factory(*args_, **kwargs_):
        if ct_motivoGlosa.subclass:
            return ct_motivoGlosa.subclass(*args_, **kwargs_)
        else:
            return ct_motivoGlosa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoGlosa(self): return self.codigoGlosa
    def set_codigoGlosa(self, codigoGlosa): self.codigoGlosa = codigoGlosa
    def get_descricaoGlosa(self): return self.descricaoGlosa
    def set_descricaoGlosa(self, descricaoGlosa): self.descricaoGlosa = descricaoGlosa
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoGlosa is not None or
            self.descricaoGlosa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_motivoGlosa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_motivoGlosa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_motivoGlosa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_motivoGlosa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_motivoGlosa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoGlosa>%s</%scodigoGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoGlosa).encode(ExternalEncoding), input_name='codigoGlosa'), namespace_, eol_))
        if self.descricaoGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricaoGlosa>%s</%sdescricaoGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricaoGlosa).encode(ExternalEncoding), input_name='descricaoGlosa'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_motivoGlosa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('codigoGlosa=%s,\n' % quote_python(self.codigoGlosa).encode(ExternalEncoding))
        if self.descricaoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('descricaoGlosa=%s,\n' % quote_python(self.descricaoGlosa).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoGlosa':
            codigoGlosa_ = child_.text
            codigoGlosa_ = self.gds_validate_string(codigoGlosa_, node, 'codigoGlosa')
            self.codigoGlosa = codigoGlosa_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codigoGlosa)
        elif nodeName_ == 'descricaoGlosa':
            descricaoGlosa_ = child_.text
            descricaoGlosa_ = self.gds_validate_string(descricaoGlosa_, node, 'descricaoGlosa')
            self.descricaoGlosa = descricaoGlosa_
            # validate type st_texto500
            self.validate_st_texto500(self.descricaoGlosa)
# end class ct_motivoGlosa


class ct_opmeDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoOPME=None, nomeFabricante=None):
        self.original_tagname_ = None
        self.identificacaoOPME = identificacaoOPME
        self.nomeFabricante = nomeFabricante
        self.validate_st_texto70(self.nomeFabricante)
    def factory(*args_, **kwargs_):
        if ct_opmeDados.subclass:
            return ct_opmeDados.subclass(*args_, **kwargs_)
        else:
            return ct_opmeDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOPME(self): return self.identificacaoOPME
    def set_identificacaoOPME(self, identificacaoOPME): self.identificacaoOPME = identificacaoOPME
    def get_nomeFabricante(self): return self.nomeFabricante
    def set_nomeFabricante(self, nomeFabricante): self.nomeFabricante = nomeFabricante
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.identificacaoOPME is not None or
            self.nomeFabricante is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_opmeDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_opmeDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_opmeDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_opmeDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_opmeDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoOPME is not None:
            self.identificacaoOPME.export(outfile, level, namespace_, name_='identificacaoOPME', pretty_print=pretty_print)
        if self.nomeFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeFabricante>%s</%snomeFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeFabricante).encode(ExternalEncoding), input_name='nomeFabricante'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_opmeDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoOPME is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOPME=model_.ct_procedimentoDados(\n')
            self.identificacaoOPME.exportLiteral(outfile, level, name_='identificacaoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nomeFabricante is not None:
            showIndent(outfile, level)
            outfile.write('nomeFabricante=%s,\n' % quote_python(self.nomeFabricante).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOPME':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.identificacaoOPME = obj_
            obj_.original_tagname_ = 'identificacaoOPME'
        elif nodeName_ == 'nomeFabricante':
            nomeFabricante_ = child_.text
            nomeFabricante_ = self.gds_validate_string(nomeFabricante_, node, 'nomeFabricante')
            self.nomeFabricante = nomeFabricante_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeFabricante)
# end class ct_opmeDados


class ct_opmUtilizada(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OPM=None, valorTotalOPM=None):
        self.original_tagname_ = None
        self.OPM = OPM
        self.valorTotalOPM = valorTotalOPM
    def factory(*args_, **kwargs_):
        if ct_opmUtilizada.subclass:
            return ct_opmUtilizada.subclass(*args_, **kwargs_)
        else:
            return ct_opmUtilizada(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OPM(self): return self.OPM
    def set_OPM(self, OPM): self.OPM = OPM
    def get_valorTotalOPM(self): return self.valorTotalOPM
    def set_valorTotalOPM(self, valorTotalOPM): self.valorTotalOPM = valorTotalOPM
    def hasContent_(self):
        if (
            self.OPM is not None or
            self.valorTotalOPM is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_opmUtilizada', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_opmUtilizada')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_opmUtilizada', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_opmUtilizada'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_opmUtilizada', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OPM is not None:
            self.OPM.export(outfile, level, namespace_, name_='OPM', pretty_print=pretty_print)
        if self.valorTotalOPM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalOPM>%s</%svalorTotalOPM>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalOPM).encode(ExternalEncoding), input_name='valorTotalOPM'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_opmUtilizada'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.OPM is not None:
            showIndent(outfile, level)
            outfile.write('OPM=model_.OPM(\n')
            self.OPM.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.valorTotalOPM is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalOPM=%s,\n' % quote_python(self.valorTotalOPM).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OPM':
            obj_ = OPM.factory()
            obj_.build(child_)
            self.OPM = obj_
            obj_.original_tagname_ = 'OPM'
        elif nodeName_ == 'valorTotalOPM':
            valorTotalOPM_ = child_.text
            valorTotalOPM_ = self.gds_validate_string(valorTotalOPM_, node, 'valorTotalOPM')
            self.valorTotalOPM = valorTotalOPM_
# end class ct_opmUtilizada


class OPM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoOPM=None):
        self.original_tagname_ = None
        if identificacaoOPM is None:
            self.identificacaoOPM = []
        else:
            self.identificacaoOPM = identificacaoOPM
    def factory(*args_, **kwargs_):
        if OPM.subclass:
            return OPM.subclass(*args_, **kwargs_)
        else:
            return OPM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOPM(self): return self.identificacaoOPM
    def set_identificacaoOPM(self, identificacaoOPM): self.identificacaoOPM = identificacaoOPM
    def add_identificacaoOPM(self, value): self.identificacaoOPM.append(value)
    def insert_identificacaoOPM_at(self, index, value): self.identificacaoOPM.insert(index, value)
    def replace_identificacaoOPM_at(self, index, value): self.identificacaoOPM[index] = value
    def hasContent_(self):
        if (
            self.identificacaoOPM
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='OPM', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OPM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='OPM', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='OPM'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='OPM', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for identificacaoOPM_ in self.identificacaoOPM:
            identificacaoOPM_.export(outfile, level, namespace_, name_='identificacaoOPM', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='OPM'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('identificacaoOPM=[\n')
        level += 1
        for identificacaoOPM_ in self.identificacaoOPM:
            showIndent(outfile, level)
            outfile.write('model_.identificacaoOPM(\n')
            identificacaoOPM_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOPM':
            obj_ = identificacaoOPM.factory()
            obj_.build(child_)
            self.identificacaoOPM.append(obj_)
            obj_.original_tagname_ = 'identificacaoOPM'
# end class OPM


class identificacaoOPM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoOPME=None, quantidade=None, codigoBarra=None, valorUnitario=None, valorTotal=None):
        self.original_tagname_ = None
        self.identificacaoOPME = identificacaoOPME
        self.quantidade = quantidade
        self.validate_st_numerico2(self.quantidade)
        self.codigoBarra = codigoBarra
        self.validate_st_texto20(self.codigoBarra)
        self.valorUnitario = valorUnitario
        self.valorTotal = valorTotal
    def factory(*args_, **kwargs_):
        if identificacaoOPM.subclass:
            return identificacaoOPM.subclass(*args_, **kwargs_)
        else:
            return identificacaoOPM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOPME(self): return self.identificacaoOPME
    def set_identificacaoOPME(self, identificacaoOPME): self.identificacaoOPME = identificacaoOPME
    def get_quantidade(self): return self.quantidade
    def set_quantidade(self, quantidade): self.quantidade = quantidade
    def get_codigoBarra(self): return self.codigoBarra
    def set_codigoBarra(self, codigoBarra): self.codigoBarra = codigoBarra
    def get_valorUnitario(self): return self.valorUnitario
    def set_valorUnitario(self, valorUnitario): self.valorUnitario = valorUnitario
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.identificacaoOPME is not None or
            self.quantidade is not None or
            self.codigoBarra is not None or
            self.valorUnitario is not None or
            self.valorTotal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='identificacaoOPM', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identificacaoOPM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='identificacaoOPM', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='identificacaoOPM'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='identificacaoOPM', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoOPME is not None:
            self.identificacaoOPME.export(outfile, level, namespace_, name_='identificacaoOPME', pretty_print=pretty_print)
        if self.quantidade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidade>%s</%squantidade>%s' % (namespace_, self.gds_format_integer(self.quantidade, input_name='quantidade'), namespace_, eol_))
        if self.codigoBarra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoBarra>%s</%scodigoBarra>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoBarra).encode(ExternalEncoding), input_name='codigoBarra'), namespace_, eol_))
        if self.valorUnitario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorUnitario>%s</%svalorUnitario>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorUnitario).encode(ExternalEncoding), input_name='valorUnitario'), namespace_, eol_))
        if self.valorTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotal>%s</%svalorTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotal).encode(ExternalEncoding), input_name='valorTotal'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='identificacaoOPM'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoOPME is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOPME=model_.ct_procedimentoDados(\n')
            self.identificacaoOPME.exportLiteral(outfile, level, name_='identificacaoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidade is not None:
            showIndent(outfile, level)
            outfile.write('quantidade=%d,\n' % self.quantidade)
        if self.codigoBarra is not None:
            showIndent(outfile, level)
            outfile.write('codigoBarra=%s,\n' % quote_python(self.codigoBarra).encode(ExternalEncoding))
        if self.valorUnitario is not None:
            showIndent(outfile, level)
            outfile.write('valorUnitario=%s,\n' % quote_python(self.valorUnitario).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=%s,\n' % quote_python(self.valorTotal).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOPME':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.identificacaoOPME = obj_
            obj_.original_tagname_ = 'identificacaoOPME'
        elif nodeName_ == 'quantidade':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidade')
            self.quantidade = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.quantidade)
        elif nodeName_ == 'codigoBarra':
            codigoBarra_ = child_.text
            codigoBarra_ = self.gds_validate_string(codigoBarra_, node, 'codigoBarra')
            self.codigoBarra = codigoBarra_
            # validate type st_texto20
            self.validate_st_texto20(self.codigoBarra)
        elif nodeName_ == 'valorUnitario':
            valorUnitario_ = child_.text
            valorUnitario_ = self.gds_validate_string(valorUnitario_, node, 'valorUnitario')
            self.valorUnitario = valorUnitario_
        elif nodeName_ == 'valorTotal':
            valorTotal_ = child_.text
            valorTotal_ = self.gds_validate_string(valorTotal_, node, 'valorTotal')
            self.valorTotal = valorTotal_
# end class identificacaoOPM


class ct_outrasDespesas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, despesa=None):
        self.original_tagname_ = None
        if despesa is None:
            self.despesa = []
        else:
            self.despesa = despesa
    def factory(*args_, **kwargs_):
        if ct_outrasDespesas.subclass:
            return ct_outrasDespesas.subclass(*args_, **kwargs_)
        else:
            return ct_outrasDespesas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_despesa(self): return self.despesa
    def set_despesa(self, despesa): self.despesa = despesa
    def add_despesa(self, value): self.despesa.append(value)
    def insert_despesa_at(self, index, value): self.despesa.insert(index, value)
    def replace_despesa_at(self, index, value): self.despesa[index] = value
    def hasContent_(self):
        if (
            self.despesa
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_outrasDespesas', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_outrasDespesas')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_outrasDespesas', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_outrasDespesas'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_outrasDespesas', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for despesa_ in self.despesa:
            despesa_.export(outfile, level, namespace_, name_='despesa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_outrasDespesas'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('despesa=[\n')
        level += 1
        for despesa_ in self.despesa:
            showIndent(outfile, level)
            outfile.write('model_.despesa(\n')
            despesa_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'despesa':
            obj_ = despesa.factory()
            obj_.build(child_)
            self.despesa.append(obj_)
            obj_.original_tagname_ = 'despesa'
# end class ct_outrasDespesas


class despesa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoDespesa=None, servicosExecutados=None):
        self.original_tagname_ = None
        self.codigoDespesa = codigoDespesa
        self.validate_dm_outrasDespesas(self.codigoDespesa)
        self.servicosExecutados = servicosExecutados
    def factory(*args_, **kwargs_):
        if despesa.subclass:
            return despesa.subclass(*args_, **kwargs_)
        else:
            return despesa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoDespesa(self): return self.codigoDespesa
    def set_codigoDespesa(self, codigoDespesa): self.codigoDespesa = codigoDespesa
    def get_servicosExecutados(self): return self.servicosExecutados
    def set_servicosExecutados(self, servicosExecutados): self.servicosExecutados = servicosExecutados
    def validate_dm_outrasDespesas(self, value):
        # Validate type dm_outrasDespesas, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '05', '07', '08']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_outrasDespesas' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoDespesa is not None or
            self.servicosExecutados is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='despesa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='despesa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='despesa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='despesa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='despesa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoDespesa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoDespesa>%s</%scodigoDespesa>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoDespesa).encode(ExternalEncoding), input_name='codigoDespesa'), namespace_, eol_))
        if self.servicosExecutados is not None:
            self.servicosExecutados.export(outfile, level, namespace_, name_='servicosExecutados', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='despesa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoDespesa is not None:
            showIndent(outfile, level)
            outfile.write('codigoDespesa=%s,\n' % quote_python(self.codigoDespesa).encode(ExternalEncoding))
        if self.servicosExecutados is not None:
            showIndent(outfile, level)
            outfile.write('servicosExecutados=model_.ct_procedimentoExecutadoOutras(\n')
            self.servicosExecutados.exportLiteral(outfile, level, name_='servicosExecutados')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoDespesa':
            codigoDespesa_ = child_.text
            codigoDespesa_ = self.gds_validate_string(codigoDespesa_, node, 'codigoDespesa')
            self.codigoDespesa = codigoDespesa_
            # validate type dm_outrasDespesas
            self.validate_dm_outrasDespesas(self.codigoDespesa)
        elif nodeName_ == 'servicosExecutados':
            obj_ = ct_procedimentoExecutadoOutras.factory()
            obj_.build(child_)
            self.servicosExecutados = obj_
            obj_.original_tagname_ = 'servicosExecutados'
# end class despesa


class ct_pagamentoDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataPagamento=None, formaPagamento=None, banco=None, agencia=None, nrContaCheque=None):
        self.original_tagname_ = None
        if isinstance(dataPagamento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataPagamento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataPagamento
        self.dataPagamento = initvalue_
        self.formaPagamento = formaPagamento
        self.validate_dm_formaPagamento(self.formaPagamento)
        self.banco = banco
        self.validate_st_texto4(self.banco)
        self.agencia = agencia
        self.validate_st_texto7(self.agencia)
        self.nrContaCheque = nrContaCheque
        self.validate_st_texto20(self.nrContaCheque)
    def factory(*args_, **kwargs_):
        if ct_pagamentoDados.subclass:
            return ct_pagamentoDados.subclass(*args_, **kwargs_)
        else:
            return ct_pagamentoDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataPagamento(self): return self.dataPagamento
    def set_dataPagamento(self, dataPagamento): self.dataPagamento = dataPagamento
    def get_formaPagamento(self): return self.formaPagamento
    def set_formaPagamento(self, formaPagamento): self.formaPagamento = formaPagamento
    def get_banco(self): return self.banco
    def set_banco(self, banco): self.banco = banco
    def get_agencia(self): return self.agencia
    def set_agencia(self, agencia): self.agencia = agencia
    def get_nrContaCheque(self): return self.nrContaCheque
    def set_nrContaCheque(self, nrContaCheque): self.nrContaCheque = nrContaCheque
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_formaPagamento(self, value):
        # Validate type dm_formaPagamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_formaPagamento' % {"value" : value.encode("utf-8")} )
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataPagamento is not None or
            self.formaPagamento is not None or
            self.banco is not None or
            self.agencia is not None or
            self.nrContaCheque is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_pagamentoDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_pagamentoDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_pagamentoDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_pagamentoDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_pagamentoDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataPagamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataPagamento>%s</%sdataPagamento>%s' % (namespace_, self.gds_format_date(self.dataPagamento, input_name='dataPagamento'), namespace_, eol_))
        if self.formaPagamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sformaPagamento>%s</%sformaPagamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.formaPagamento).encode(ExternalEncoding), input_name='formaPagamento'), namespace_, eol_))
        if self.banco is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbanco>%s</%sbanco>%s' % (namespace_, self.gds_format_string(quote_xml(self.banco).encode(ExternalEncoding), input_name='banco'), namespace_, eol_))
        if self.agencia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sagencia>%s</%sagencia>%s' % (namespace_, self.gds_format_string(quote_xml(self.agencia).encode(ExternalEncoding), input_name='agencia'), namespace_, eol_))
        if self.nrContaCheque is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrContaCheque>%s</%snrContaCheque>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrContaCheque).encode(ExternalEncoding), input_name='nrContaCheque'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_pagamentoDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataPagamento is not None:
            showIndent(outfile, level)
            outfile.write('dataPagamento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataPagamento, input_name='dataPagamento'))
        if self.formaPagamento is not None:
            showIndent(outfile, level)
            outfile.write('formaPagamento=%s,\n' % quote_python(self.formaPagamento).encode(ExternalEncoding))
        if self.banco is not None:
            showIndent(outfile, level)
            outfile.write('banco=%s,\n' % quote_python(self.banco).encode(ExternalEncoding))
        if self.agencia is not None:
            showIndent(outfile, level)
            outfile.write('agencia=%s,\n' % quote_python(self.agencia).encode(ExternalEncoding))
        if self.nrContaCheque is not None:
            showIndent(outfile, level)
            outfile.write('nrContaCheque=%s,\n' % quote_python(self.nrContaCheque).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataPagamento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataPagamento = dval_
            # validate type st_data
            self.validate_st_data(self.dataPagamento)
        elif nodeName_ == 'formaPagamento':
            formaPagamento_ = child_.text
            formaPagamento_ = self.gds_validate_string(formaPagamento_, node, 'formaPagamento')
            self.formaPagamento = formaPagamento_
            # validate type dm_formaPagamento
            self.validate_dm_formaPagamento(self.formaPagamento)
        elif nodeName_ == 'banco':
            banco_ = child_.text
            banco_ = self.gds_validate_string(banco_, node, 'banco')
            self.banco = banco_
            # validate type st_texto4
            self.validate_st_texto4(self.banco)
        elif nodeName_ == 'agencia':
            agencia_ = child_.text
            agencia_ = self.gds_validate_string(agencia_, node, 'agencia')
            self.agencia = agencia_
            # validate type st_texto7
            self.validate_st_texto7(self.agencia)
        elif nodeName_ == 'nrContaCheque':
            nrContaCheque_ = child_.text
            nrContaCheque_ = self.gds_validate_string(nrContaCheque_, node, 'nrContaCheque')
            self.nrContaCheque = nrContaCheque_
            # validate type st_texto20
            self.validate_st_texto20(self.nrContaCheque)
# end class ct_pagamentoDados


class ct_pagamentoResumo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroFatura=None, numeroLote=None, numeroProtocolo=None, valorTotalLote=None):
        self.original_tagname_ = None
        self.numeroFatura = numeroFatura
        self.validate_st_texto12(self.numeroFatura)
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.valorTotalLote = valorTotalLote
    def factory(*args_, **kwargs_):
        if ct_pagamentoResumo.subclass:
            return ct_pagamentoResumo.subclass(*args_, **kwargs_)
        else:
            return ct_pagamentoResumo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroFatura(self): return self.numeroFatura
    def set_numeroFatura(self, numeroFatura): self.numeroFatura = numeroFatura
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_valorTotalLote(self): return self.valorTotalLote
    def set_valorTotalLote(self, valorTotalLote): self.valorTotalLote = valorTotalLote
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroFatura is not None or
            self.numeroLote is not None or
            self.numeroProtocolo is not None or
            self.valorTotalLote is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_pagamentoResumo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_pagamentoResumo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_pagamentoResumo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_pagamentoResumo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_pagamentoResumo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroFatura is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroFatura>%s</%snumeroFatura>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroFatura).encode(ExternalEncoding), input_name='numeroFatura'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.valorTotalLote is not None:
            self.valorTotalLote.export(outfile, level, namespace_, name_='valorTotalLote', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_pagamentoResumo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroFatura is not None:
            showIndent(outfile, level)
            outfile.write('numeroFatura=%s,\n' % quote_python(self.numeroFatura).encode(ExternalEncoding))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.valorTotalLote is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalLote=model_.ct_valorTotal(\n')
            self.valorTotalLote.exportLiteral(outfile, level, name_='valorTotalLote')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroFatura':
            numeroFatura_ = child_.text
            numeroFatura_ = self.gds_validate_string(numeroFatura_, node, 'numeroFatura')
            self.numeroFatura = numeroFatura_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroFatura)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'valorTotalLote':
            obj_ = ct_valorTotal.factory()
            obj_.build(child_)
            self.valorTotalLote = obj_
            obj_.original_tagname_ = 'valorTotalLote'
# end class ct_pagamentoResumo


class ct_prestadorIdentificacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CNPJ=None, CPF=None, codigoPrestadorNaOperadora=None, extensiontype_=None):
        self.original_tagname_ = None
        self.CNPJ = CNPJ
        self.validate_st_CNPJ(self.CNPJ)
        self.CPF = CPF
        self.validate_st_CPF(self.CPF)
        self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora
        self.validate_st_texto14(self.codigoPrestadorNaOperadora)
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_prestadorIdentificacao.subclass:
            return ct_prestadorIdentificacao.subclass(*args_, **kwargs_)
        else:
            return ct_prestadorIdentificacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CNPJ(self): return self.CNPJ
    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ
    def get_CPF(self): return self.CPF
    def set_CPF(self, CPF): self.CPF = CPF
    def get_codigoPrestadorNaOperadora(self): return self.codigoPrestadorNaOperadora
    def set_codigoPrestadorNaOperadora(self, codigoPrestadorNaOperadora): self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def validate_st_CPF(self, value):
        # Validate type st_CPF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CPF_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CPF_patterns_, ))
    validate_st_CPF_patterns_ = [['^[0-9]{11}$']]
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CNPJ is not None or
            self.CPF is not None or
            self.codigoPrestadorNaOperadora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_prestadorIdentificacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_prestadorIdentificacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_prestadorIdentificacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_prestadorIdentificacao'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_prestadorIdentificacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNPJ>%s</%sCNPJ>%s' % (namespace_, self.gds_format_string(quote_xml(self.CNPJ).encode(ExternalEncoding), input_name='CNPJ'), namespace_, eol_))
        if self.CPF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCPF>%s</%sCPF>%s' % (namespace_, self.gds_format_string(quote_xml(self.CPF).encode(ExternalEncoding), input_name='CPF'), namespace_, eol_))
        if self.codigoPrestadorNaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoPrestadorNaOperadora>%s</%scodigoPrestadorNaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoPrestadorNaOperadora).encode(ExternalEncoding), input_name='codigoPrestadorNaOperadora'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_prestadorIdentificacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CNPJ is not None:
            showIndent(outfile, level)
            outfile.write('CNPJ=%s,\n' % quote_python(self.CNPJ).encode(ExternalEncoding))
        if self.CPF is not None:
            showIndent(outfile, level)
            outfile.write('CPF=%s,\n' % quote_python(self.CPF).encode(ExternalEncoding))
        if self.codigoPrestadorNaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('codigoPrestadorNaOperadora=%s,\n' % quote_python(self.codigoPrestadorNaOperadora).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.CNPJ)
        elif nodeName_ == 'CPF':
            CPF_ = child_.text
            CPF_ = self.gds_validate_string(CPF_, node, 'CPF')
            self.CPF = CPF_
            # validate type st_CPF
            self.validate_st_CPF(self.CPF)
        elif nodeName_ == 'codigoPrestadorNaOperadora':
            codigoPrestadorNaOperadora_ = child_.text
            codigoPrestadorNaOperadora_ = self.gds_validate_string(codigoPrestadorNaOperadora_, node, 'codigoPrestadorNaOperadora')
            self.codigoPrestadorNaOperadora = codigoPrestadorNaOperadora_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoPrestadorNaOperadora)
# end class ct_prestadorIdentificacao


class ct_loginSenha(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, loginPrestador=None, senhaPrestador=None):
        self.original_tagname_ = None
        self.loginPrestador = loginPrestador
        self.validate_st_texto20(self.loginPrestador)
        self.senhaPrestador = senhaPrestador
        self.validate_st_texto32(self.senhaPrestador)
    def factory(*args_, **kwargs_):
        if ct_loginSenha.subclass:
            return ct_loginSenha.subclass(*args_, **kwargs_)
        else:
            return ct_loginSenha(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_loginPrestador(self): return self.loginPrestador
    def set_loginPrestador(self, loginPrestador): self.loginPrestador = loginPrestador
    def get_senhaPrestador(self): return self.senhaPrestador
    def set_senhaPrestador(self, senhaPrestador): self.senhaPrestador = senhaPrestador
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto32(self, value):
        # Validate type st_texto32, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 32:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto32' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto32' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.loginPrestador is not None or
            self.senhaPrestador is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_loginSenha', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_loginSenha')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_loginSenha', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_loginSenha'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_loginSenha', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.loginPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sloginPrestador>%s</%sloginPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.loginPrestador).encode(ExternalEncoding), input_name='loginPrestador'), namespace_, eol_))
        if self.senhaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenhaPrestador>%s</%ssenhaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.senhaPrestador).encode(ExternalEncoding), input_name='senhaPrestador'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_loginSenha'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.loginPrestador is not None:
            showIndent(outfile, level)
            outfile.write('loginPrestador=%s,\n' % quote_python(self.loginPrestador).encode(ExternalEncoding))
        if self.senhaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('senhaPrestador=%s,\n' % quote_python(self.senhaPrestador).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'loginPrestador':
            loginPrestador_ = child_.text
            loginPrestador_ = self.gds_validate_string(loginPrestador_, node, 'loginPrestador')
            self.loginPrestador = loginPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.loginPrestador)
        elif nodeName_ == 'senhaPrestador':
            senhaPrestador_ = child_.text
            senhaPrestador_ = self.gds_validate_string(senhaPrestador_, node, 'senhaPrestador')
            self.senhaPrestador = senhaPrestador_
            # validate type st_texto32
            self.validate_st_texto32(self.senhaPrestador)
# end class ct_loginSenha


class ct_procedimentoAutorizado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimento=None, quantidadeSolicitada=None, quantidadeAutorizada=None, valorSolicitado=None, valorAutorizado=None, opcaoFabricante=None, registroANVISA=None, codigoRefFabricante=None, autorizacaoFuncionamento=None, motivosNegativa=None, extensiontype_=None):
        self.original_tagname_ = None
        self.procedimento = procedimento
        self.quantidadeSolicitada = quantidadeSolicitada
        self.validate_st_numerico3(self.quantidadeSolicitada)
        self.quantidadeAutorizada = quantidadeAutorizada
        self.validate_st_numerico3(self.quantidadeAutorizada)
        self.valorSolicitado = valorSolicitado
        self.valorAutorizado = valorAutorizado
        self.opcaoFabricante = opcaoFabricante
        self.validate_dm_opcaoFabricante(self.opcaoFabricante)
        self.registroANVISA = registroANVISA
        self.validate_st_texto15(self.registroANVISA)
        self.codigoRefFabricante = codigoRefFabricante
        self.validate_st_texto30(self.codigoRefFabricante)
        self.autorizacaoFuncionamento = autorizacaoFuncionamento
        self.validate_st_texto30(self.autorizacaoFuncionamento)
        self.motivosNegativa = motivosNegativa
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_procedimentoAutorizado.subclass:
            return ct_procedimentoAutorizado.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoAutorizado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_quantidadeSolicitada(self): return self.quantidadeSolicitada
    def set_quantidadeSolicitada(self, quantidadeSolicitada): self.quantidadeSolicitada = quantidadeSolicitada
    def get_quantidadeAutorizada(self): return self.quantidadeAutorizada
    def set_quantidadeAutorizada(self, quantidadeAutorizada): self.quantidadeAutorizada = quantidadeAutorizada
    def get_valorSolicitado(self): return self.valorSolicitado
    def set_valorSolicitado(self, valorSolicitado): self.valorSolicitado = valorSolicitado
    def get_valorAutorizado(self): return self.valorAutorizado
    def set_valorAutorizado(self, valorAutorizado): self.valorAutorizado = valorAutorizado
    def get_opcaoFabricante(self): return self.opcaoFabricante
    def set_opcaoFabricante(self, opcaoFabricante): self.opcaoFabricante = opcaoFabricante
    def get_registroANVISA(self): return self.registroANVISA
    def set_registroANVISA(self, registroANVISA): self.registroANVISA = registroANVISA
    def get_codigoRefFabricante(self): return self.codigoRefFabricante
    def set_codigoRefFabricante(self, codigoRefFabricante): self.codigoRefFabricante = codigoRefFabricante
    def get_autorizacaoFuncionamento(self): return self.autorizacaoFuncionamento
    def set_autorizacaoFuncionamento(self, autorizacaoFuncionamento): self.autorizacaoFuncionamento = autorizacaoFuncionamento
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_opcaoFabricante(self, value):
        # Validate type dm_opcaoFabricante, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_opcaoFabricante' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_st_texto30(self, value):
        # Validate type st_texto30, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto30' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto30' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.procedimento is not None or
            self.quantidadeSolicitada is not None or
            self.quantidadeAutorizada is not None or
            self.valorSolicitado is not None or
            self.valorAutorizado is not None or
            self.opcaoFabricante is not None or
            self.registroANVISA is not None or
            self.codigoRefFabricante is not None or
            self.autorizacaoFuncionamento is not None or
            self.motivosNegativa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoAutorizado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoAutorizado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoAutorizado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoAutorizado'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoAutorizado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeSolicitada>%s</%squantidadeSolicitada>%s' % (namespace_, self.gds_format_integer(self.quantidadeSolicitada, input_name='quantidadeSolicitada'), namespace_, eol_))
        if self.quantidadeAutorizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeAutorizada>%s</%squantidadeAutorizada>%s' % (namespace_, self.gds_format_integer(self.quantidadeAutorizada, input_name='quantidadeAutorizada'), namespace_, eol_))
        if self.valorSolicitado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorSolicitado>%s</%svalorSolicitado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorSolicitado).encode(ExternalEncoding), input_name='valorSolicitado'), namespace_, eol_))
        if self.valorAutorizado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorAutorizado>%s</%svalorAutorizado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorAutorizado).encode(ExternalEncoding), input_name='valorAutorizado'), namespace_, eol_))
        if self.opcaoFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sopcaoFabricante>%s</%sopcaoFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.opcaoFabricante).encode(ExternalEncoding), input_name='opcaoFabricante'), namespace_, eol_))
        if self.registroANVISA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANVISA>%s</%sregistroANVISA>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANVISA).encode(ExternalEncoding), input_name='registroANVISA'), namespace_, eol_))
        if self.codigoRefFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoRefFabricante>%s</%scodigoRefFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoRefFabricante).encode(ExternalEncoding), input_name='codigoRefFabricante'), namespace_, eol_))
        if self.autorizacaoFuncionamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sautorizacaoFuncionamento>%s</%sautorizacaoFuncionamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.autorizacaoFuncionamento).encode(ExternalEncoding), input_name='autorizacaoFuncionamento'), namespace_, eol_))
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_procedimentoAutorizado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeSolicitada=%d,\n' % self.quantidadeSolicitada)
        if self.quantidadeAutorizada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeAutorizada=%d,\n' % self.quantidadeAutorizada)
        if self.valorSolicitado is not None:
            showIndent(outfile, level)
            outfile.write('valorSolicitado=%s,\n' % quote_python(self.valorSolicitado).encode(ExternalEncoding))
        if self.valorAutorizado is not None:
            showIndent(outfile, level)
            outfile.write('valorAutorizado=%s,\n' % quote_python(self.valorAutorizado).encode(ExternalEncoding))
        if self.opcaoFabricante is not None:
            showIndent(outfile, level)
            outfile.write('opcaoFabricante=%s,\n' % quote_python(self.opcaoFabricante).encode(ExternalEncoding))
        if self.registroANVISA is not None:
            showIndent(outfile, level)
            outfile.write('registroANVISA=%s,\n' % quote_python(self.registroANVISA).encode(ExternalEncoding))
        if self.codigoRefFabricante is not None:
            showIndent(outfile, level)
            outfile.write('codigoRefFabricante=%s,\n' % quote_python(self.codigoRefFabricante).encode(ExternalEncoding))
        if self.autorizacaoFuncionamento is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoFuncionamento=%s,\n' % quote_python(self.autorizacaoFuncionamento).encode(ExternalEncoding))
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'quantidadeSolicitada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeSolicitada')
            self.quantidadeSolicitada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeSolicitada)
        elif nodeName_ == 'quantidadeAutorizada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeAutorizada')
            self.quantidadeAutorizada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeAutorizada)
        elif nodeName_ == 'valorSolicitado':
            valorSolicitado_ = child_.text
            valorSolicitado_ = self.gds_validate_string(valorSolicitado_, node, 'valorSolicitado')
            self.valorSolicitado = valorSolicitado_
        elif nodeName_ == 'valorAutorizado':
            valorAutorizado_ = child_.text
            valorAutorizado_ = self.gds_validate_string(valorAutorizado_, node, 'valorAutorizado')
            self.valorAutorizado = valorAutorizado_
        elif nodeName_ == 'opcaoFabricante':
            opcaoFabricante_ = child_.text
            opcaoFabricante_ = self.gds_validate_string(opcaoFabricante_, node, 'opcaoFabricante')
            self.opcaoFabricante = opcaoFabricante_
            # validate type dm_opcaoFabricante
            self.validate_dm_opcaoFabricante(self.opcaoFabricante)
        elif nodeName_ == 'registroANVISA':
            registroANVISA_ = child_.text
            registroANVISA_ = self.gds_validate_string(registroANVISA_, node, 'registroANVISA')
            self.registroANVISA = registroANVISA_
            # validate type st_texto15
            self.validate_st_texto15(self.registroANVISA)
        elif nodeName_ == 'codigoRefFabricante':
            codigoRefFabricante_ = child_.text
            codigoRefFabricante_ = self.gds_validate_string(codigoRefFabricante_, node, 'codigoRefFabricante')
            self.codigoRefFabricante = codigoRefFabricante_
            # validate type st_texto30
            self.validate_st_texto30(self.codigoRefFabricante)
        elif nodeName_ == 'autorizacaoFuncionamento':
            autorizacaoFuncionamento_ = child_.text
            autorizacaoFuncionamento_ = self.gds_validate_string(autorizacaoFuncionamento_, node, 'autorizacaoFuncionamento')
            self.autorizacaoFuncionamento = autorizacaoFuncionamento_
            # validate type st_texto30
            self.validate_st_texto30(self.autorizacaoFuncionamento)
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
# end class ct_procedimentoAutorizado


class ct_procedimentosComplementares(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataProvavel=None, identificacao=None, quantidade=None):
        self.original_tagname_ = None
        if isinstance(dataProvavel, basestring):
            initvalue_ = datetime_.datetime.strptime(dataProvavel, '%Y-%m-%d').date()
        else:
            initvalue_ = dataProvavel
        self.dataProvavel = initvalue_
        self.identificacao = identificacao
        self.quantidade = quantidade
    def factory(*args_, **kwargs_):
        if ct_procedimentosComplementares.subclass:
            return ct_procedimentosComplementares.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentosComplementares(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataProvavel(self): return self.dataProvavel
    def set_dataProvavel(self, dataProvavel): self.dataProvavel = dataProvavel
    def get_identificacao(self): return self.identificacao
    def set_identificacao(self, identificacao): self.identificacao = identificacao
    def get_quantidade(self): return self.quantidade
    def set_quantidade(self, quantidade): self.quantidade = quantidade
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.dataProvavel is not None or
            self.identificacao is not None or
            self.quantidade is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentosComplementares', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentosComplementares')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentosComplementares', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentosComplementares'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentosComplementares', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataProvavel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataProvavel>%s</%sdataProvavel>%s' % (namespace_, self.gds_format_date(self.dataProvavel, input_name='dataProvavel'), namespace_, eol_))
        if self.identificacao is not None:
            self.identificacao.export(outfile, level, namespace_, name_='identificacao', pretty_print=pretty_print)
        if self.quantidade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidade>%s</%squantidade>%s' % (namespace_, self.gds_format_string(quote_xml(self.quantidade).encode(ExternalEncoding), input_name='quantidade'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_procedimentosComplementares'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataProvavel is not None:
            showIndent(outfile, level)
            outfile.write('dataProvavel=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataProvavel, input_name='dataProvavel'))
        if self.identificacao is not None:
            showIndent(outfile, level)
            outfile.write('identificacao=model_.ct_procedimentoDados(\n')
            self.identificacao.exportLiteral(outfile, level, name_='identificacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidade is not None:
            showIndent(outfile, level)
            outfile.write('quantidade=%s,\n' % quote_python(self.quantidade).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataProvavel':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataProvavel = dval_
            # validate type st_data
            self.validate_st_data(self.dataProvavel)
        elif nodeName_ == 'identificacao':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.identificacao = obj_
            obj_.original_tagname_ = 'identificacao'
        elif nodeName_ == 'quantidade':
            quantidade_ = child_.text
            quantidade_ = self.gds_validate_string(quantidade_, node, 'quantidade')
            self.quantidade = quantidade_
# end class ct_procedimentosComplementares


class ct_procedimentoDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoTabela=None, codigoProcedimento=None, descricaoProcedimento=None):
        self.original_tagname_ = None
        self.codigoTabela = codigoTabela
        self.validate_dm_tabela(self.codigoTabela)
        self.codigoProcedimento = codigoProcedimento
        self.validate_st_texto10(self.codigoProcedimento)
        self.descricaoProcedimento = descricaoProcedimento
        self.validate_st_texto150(self.descricaoProcedimento)
    def factory(*args_, **kwargs_):
        if ct_procedimentoDados.subclass:
            return ct_procedimentoDados.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoTabela(self): return self.codigoTabela
    def set_codigoTabela(self, codigoTabela): self.codigoTabela = codigoTabela
    def get_codigoProcedimento(self): return self.codigoProcedimento
    def set_codigoProcedimento(self, codigoProcedimento): self.codigoProcedimento = codigoProcedimento
    def get_descricaoProcedimento(self): return self.descricaoProcedimento
    def set_descricaoProcedimento(self, descricaoProcedimento): self.descricaoProcedimento = descricaoProcedimento
    def validate_dm_tabela(self, value):
        # Validate type dm_tabela, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['18', '19', '20', '22', '90', '98', '00']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tabela' % {"value" : value.encode("utf-8")} )
    def validate_st_texto10(self, value):
        # Validate type st_texto10, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto10' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto10' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoTabela is not None or
            self.codigoProcedimento is not None or
            self.descricaoProcedimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoTabela is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoTabela>%s</%scodigoTabela>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoTabela).encode(ExternalEncoding), input_name='codigoTabela'), namespace_, eol_))
        if self.codigoProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoProcedimento>%s</%scodigoProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoProcedimento).encode(ExternalEncoding), input_name='codigoProcedimento'), namespace_, eol_))
        if self.descricaoProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricaoProcedimento>%s</%sdescricaoProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricaoProcedimento).encode(ExternalEncoding), input_name='descricaoProcedimento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_procedimentoDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoTabela is not None:
            showIndent(outfile, level)
            outfile.write('codigoTabela=%s,\n' % quote_python(self.codigoTabela).encode(ExternalEncoding))
        if self.codigoProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('codigoProcedimento=%s,\n' % quote_python(self.codigoProcedimento).encode(ExternalEncoding))
        if self.descricaoProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('descricaoProcedimento=%s,\n' % quote_python(self.descricaoProcedimento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoTabela':
            codigoTabela_ = child_.text
            codigoTabela_ = self.gds_validate_string(codigoTabela_, node, 'codigoTabela')
            self.codigoTabela = codigoTabela_
            # validate type dm_tabela
            self.validate_dm_tabela(self.codigoTabela)
        elif nodeName_ == 'codigoProcedimento':
            codigoProcedimento_ = child_.text
            codigoProcedimento_ = self.gds_validate_string(codigoProcedimento_, node, 'codigoProcedimento')
            self.codigoProcedimento = codigoProcedimento_
            # validate type st_texto10
            self.validate_st_texto10(self.codigoProcedimento)
        elif nodeName_ == 'descricaoProcedimento':
            descricaoProcedimento_ = child_.text
            descricaoProcedimento_ = self.gds_validate_string(descricaoProcedimento_, node, 'descricaoProcedimento')
            self.descricaoProcedimento = descricaoProcedimento_
            # validate type st_texto150
            self.validate_st_texto150(self.descricaoProcedimento)
# end class ct_procedimentoDados


class ct_procedimentoExecutado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataExecucao=None, horaInicial=None, horaFinal=None, procedimento=None, unidadeMedida=None, quantidadeExecutada=None, viaAcesso=None, tecnicaUtilizada=None, valorUnitario=None, valorTotal=None, codigoDespesa=None, fatorReducaoAcrescimo=None, extensiontype_=None):
        self.original_tagname_ = None
        if isinstance(dataExecucao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataExecucao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataExecucao
        self.dataExecucao = initvalue_
        if isinstance(horaInicial, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicial, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicial
        self.horaInicial = initvalue_
        if isinstance(horaFinal, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFinal, '%H:%M:%S').time()
        else:
            initvalue_ = horaFinal
        self.horaFinal = initvalue_
        self.procedimento = procedimento
        self.unidadeMedida = unidadeMedida
        self.validate_dm_unidadeMedida(self.unidadeMedida)
        self.quantidadeExecutada = quantidadeExecutada
        self.viaAcesso = viaAcesso
        self.validate_dm_viaDeAcesso(self.viaAcesso)
        self.tecnicaUtilizada = tecnicaUtilizada
        self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        self.valorUnitario = valorUnitario
        self.valorTotal = valorTotal
        self.codigoDespesa = codigoDespesa
        self.validate_dm_outrasDespesas(self.codigoDespesa)
        self.fatorReducaoAcrescimo = fatorReducaoAcrescimo
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_procedimentoExecutado.subclass:
            return ct_procedimentoExecutado.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoExecutado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataExecucao(self): return self.dataExecucao
    def set_dataExecucao(self, dataExecucao): self.dataExecucao = dataExecucao
    def get_horaInicial(self): return self.horaInicial
    def set_horaInicial(self, horaInicial): self.horaInicial = horaInicial
    def get_horaFinal(self): return self.horaFinal
    def set_horaFinal(self, horaFinal): self.horaFinal = horaFinal
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_unidadeMedida(self): return self.unidadeMedida
    def set_unidadeMedida(self, unidadeMedida): self.unidadeMedida = unidadeMedida
    def get_quantidadeExecutada(self): return self.quantidadeExecutada
    def set_quantidadeExecutada(self, quantidadeExecutada): self.quantidadeExecutada = quantidadeExecutada
    def get_viaAcesso(self): return self.viaAcesso
    def set_viaAcesso(self, viaAcesso): self.viaAcesso = viaAcesso
    def get_tecnicaUtilizada(self): return self.tecnicaUtilizada
    def set_tecnicaUtilizada(self, tecnicaUtilizada): self.tecnicaUtilizada = tecnicaUtilizada
    def get_valorUnitario(self): return self.valorUnitario
    def set_valorUnitario(self, valorUnitario): self.valorUnitario = valorUnitario
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_codigoDespesa(self): return self.codigoDespesa
    def set_codigoDespesa(self, codigoDespesa): self.codigoDespesa = codigoDespesa
    def get_fatorReducaoAcrescimo(self): return self.fatorReducaoAcrescimo
    def set_fatorReducaoAcrescimo(self, fatorReducaoAcrescimo): self.fatorReducaoAcrescimo = fatorReducaoAcrescimo
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_unidadeMedida(self, value):
        # Validate type dm_unidadeMedida, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_unidadeMedida' % {"value" : value.encode("utf-8")} )
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_unidadeMedida' % {"value" : value.encode("utf-8")} )
    def validate_dm_viaDeAcesso(self, value):
        # Validate type dm_viaDeAcesso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
    def validate_dm_tecnicaUtilizada(self, value):
        # Validate type dm_tecnicaUtilizada, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tecnicaUtilizada' % {"value" : value.encode("utf-8")} )
    def validate_dm_outrasDespesas(self, value):
        # Validate type dm_outrasDespesas, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '05', '07', '08']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_outrasDespesas' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataExecucao is not None or
            self.horaInicial is not None or
            self.horaFinal is not None or
            self.procedimento is not None or
            self.unidadeMedida is not None or
            self.quantidadeExecutada is not None or
            self.viaAcesso is not None or
            self.tecnicaUtilizada is not None or
            self.valorUnitario is not None or
            self.valorTotal is not None or
            self.codigoDespesa is not None or
            self.fatorReducaoAcrescimo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoExecutado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoExecutado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoExecutado'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataExecucao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataExecucao>%s</%sdataExecucao>%s' % (namespace_, self.gds_format_date(self.dataExecucao, input_name='dataExecucao'), namespace_, eol_))
        if self.horaInicial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicial>%s</%shoraInicial>%s' % (namespace_, self.gds_format_time(self.horaInicial, input_name='horaInicial'), namespace_, eol_))
        if self.horaFinal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFinal>%s</%shoraFinal>%s' % (namespace_, self.gds_format_time(self.horaFinal, input_name='horaFinal'), namespace_, eol_))
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.unidadeMedida is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunidadeMedida>%s</%sunidadeMedida>%s' % (namespace_, self.gds_format_string(quote_xml(self.unidadeMedida).encode(ExternalEncoding), input_name='unidadeMedida'), namespace_, eol_))
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeExecutada>%s</%squantidadeExecutada>%s' % (namespace_, self.gds_format_string(quote_xml(self.quantidadeExecutada).encode(ExternalEncoding), input_name='quantidadeExecutada'), namespace_, eol_))
        if self.viaAcesso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sviaAcesso>%s</%sviaAcesso>%s' % (namespace_, self.gds_format_string(quote_xml(self.viaAcesso).encode(ExternalEncoding), input_name='viaAcesso'), namespace_, eol_))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stecnicaUtilizada>%s</%stecnicaUtilizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.tecnicaUtilizada).encode(ExternalEncoding), input_name='tecnicaUtilizada'), namespace_, eol_))
        if self.valorUnitario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorUnitario>%s</%svalorUnitario>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorUnitario).encode(ExternalEncoding), input_name='valorUnitario'), namespace_, eol_))
        if self.valorTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotal>%s</%svalorTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotal).encode(ExternalEncoding), input_name='valorTotal'), namespace_, eol_))
        if self.codigoDespesa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoDespesa>%s</%scodigoDespesa>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoDespesa).encode(ExternalEncoding), input_name='codigoDespesa'), namespace_, eol_))
        if self.fatorReducaoAcrescimo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfatorReducaoAcrescimo>%s</%sfatorReducaoAcrescimo>%s' % (namespace_, self.gds_format_string(quote_xml(self.fatorReducaoAcrescimo).encode(ExternalEncoding), input_name='fatorReducaoAcrescimo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_procedimentoExecutado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataExecucao is not None:
            showIndent(outfile, level)
            outfile.write('dataExecucao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataExecucao, input_name='dataExecucao'))
        if self.horaInicial is not None:
            showIndent(outfile, level)
            outfile.write('horaInicial=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicial, input_name='horaInicial'))
        if self.horaFinal is not None:
            showIndent(outfile, level)
            outfile.write('horaFinal=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFinal, input_name='horaFinal'))
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unidadeMedida is not None:
            showIndent(outfile, level)
            outfile.write('unidadeMedida=%s,\n' % quote_python(self.unidadeMedida).encode(ExternalEncoding))
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeExecutada=%s,\n' % quote_python(self.quantidadeExecutada).encode(ExternalEncoding))
        if self.viaAcesso is not None:
            showIndent(outfile, level)
            outfile.write('viaAcesso=%s,\n' % quote_python(self.viaAcesso).encode(ExternalEncoding))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level)
            outfile.write('tecnicaUtilizada=%s,\n' % quote_python(self.tecnicaUtilizada).encode(ExternalEncoding))
        if self.valorUnitario is not None:
            showIndent(outfile, level)
            outfile.write('valorUnitario=%s,\n' % quote_python(self.valorUnitario).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=%s,\n' % quote_python(self.valorTotal).encode(ExternalEncoding))
        if self.codigoDespesa is not None:
            showIndent(outfile, level)
            outfile.write('codigoDespesa=%s,\n' % quote_python(self.codigoDespesa).encode(ExternalEncoding))
        if self.fatorReducaoAcrescimo is not None:
            showIndent(outfile, level)
            outfile.write('fatorReducaoAcrescimo=%s,\n' % quote_python(self.fatorReducaoAcrescimo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataExecucao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataExecucao = dval_
            # validate type st_data
            self.validate_st_data(self.dataExecucao)
        elif nodeName_ == 'horaInicial':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicial = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicial)
        elif nodeName_ == 'horaFinal':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFinal = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFinal)
        elif nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'unidadeMedida':
            unidadeMedida_ = child_.text
            unidadeMedida_ = self.gds_validate_string(unidadeMedida_, node, 'unidadeMedida')
            self.unidadeMedida = unidadeMedida_
            # validate type dm_unidadeMedida
            self.validate_dm_unidadeMedida(self.unidadeMedida)
        elif nodeName_ == 'quantidadeExecutada':
            quantidadeExecutada_ = child_.text
            quantidadeExecutada_ = self.gds_validate_string(quantidadeExecutada_, node, 'quantidadeExecutada')
            self.quantidadeExecutada = quantidadeExecutada_
        elif nodeName_ == 'viaAcesso':
            viaAcesso_ = child_.text
            viaAcesso_ = self.gds_validate_string(viaAcesso_, node, 'viaAcesso')
            self.viaAcesso = viaAcesso_
            # validate type dm_viaDeAcesso
            self.validate_dm_viaDeAcesso(self.viaAcesso)
        elif nodeName_ == 'tecnicaUtilizada':
            tecnicaUtilizada_ = child_.text
            tecnicaUtilizada_ = self.gds_validate_string(tecnicaUtilizada_, node, 'tecnicaUtilizada')
            self.tecnicaUtilizada = tecnicaUtilizada_
            # validate type dm_tecnicaUtilizada
            self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        elif nodeName_ == 'valorUnitario':
            valorUnitario_ = child_.text
            valorUnitario_ = self.gds_validate_string(valorUnitario_, node, 'valorUnitario')
            self.valorUnitario = valorUnitario_
        elif nodeName_ == 'valorTotal':
            valorTotal_ = child_.text
            valorTotal_ = self.gds_validate_string(valorTotal_, node, 'valorTotal')
            self.valorTotal = valorTotal_
        elif nodeName_ == 'codigoDespesa':
            codigoDespesa_ = child_.text
            codigoDespesa_ = self.gds_validate_string(codigoDespesa_, node, 'codigoDespesa')
            self.codigoDespesa = codigoDespesa_
            # validate type dm_outrasDespesas
            self.validate_dm_outrasDespesas(self.codigoDespesa)
        elif nodeName_ == 'fatorReducaoAcrescimo':
            fatorReducaoAcrescimo_ = child_.text
            fatorReducaoAcrescimo_ = self.gds_validate_string(fatorReducaoAcrescimo_, node, 'fatorReducaoAcrescimo')
            self.fatorReducaoAcrescimo = fatorReducaoAcrescimo_
# end class ct_procedimentoExecutado


class ct_procedimentoExecutadoOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimento=None, denteRegiao=None, denteFace=None, qtdProc=None, qtdUS=None, valorProc=None, valorFranquia=None, autorizado=None, dataRealizacao=None, extensiontype_=None):
        self.original_tagname_ = None
        self.procedimento = procedimento
        self.denteRegiao = denteRegiao
        self.denteFace = denteFace
        self.validate_dm_face(self.denteFace)
        self.qtdProc = qtdProc
        self.validate_st_numerico2(self.qtdProc)
        self.qtdUS = qtdUS
        self.valorProc = valorProc
        self.valorFranquia = valorFranquia
        self.autorizado = autorizado
        self.validate_dm_simNao(self.autorizado)
        if isinstance(dataRealizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRealizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRealizacao
        self.dataRealizacao = initvalue_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ct_procedimentoExecutadoOdonto.subclass:
            return ct_procedimentoExecutadoOdonto.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoExecutadoOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_denteRegiao(self): return self.denteRegiao
    def set_denteRegiao(self, denteRegiao): self.denteRegiao = denteRegiao
    def get_denteFace(self): return self.denteFace
    def set_denteFace(self, denteFace): self.denteFace = denteFace
    def get_qtdProc(self): return self.qtdProc
    def set_qtdProc(self, qtdProc): self.qtdProc = qtdProc
    def get_qtdUS(self): return self.qtdUS
    def set_qtdUS(self, qtdUS): self.qtdUS = qtdUS
    def get_valorProc(self): return self.valorProc
    def set_valorProc(self, valorProc): self.valorProc = valorProc
    def get_valorFranquia(self): return self.valorFranquia
    def set_valorFranquia(self, valorFranquia): self.valorFranquia = valorFranquia
    def get_autorizado(self): return self.autorizado
    def set_autorizado(self, autorizado): self.autorizado = autorizado
    def get_dataRealizacao(self): return self.dataRealizacao
    def set_dataRealizacao(self, dataRealizacao): self.dataRealizacao = dataRealizacao
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_dm_face(self, value):
        # Validate type dm_face, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_dm_face_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_dm_face_patterns_, ))
    validate_dm_face_patterns_ = [['^[OLMVDIP]{1,5}$']]
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.procedimento is not None or
            self.denteRegiao is not None or
            self.denteFace is not None or
            self.qtdProc is not None or
            self.qtdUS is not None or
            self.valorProc is not None or
            self.valorFranquia is not None or
            self.autorizado is not None or
            self.dataRealizacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoExecutadoOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoExecutadoOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoExecutadoOdonto'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.denteRegiao is not None:
            self.denteRegiao.export(outfile, level, namespace_, name_='denteRegiao', pretty_print=pretty_print)
        if self.denteFace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdenteFace>%s</%sdenteFace>%s' % (namespace_, self.gds_format_string(quote_xml(self.denteFace).encode(ExternalEncoding), input_name='denteFace'), namespace_, eol_))
        if self.qtdProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdProc>%s</%sqtdProc>%s' % (namespace_, self.gds_format_integer(self.qtdProc, input_name='qtdProc'), namespace_, eol_))
        if self.qtdUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdUS>%s</%sqtdUS>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdUS).encode(ExternalEncoding), input_name='qtdUS'), namespace_, eol_))
        if self.valorProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProc>%s</%svalorProc>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProc).encode(ExternalEncoding), input_name='valorProc'), namespace_, eol_))
        if self.valorFranquia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorFranquia>%s</%svalorFranquia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorFranquia).encode(ExternalEncoding), input_name='valorFranquia'), namespace_, eol_))
        if self.autorizado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sautorizado>%s</%sautorizado>%s' % (namespace_, self.gds_format_string(quote_xml(self.autorizado).encode(ExternalEncoding), input_name='autorizado'), namespace_, eol_))
        if self.dataRealizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRealizacao>%s</%sdataRealizacao>%s' % (namespace_, self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_procedimentoExecutadoOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteRegiao is not None:
            showIndent(outfile, level)
            outfile.write('denteRegiao=model_.denteRegiao(\n')
            self.denteRegiao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteFace is not None:
            showIndent(outfile, level)
            outfile.write('denteFace=%s,\n' % quote_python(self.denteFace).encode(ExternalEncoding))
        if self.qtdProc is not None:
            showIndent(outfile, level)
            outfile.write('qtdProc=%d,\n' % self.qtdProc)
        if self.qtdUS is not None:
            showIndent(outfile, level)
            outfile.write('qtdUS=%s,\n' % quote_python(self.qtdUS).encode(ExternalEncoding))
        if self.valorProc is not None:
            showIndent(outfile, level)
            outfile.write('valorProc=%s,\n' % quote_python(self.valorProc).encode(ExternalEncoding))
        if self.valorFranquia is not None:
            showIndent(outfile, level)
            outfile.write('valorFranquia=%s,\n' % quote_python(self.valorFranquia).encode(ExternalEncoding))
        if self.autorizado is not None:
            showIndent(outfile, level)
            outfile.write('autorizado=%s,\n' % quote_python(self.autorizado).encode(ExternalEncoding))
        if self.dataRealizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataRealizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'denteRegiao':
            obj_ = denteRegiao.factory()
            obj_.build(child_)
            self.denteRegiao = obj_
            obj_.original_tagname_ = 'denteRegiao'
        elif nodeName_ == 'denteFace':
            denteFace_ = child_.text
            denteFace_ = self.gds_validate_string(denteFace_, node, 'denteFace')
            self.denteFace = denteFace_
            # validate type dm_face
            self.validate_dm_face(self.denteFace)
        elif nodeName_ == 'qtdProc':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'qtdProc')
            self.qtdProc = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.qtdProc)
        elif nodeName_ == 'qtdUS':
            qtdUS_ = child_.text
            qtdUS_ = self.gds_validate_string(qtdUS_, node, 'qtdUS')
            self.qtdUS = qtdUS_
        elif nodeName_ == 'valorProc':
            valorProc_ = child_.text
            valorProc_ = self.gds_validate_string(valorProc_, node, 'valorProc')
            self.valorProc = valorProc_
        elif nodeName_ == 'valorFranquia':
            valorFranquia_ = child_.text
            valorFranquia_ = self.gds_validate_string(valorFranquia_, node, 'valorFranquia')
            self.valorFranquia = valorFranquia_
        elif nodeName_ == 'autorizado':
            autorizado_ = child_.text
            autorizado_ = self.gds_validate_string(autorizado_, node, 'autorizado')
            self.autorizado = autorizado_
            # validate type dm_simNao
            self.validate_dm_simNao(self.autorizado)
        elif nodeName_ == 'dataRealizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRealizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataRealizacao)
# end class ct_procedimentoExecutadoOdonto


class denteRegiao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codDente=None, codRegiao=None):
        self.original_tagname_ = None
        self.codDente = codDente
        self.validate_dm_dente(self.codDente)
        self.codRegiao = codRegiao
        self.validate_dm_regiao(self.codRegiao)
    def factory(*args_, **kwargs_):
        if denteRegiao.subclass:
            return denteRegiao.subclass(*args_, **kwargs_)
        else:
            return denteRegiao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codDente(self): return self.codDente
    def set_codDente(self, codDente): self.codDente = codDente
    def get_codRegiao(self): return self.codRegiao
    def set_codRegiao(self, codRegiao): self.codRegiao = codRegiao
    def validate_dm_dente(self, value):
        # Validate type dm_dente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38', '39', '41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '52', '53', '54', '55', '59', '61', '62', '63', '64', '65', '69', '71', '72', '73', '74', '75', '79', '81', '82', '83', '84', '85', '89']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_dente' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_dente' % {"value" : value.encode("utf-8")} )
    def validate_dm_regiao(self, value):
        # Validate type dm_regiao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AI', 'AS', 'HASD', 'HASE', 'HAID', 'HAIE', 'ASAI', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'LG', 'CL', 'AB', 'PA', 'MJ', 'PD', 'PM', 'RM', 'MA', 'GI', 'PT', 'TP', 'RIS', 'RCSD', 'RPSD', 'RCID', 'RMSD', 'RCSE', 'RPSE', 'RMSE', 'RII', 'RPID', 'RMID', 'RCIE', 'RPIE', 'RMIE', 'RMD', 'RME', 'RPD', 'RPE', 'RMPE', 'RMPD', 'SM', 'TU', 'SI', 'FLI', 'FLA', 'UV', 'PP', 'PI', 'LS', 'LI', 'RL', 'RP', 'RV', 'RSMD', 'RSME', 'RSL']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_regiao' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_regiao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codDente is not None or
            self.codRegiao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='denteRegiao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='denteRegiao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='denteRegiao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='denteRegiao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='denteRegiao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codDente is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodDente>%s</%scodDente>%s' % (namespace_, self.gds_format_string(quote_xml(self.codDente).encode(ExternalEncoding), input_name='codDente'), namespace_, eol_))
        if self.codRegiao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodRegiao>%s</%scodRegiao>%s' % (namespace_, self.gds_format_string(quote_xml(self.codRegiao).encode(ExternalEncoding), input_name='codRegiao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='denteRegiao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codDente is not None:
            showIndent(outfile, level)
            outfile.write('codDente=%s,\n' % quote_python(self.codDente).encode(ExternalEncoding))
        if self.codRegiao is not None:
            showIndent(outfile, level)
            outfile.write('codRegiao=%s,\n' % quote_python(self.codRegiao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codDente':
            codDente_ = child_.text
            codDente_ = self.gds_validate_string(codDente_, node, 'codDente')
            self.codDente = codDente_
            # validate type dm_dente
            self.validate_dm_dente(self.codDente)
        elif nodeName_ == 'codRegiao':
            codRegiao_ = child_.text
            codRegiao_ = self.gds_validate_string(codRegiao_, node, 'codRegiao')
            self.codRegiao = codRegiao_
            # validate type dm_regiao
            self.validate_dm_regiao(self.codRegiao)
# end class denteRegiao


class ct_procedimentoExecutadoOutras(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataExecucao=None, horaInicial=None, horaFinal=None, codigoTabela=None, codigoProcedimento=None, quantidadeExecutada=None, unidadeMedida=None, reducaoAcrescimo=None, valorUnitario=None, valorTotal=None, descricaoProcedimento=None, registroANVISA=None, codigoRefFabricante=None, autorizacaoFuncionamento=None):
        self.original_tagname_ = None
        if isinstance(dataExecucao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataExecucao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataExecucao
        self.dataExecucao = initvalue_
        if isinstance(horaInicial, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicial, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicial
        self.horaInicial = initvalue_
        if isinstance(horaFinal, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFinal, '%H:%M:%S').time()
        else:
            initvalue_ = horaFinal
        self.horaFinal = initvalue_
        self.codigoTabela = codigoTabela
        self.validate_dm_tabela(self.codigoTabela)
        self.codigoProcedimento = codigoProcedimento
        self.validate_st_texto10(self.codigoProcedimento)
        self.quantidadeExecutada = quantidadeExecutada
        self.unidadeMedida = unidadeMedida
        self.validate_dm_unidadeMedida(self.unidadeMedida)
        self.reducaoAcrescimo = reducaoAcrescimo
        self.valorUnitario = valorUnitario
        self.valorTotal = valorTotal
        self.descricaoProcedimento = descricaoProcedimento
        self.validate_st_texto150(self.descricaoProcedimento)
        self.registroANVISA = registroANVISA
        self.validate_st_texto15(self.registroANVISA)
        self.codigoRefFabricante = codigoRefFabricante
        self.validate_st_texto60(self.codigoRefFabricante)
        self.autorizacaoFuncionamento = autorizacaoFuncionamento
        self.validate_st_texto30(self.autorizacaoFuncionamento)
    def factory(*args_, **kwargs_):
        if ct_procedimentoExecutadoOutras.subclass:
            return ct_procedimentoExecutadoOutras.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoExecutadoOutras(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataExecucao(self): return self.dataExecucao
    def set_dataExecucao(self, dataExecucao): self.dataExecucao = dataExecucao
    def get_horaInicial(self): return self.horaInicial
    def set_horaInicial(self, horaInicial): self.horaInicial = horaInicial
    def get_horaFinal(self): return self.horaFinal
    def set_horaFinal(self, horaFinal): self.horaFinal = horaFinal
    def get_codigoTabela(self): return self.codigoTabela
    def set_codigoTabela(self, codigoTabela): self.codigoTabela = codigoTabela
    def get_codigoProcedimento(self): return self.codigoProcedimento
    def set_codigoProcedimento(self, codigoProcedimento): self.codigoProcedimento = codigoProcedimento
    def get_quantidadeExecutada(self): return self.quantidadeExecutada
    def set_quantidadeExecutada(self, quantidadeExecutada): self.quantidadeExecutada = quantidadeExecutada
    def get_unidadeMedida(self): return self.unidadeMedida
    def set_unidadeMedida(self, unidadeMedida): self.unidadeMedida = unidadeMedida
    def get_reducaoAcrescimo(self): return self.reducaoAcrescimo
    def set_reducaoAcrescimo(self, reducaoAcrescimo): self.reducaoAcrescimo = reducaoAcrescimo
    def get_valorUnitario(self): return self.valorUnitario
    def set_valorUnitario(self, valorUnitario): self.valorUnitario = valorUnitario
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_descricaoProcedimento(self): return self.descricaoProcedimento
    def set_descricaoProcedimento(self, descricaoProcedimento): self.descricaoProcedimento = descricaoProcedimento
    def get_registroANVISA(self): return self.registroANVISA
    def set_registroANVISA(self, registroANVISA): self.registroANVISA = registroANVISA
    def get_codigoRefFabricante(self): return self.codigoRefFabricante
    def set_codigoRefFabricante(self, codigoRefFabricante): self.codigoRefFabricante = codigoRefFabricante
    def get_autorizacaoFuncionamento(self): return self.autorizacaoFuncionamento
    def set_autorizacaoFuncionamento(self, autorizacaoFuncionamento): self.autorizacaoFuncionamento = autorizacaoFuncionamento
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tabela(self, value):
        # Validate type dm_tabela, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['18', '19', '20', '22', '90', '98', '00']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tabela' % {"value" : value.encode("utf-8")} )
    def validate_st_texto10(self, value):
        # Validate type st_texto10, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto10' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto10' % {"value" : value.encode("utf-8")} )
    def validate_dm_unidadeMedida(self, value):
        # Validate type dm_unidadeMedida, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_unidadeMedida' % {"value" : value.encode("utf-8")} )
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_unidadeMedida' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_st_texto60(self, value):
        # Validate type st_texto60, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto60' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto60' % {"value" : value.encode("utf-8")} )
    def validate_st_texto30(self, value):
        # Validate type st_texto30, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto30' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto30' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataExecucao is not None or
            self.horaInicial is not None or
            self.horaFinal is not None or
            self.codigoTabela is not None or
            self.codigoProcedimento is not None or
            self.quantidadeExecutada is not None or
            self.unidadeMedida is not None or
            self.reducaoAcrescimo is not None or
            self.valorUnitario is not None or
            self.valorTotal is not None or
            self.descricaoProcedimento is not None or
            self.registroANVISA is not None or
            self.codigoRefFabricante is not None or
            self.autorizacaoFuncionamento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoOutras', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoExecutadoOutras')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoExecutadoOutras', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoExecutadoOutras'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoOutras', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataExecucao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataExecucao>%s</%sdataExecucao>%s' % (namespace_, self.gds_format_date(self.dataExecucao, input_name='dataExecucao'), namespace_, eol_))
        if self.horaInicial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicial>%s</%shoraInicial>%s' % (namespace_, self.gds_format_time(self.horaInicial, input_name='horaInicial'), namespace_, eol_))
        if self.horaFinal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFinal>%s</%shoraFinal>%s' % (namespace_, self.gds_format_time(self.horaFinal, input_name='horaFinal'), namespace_, eol_))
        if self.codigoTabela is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoTabela>%s</%scodigoTabela>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoTabela).encode(ExternalEncoding), input_name='codigoTabela'), namespace_, eol_))
        if self.codigoProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoProcedimento>%s</%scodigoProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoProcedimento).encode(ExternalEncoding), input_name='codigoProcedimento'), namespace_, eol_))
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeExecutada>%s</%squantidadeExecutada>%s' % (namespace_, self.gds_format_string(quote_xml(self.quantidadeExecutada).encode(ExternalEncoding), input_name='quantidadeExecutada'), namespace_, eol_))
        if self.unidadeMedida is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunidadeMedida>%s</%sunidadeMedida>%s' % (namespace_, self.gds_format_string(quote_xml(self.unidadeMedida).encode(ExternalEncoding), input_name='unidadeMedida'), namespace_, eol_))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreducaoAcrescimo>%s</%sreducaoAcrescimo>%s' % (namespace_, self.gds_format_string(quote_xml(self.reducaoAcrescimo).encode(ExternalEncoding), input_name='reducaoAcrescimo'), namespace_, eol_))
        if self.valorUnitario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorUnitario>%s</%svalorUnitario>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorUnitario).encode(ExternalEncoding), input_name='valorUnitario'), namespace_, eol_))
        if self.valorTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotal>%s</%svalorTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotal).encode(ExternalEncoding), input_name='valorTotal'), namespace_, eol_))
        if self.descricaoProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricaoProcedimento>%s</%sdescricaoProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricaoProcedimento).encode(ExternalEncoding), input_name='descricaoProcedimento'), namespace_, eol_))
        if self.registroANVISA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANVISA>%s</%sregistroANVISA>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANVISA).encode(ExternalEncoding), input_name='registroANVISA'), namespace_, eol_))
        if self.codigoRefFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoRefFabricante>%s</%scodigoRefFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoRefFabricante).encode(ExternalEncoding), input_name='codigoRefFabricante'), namespace_, eol_))
        if self.autorizacaoFuncionamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sautorizacaoFuncionamento>%s</%sautorizacaoFuncionamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.autorizacaoFuncionamento).encode(ExternalEncoding), input_name='autorizacaoFuncionamento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_procedimentoExecutadoOutras'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataExecucao is not None:
            showIndent(outfile, level)
            outfile.write('dataExecucao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataExecucao, input_name='dataExecucao'))
        if self.horaInicial is not None:
            showIndent(outfile, level)
            outfile.write('horaInicial=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicial, input_name='horaInicial'))
        if self.horaFinal is not None:
            showIndent(outfile, level)
            outfile.write('horaFinal=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFinal, input_name='horaFinal'))
        if self.codigoTabela is not None:
            showIndent(outfile, level)
            outfile.write('codigoTabela=%s,\n' % quote_python(self.codigoTabela).encode(ExternalEncoding))
        if self.codigoProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('codigoProcedimento=%s,\n' % quote_python(self.codigoProcedimento).encode(ExternalEncoding))
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeExecutada=%s,\n' % quote_python(self.quantidadeExecutada).encode(ExternalEncoding))
        if self.unidadeMedida is not None:
            showIndent(outfile, level)
            outfile.write('unidadeMedida=%s,\n' % quote_python(self.unidadeMedida).encode(ExternalEncoding))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level)
            outfile.write('reducaoAcrescimo=%s,\n' % quote_python(self.reducaoAcrescimo).encode(ExternalEncoding))
        if self.valorUnitario is not None:
            showIndent(outfile, level)
            outfile.write('valorUnitario=%s,\n' % quote_python(self.valorUnitario).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=%s,\n' % quote_python(self.valorTotal).encode(ExternalEncoding))
        if self.descricaoProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('descricaoProcedimento=%s,\n' % quote_python(self.descricaoProcedimento).encode(ExternalEncoding))
        if self.registroANVISA is not None:
            showIndent(outfile, level)
            outfile.write('registroANVISA=%s,\n' % quote_python(self.registroANVISA).encode(ExternalEncoding))
        if self.codigoRefFabricante is not None:
            showIndent(outfile, level)
            outfile.write('codigoRefFabricante=%s,\n' % quote_python(self.codigoRefFabricante).encode(ExternalEncoding))
        if self.autorizacaoFuncionamento is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoFuncionamento=%s,\n' % quote_python(self.autorizacaoFuncionamento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataExecucao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataExecucao = dval_
            # validate type st_data
            self.validate_st_data(self.dataExecucao)
        elif nodeName_ == 'horaInicial':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicial = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicial)
        elif nodeName_ == 'horaFinal':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFinal = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFinal)
        elif nodeName_ == 'codigoTabela':
            codigoTabela_ = child_.text
            codigoTabela_ = self.gds_validate_string(codigoTabela_, node, 'codigoTabela')
            self.codigoTabela = codigoTabela_
            # validate type dm_tabela
            self.validate_dm_tabela(self.codigoTabela)
        elif nodeName_ == 'codigoProcedimento':
            codigoProcedimento_ = child_.text
            codigoProcedimento_ = self.gds_validate_string(codigoProcedimento_, node, 'codigoProcedimento')
            self.codigoProcedimento = codigoProcedimento_
            # validate type st_texto10
            self.validate_st_texto10(self.codigoProcedimento)
        elif nodeName_ == 'quantidadeExecutada':
            quantidadeExecutada_ = child_.text
            quantidadeExecutada_ = self.gds_validate_string(quantidadeExecutada_, node, 'quantidadeExecutada')
            self.quantidadeExecutada = quantidadeExecutada_
        elif nodeName_ == 'unidadeMedida':
            unidadeMedida_ = child_.text
            unidadeMedida_ = self.gds_validate_string(unidadeMedida_, node, 'unidadeMedida')
            self.unidadeMedida = unidadeMedida_
            # validate type dm_unidadeMedida
            self.validate_dm_unidadeMedida(self.unidadeMedida)
        elif nodeName_ == 'reducaoAcrescimo':
            reducaoAcrescimo_ = child_.text
            reducaoAcrescimo_ = self.gds_validate_string(reducaoAcrescimo_, node, 'reducaoAcrescimo')
            self.reducaoAcrescimo = reducaoAcrescimo_
        elif nodeName_ == 'valorUnitario':
            valorUnitario_ = child_.text
            valorUnitario_ = self.gds_validate_string(valorUnitario_, node, 'valorUnitario')
            self.valorUnitario = valorUnitario_
        elif nodeName_ == 'valorTotal':
            valorTotal_ = child_.text
            valorTotal_ = self.gds_validate_string(valorTotal_, node, 'valorTotal')
            self.valorTotal = valorTotal_
        elif nodeName_ == 'descricaoProcedimento':
            descricaoProcedimento_ = child_.text
            descricaoProcedimento_ = self.gds_validate_string(descricaoProcedimento_, node, 'descricaoProcedimento')
            self.descricaoProcedimento = descricaoProcedimento_
            # validate type st_texto150
            self.validate_st_texto150(self.descricaoProcedimento)
        elif nodeName_ == 'registroANVISA':
            registroANVISA_ = child_.text
            registroANVISA_ = self.gds_validate_string(registroANVISA_, node, 'registroANVISA')
            self.registroANVISA = registroANVISA_
            # validate type st_texto15
            self.validate_st_texto15(self.registroANVISA)
        elif nodeName_ == 'codigoRefFabricante':
            codigoRefFabricante_ = child_.text
            codigoRefFabricante_ = self.gds_validate_string(codigoRefFabricante_, node, 'codigoRefFabricante')
            self.codigoRefFabricante = codigoRefFabricante_
            # validate type st_texto60
            self.validate_st_texto60(self.codigoRefFabricante)
        elif nodeName_ == 'autorizacaoFuncionamento':
            autorizacaoFuncionamento_ = child_.text
            autorizacaoFuncionamento_ = self.gds_validate_string(autorizacaoFuncionamento_, node, 'autorizacaoFuncionamento')
            self.autorizacaoFuncionamento = autorizacaoFuncionamento_
            # validate type st_texto30
            self.validate_st_texto30(self.autorizacaoFuncionamento)
# end class ct_procedimentoExecutadoOutras


class ct_procedimentoExecutadoInt(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataExecucao=None, horaInicial=None, horaFinal=None, procedimento=None, quantidadeExecutada=None, viaAcesso=None, tecnicaUtilizada=None, reducaoAcrescimo=None, valorUnitario=None, valorTotal=None, identEquipe=None):
        self.original_tagname_ = None
        if isinstance(dataExecucao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataExecucao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataExecucao
        self.dataExecucao = initvalue_
        if isinstance(horaInicial, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicial, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicial
        self.horaInicial = initvalue_
        if isinstance(horaFinal, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFinal, '%H:%M:%S').time()
        else:
            initvalue_ = horaFinal
        self.horaFinal = initvalue_
        self.procedimento = procedimento
        self.quantidadeExecutada = quantidadeExecutada
        self.validate_st_numerico3(self.quantidadeExecutada)
        self.viaAcesso = viaAcesso
        self.validate_dm_viaDeAcesso(self.viaAcesso)
        self.tecnicaUtilizada = tecnicaUtilizada
        self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        self.reducaoAcrescimo = reducaoAcrescimo
        self.valorUnitario = valorUnitario
        self.valorTotal = valorTotal
        if identEquipe is None:
            self.identEquipe = []
        else:
            self.identEquipe = identEquipe
    def factory(*args_, **kwargs_):
        if ct_procedimentoExecutadoInt.subclass:
            return ct_procedimentoExecutadoInt.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoExecutadoInt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataExecucao(self): return self.dataExecucao
    def set_dataExecucao(self, dataExecucao): self.dataExecucao = dataExecucao
    def get_horaInicial(self): return self.horaInicial
    def set_horaInicial(self, horaInicial): self.horaInicial = horaInicial
    def get_horaFinal(self): return self.horaFinal
    def set_horaFinal(self, horaFinal): self.horaFinal = horaFinal
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_quantidadeExecutada(self): return self.quantidadeExecutada
    def set_quantidadeExecutada(self, quantidadeExecutada): self.quantidadeExecutada = quantidadeExecutada
    def get_viaAcesso(self): return self.viaAcesso
    def set_viaAcesso(self, viaAcesso): self.viaAcesso = viaAcesso
    def get_tecnicaUtilizada(self): return self.tecnicaUtilizada
    def set_tecnicaUtilizada(self, tecnicaUtilizada): self.tecnicaUtilizada = tecnicaUtilizada
    def get_reducaoAcrescimo(self): return self.reducaoAcrescimo
    def set_reducaoAcrescimo(self, reducaoAcrescimo): self.reducaoAcrescimo = reducaoAcrescimo
    def get_valorUnitario(self): return self.valorUnitario
    def set_valorUnitario(self, valorUnitario): self.valorUnitario = valorUnitario
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_identEquipe(self): return self.identEquipe
    def set_identEquipe(self, identEquipe): self.identEquipe = identEquipe
    def add_identEquipe(self, value): self.identEquipe.append(value)
    def insert_identEquipe_at(self, index, value): self.identEquipe.insert(index, value)
    def replace_identEquipe_at(self, index, value): self.identEquipe[index] = value
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_viaDeAcesso(self, value):
        # Validate type dm_viaDeAcesso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
    def validate_dm_tecnicaUtilizada(self, value):
        # Validate type dm_tecnicaUtilizada, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tecnicaUtilizada' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataExecucao is not None or
            self.horaInicial is not None or
            self.horaFinal is not None or
            self.procedimento is not None or
            self.quantidadeExecutada is not None or
            self.viaAcesso is not None or
            self.tecnicaUtilizada is not None or
            self.reducaoAcrescimo is not None or
            self.valorUnitario is not None or
            self.valorTotal is not None or
            self.identEquipe
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoInt', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoExecutadoInt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoExecutadoInt', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoExecutadoInt'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoInt', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataExecucao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataExecucao>%s</%sdataExecucao>%s' % (namespace_, self.gds_format_date(self.dataExecucao, input_name='dataExecucao'), namespace_, eol_))
        if self.horaInicial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicial>%s</%shoraInicial>%s' % (namespace_, self.gds_format_time(self.horaInicial, input_name='horaInicial'), namespace_, eol_))
        if self.horaFinal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFinal>%s</%shoraFinal>%s' % (namespace_, self.gds_format_time(self.horaFinal, input_name='horaFinal'), namespace_, eol_))
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeExecutada>%s</%squantidadeExecutada>%s' % (namespace_, self.gds_format_integer(self.quantidadeExecutada, input_name='quantidadeExecutada'), namespace_, eol_))
        if self.viaAcesso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sviaAcesso>%s</%sviaAcesso>%s' % (namespace_, self.gds_format_string(quote_xml(self.viaAcesso).encode(ExternalEncoding), input_name='viaAcesso'), namespace_, eol_))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stecnicaUtilizada>%s</%stecnicaUtilizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.tecnicaUtilizada).encode(ExternalEncoding), input_name='tecnicaUtilizada'), namespace_, eol_))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreducaoAcrescimo>%s</%sreducaoAcrescimo>%s' % (namespace_, self.gds_format_string(quote_xml(self.reducaoAcrescimo).encode(ExternalEncoding), input_name='reducaoAcrescimo'), namespace_, eol_))
        if self.valorUnitario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorUnitario>%s</%svalorUnitario>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorUnitario).encode(ExternalEncoding), input_name='valorUnitario'), namespace_, eol_))
        if self.valorTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotal>%s</%svalorTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotal).encode(ExternalEncoding), input_name='valorTotal'), namespace_, eol_))
        for identEquipe_ in self.identEquipe:
            identEquipe_.export(outfile, level, namespace_, name_='identEquipe', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_procedimentoExecutadoInt'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataExecucao is not None:
            showIndent(outfile, level)
            outfile.write('dataExecucao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataExecucao, input_name='dataExecucao'))
        if self.horaInicial is not None:
            showIndent(outfile, level)
            outfile.write('horaInicial=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicial, input_name='horaInicial'))
        if self.horaFinal is not None:
            showIndent(outfile, level)
            outfile.write('horaFinal=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFinal, input_name='horaFinal'))
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeExecutada=%d,\n' % self.quantidadeExecutada)
        if self.viaAcesso is not None:
            showIndent(outfile, level)
            outfile.write('viaAcesso=%s,\n' % quote_python(self.viaAcesso).encode(ExternalEncoding))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level)
            outfile.write('tecnicaUtilizada=%s,\n' % quote_python(self.tecnicaUtilizada).encode(ExternalEncoding))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level)
            outfile.write('reducaoAcrescimo=%s,\n' % quote_python(self.reducaoAcrescimo).encode(ExternalEncoding))
        if self.valorUnitario is not None:
            showIndent(outfile, level)
            outfile.write('valorUnitario=%s,\n' % quote_python(self.valorUnitario).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=%s,\n' % quote_python(self.valorTotal).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('identEquipe=[\n')
        level += 1
        for identEquipe_ in self.identEquipe:
            showIndent(outfile, level)
            outfile.write('model_.identEquipe(\n')
            identEquipe_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataExecucao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataExecucao = dval_
            # validate type st_data
            self.validate_st_data(self.dataExecucao)
        elif nodeName_ == 'horaInicial':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicial = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicial)
        elif nodeName_ == 'horaFinal':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFinal = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFinal)
        elif nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'quantidadeExecutada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeExecutada')
            self.quantidadeExecutada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeExecutada)
        elif nodeName_ == 'viaAcesso':
            viaAcesso_ = child_.text
            viaAcesso_ = self.gds_validate_string(viaAcesso_, node, 'viaAcesso')
            self.viaAcesso = viaAcesso_
            # validate type dm_viaDeAcesso
            self.validate_dm_viaDeAcesso(self.viaAcesso)
        elif nodeName_ == 'tecnicaUtilizada':
            tecnicaUtilizada_ = child_.text
            tecnicaUtilizada_ = self.gds_validate_string(tecnicaUtilizada_, node, 'tecnicaUtilizada')
            self.tecnicaUtilizada = tecnicaUtilizada_
            # validate type dm_tecnicaUtilizada
            self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        elif nodeName_ == 'reducaoAcrescimo':
            reducaoAcrescimo_ = child_.text
            reducaoAcrescimo_ = self.gds_validate_string(reducaoAcrescimo_, node, 'reducaoAcrescimo')
            self.reducaoAcrescimo = reducaoAcrescimo_
        elif nodeName_ == 'valorUnitario':
            valorUnitario_ = child_.text
            valorUnitario_ = self.gds_validate_string(valorUnitario_, node, 'valorUnitario')
            self.valorUnitario = valorUnitario_
        elif nodeName_ == 'valorTotal':
            valorTotal_ = child_.text
            valorTotal_ = self.gds_validate_string(valorTotal_, node, 'valorTotal')
            self.valorTotal = valorTotal_
        elif nodeName_ == 'identEquipe':
            obj_ = identEquipe.factory()
            obj_.build(child_)
            self.identEquipe.append(obj_)
            obj_.original_tagname_ = 'identEquipe'
# end class ct_procedimentoExecutadoInt


class identEquipe(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoEquipe=None):
        self.original_tagname_ = None
        self.identificacaoEquipe = identificacaoEquipe
    def factory(*args_, **kwargs_):
        if identEquipe.subclass:
            return identEquipe.subclass(*args_, **kwargs_)
        else:
            return identEquipe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoEquipe(self): return self.identificacaoEquipe
    def set_identificacaoEquipe(self, identificacaoEquipe): self.identificacaoEquipe = identificacaoEquipe
    def hasContent_(self):
        if (
            self.identificacaoEquipe is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='identEquipe', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identEquipe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='identEquipe', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='identEquipe'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='identEquipe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoEquipe is not None:
            self.identificacaoEquipe.export(outfile, level, namespace_, name_='identificacaoEquipe', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='identEquipe'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoEquipe is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoEquipe=model_.ct_identEquipe(\n')
            self.identificacaoEquipe.exportLiteral(outfile, level, name_='identificacaoEquipe')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoEquipe':
            obj_ = ct_identEquipe.factory()
            obj_.build(child_)
            self.identificacaoEquipe = obj_
            obj_.original_tagname_ = 'identificacaoEquipe'
# end class identEquipe


class ct_procedimentoExecutadoHonorIndiv(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataExecucao=None, horaInicial=None, horaFinal=None, procedimento=None, quantidadeExecutada=None, viaAcesso=None, tecnicaUtilizada=None, reducaoAcrescimo=None, valorUnitario=None, valorTotal=None, profissionais=None):
        self.original_tagname_ = None
        if isinstance(dataExecucao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataExecucao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataExecucao
        self.dataExecucao = initvalue_
        if isinstance(horaInicial, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicial, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicial
        self.horaInicial = initvalue_
        if isinstance(horaFinal, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFinal, '%H:%M:%S').time()
        else:
            initvalue_ = horaFinal
        self.horaFinal = initvalue_
        self.procedimento = procedimento
        self.quantidadeExecutada = quantidadeExecutada
        self.validate_st_numerico3(self.quantidadeExecutada)
        self.viaAcesso = viaAcesso
        self.validate_dm_viaDeAcesso(self.viaAcesso)
        self.tecnicaUtilizada = tecnicaUtilizada
        self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        self.reducaoAcrescimo = reducaoAcrescimo
        self.valorUnitario = valorUnitario
        self.valorTotal = valorTotal
        if profissionais is None:
            self.profissionais = []
        else:
            self.profissionais = profissionais
    def factory(*args_, **kwargs_):
        if ct_procedimentoExecutadoHonorIndiv.subclass:
            return ct_procedimentoExecutadoHonorIndiv.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoExecutadoHonorIndiv(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataExecucao(self): return self.dataExecucao
    def set_dataExecucao(self, dataExecucao): self.dataExecucao = dataExecucao
    def get_horaInicial(self): return self.horaInicial
    def set_horaInicial(self, horaInicial): self.horaInicial = horaInicial
    def get_horaFinal(self): return self.horaFinal
    def set_horaFinal(self, horaFinal): self.horaFinal = horaFinal
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_quantidadeExecutada(self): return self.quantidadeExecutada
    def set_quantidadeExecutada(self, quantidadeExecutada): self.quantidadeExecutada = quantidadeExecutada
    def get_viaAcesso(self): return self.viaAcesso
    def set_viaAcesso(self, viaAcesso): self.viaAcesso = viaAcesso
    def get_tecnicaUtilizada(self): return self.tecnicaUtilizada
    def set_tecnicaUtilizada(self, tecnicaUtilizada): self.tecnicaUtilizada = tecnicaUtilizada
    def get_reducaoAcrescimo(self): return self.reducaoAcrescimo
    def set_reducaoAcrescimo(self, reducaoAcrescimo): self.reducaoAcrescimo = reducaoAcrescimo
    def get_valorUnitario(self): return self.valorUnitario
    def set_valorUnitario(self, valorUnitario): self.valorUnitario = valorUnitario
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_profissionais(self): return self.profissionais
    def set_profissionais(self, profissionais): self.profissionais = profissionais
    def add_profissionais(self, value): self.profissionais.append(value)
    def insert_profissionais_at(self, index, value): self.profissionais.insert(index, value)
    def replace_profissionais_at(self, index, value): self.profissionais[index] = value
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_viaDeAcesso(self, value):
        # Validate type dm_viaDeAcesso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
    def validate_dm_tecnicaUtilizada(self, value):
        # Validate type dm_tecnicaUtilizada, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tecnicaUtilizada' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataExecucao is not None or
            self.horaInicial is not None or
            self.horaFinal is not None or
            self.procedimento is not None or
            self.quantidadeExecutada is not None or
            self.viaAcesso is not None or
            self.tecnicaUtilizada is not None or
            self.reducaoAcrescimo is not None or
            self.valorUnitario is not None or
            self.valorTotal is not None or
            self.profissionais
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoHonorIndiv', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoExecutadoHonorIndiv')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoExecutadoHonorIndiv', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoExecutadoHonorIndiv'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoHonorIndiv', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataExecucao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataExecucao>%s</%sdataExecucao>%s' % (namespace_, self.gds_format_date(self.dataExecucao, input_name='dataExecucao'), namespace_, eol_))
        if self.horaInicial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicial>%s</%shoraInicial>%s' % (namespace_, self.gds_format_time(self.horaInicial, input_name='horaInicial'), namespace_, eol_))
        if self.horaFinal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFinal>%s</%shoraFinal>%s' % (namespace_, self.gds_format_time(self.horaFinal, input_name='horaFinal'), namespace_, eol_))
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeExecutada>%s</%squantidadeExecutada>%s' % (namespace_, self.gds_format_integer(self.quantidadeExecutada, input_name='quantidadeExecutada'), namespace_, eol_))
        if self.viaAcesso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sviaAcesso>%s</%sviaAcesso>%s' % (namespace_, self.gds_format_string(quote_xml(self.viaAcesso).encode(ExternalEncoding), input_name='viaAcesso'), namespace_, eol_))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stecnicaUtilizada>%s</%stecnicaUtilizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.tecnicaUtilizada).encode(ExternalEncoding), input_name='tecnicaUtilizada'), namespace_, eol_))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreducaoAcrescimo>%s</%sreducaoAcrescimo>%s' % (namespace_, self.gds_format_string(quote_xml(self.reducaoAcrescimo).encode(ExternalEncoding), input_name='reducaoAcrescimo'), namespace_, eol_))
        if self.valorUnitario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorUnitario>%s</%svalorUnitario>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorUnitario).encode(ExternalEncoding), input_name='valorUnitario'), namespace_, eol_))
        if self.valorTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotal>%s</%svalorTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotal).encode(ExternalEncoding), input_name='valorTotal'), namespace_, eol_))
        for profissionais_ in self.profissionais:
            profissionais_.export(outfile, level, namespace_, name_='profissionais', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_procedimentoExecutadoHonorIndiv'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataExecucao is not None:
            showIndent(outfile, level)
            outfile.write('dataExecucao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataExecucao, input_name='dataExecucao'))
        if self.horaInicial is not None:
            showIndent(outfile, level)
            outfile.write('horaInicial=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicial, input_name='horaInicial'))
        if self.horaFinal is not None:
            showIndent(outfile, level)
            outfile.write('horaFinal=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFinal, input_name='horaFinal'))
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeExecutada=%d,\n' % self.quantidadeExecutada)
        if self.viaAcesso is not None:
            showIndent(outfile, level)
            outfile.write('viaAcesso=%s,\n' % quote_python(self.viaAcesso).encode(ExternalEncoding))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level)
            outfile.write('tecnicaUtilizada=%s,\n' % quote_python(self.tecnicaUtilizada).encode(ExternalEncoding))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level)
            outfile.write('reducaoAcrescimo=%s,\n' % quote_python(self.reducaoAcrescimo).encode(ExternalEncoding))
        if self.valorUnitario is not None:
            showIndent(outfile, level)
            outfile.write('valorUnitario=%s,\n' % quote_python(self.valorUnitario).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=%s,\n' % quote_python(self.valorTotal).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('profissionais=[\n')
        level += 1
        for profissionais_ in self.profissionais:
            showIndent(outfile, level)
            outfile.write('model_.profissionais(\n')
            profissionais_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataExecucao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataExecucao = dval_
            # validate type st_data
            self.validate_st_data(self.dataExecucao)
        elif nodeName_ == 'horaInicial':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicial = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicial)
        elif nodeName_ == 'horaFinal':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFinal = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFinal)
        elif nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'quantidadeExecutada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeExecutada')
            self.quantidadeExecutada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeExecutada)
        elif nodeName_ == 'viaAcesso':
            viaAcesso_ = child_.text
            viaAcesso_ = self.gds_validate_string(viaAcesso_, node, 'viaAcesso')
            self.viaAcesso = viaAcesso_
            # validate type dm_viaDeAcesso
            self.validate_dm_viaDeAcesso(self.viaAcesso)
        elif nodeName_ == 'tecnicaUtilizada':
            tecnicaUtilizada_ = child_.text
            tecnicaUtilizada_ = self.gds_validate_string(tecnicaUtilizada_, node, 'tecnicaUtilizada')
            self.tecnicaUtilizada = tecnicaUtilizada_
            # validate type dm_tecnicaUtilizada
            self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        elif nodeName_ == 'reducaoAcrescimo':
            reducaoAcrescimo_ = child_.text
            reducaoAcrescimo_ = self.gds_validate_string(reducaoAcrescimo_, node, 'reducaoAcrescimo')
            self.reducaoAcrescimo = reducaoAcrescimo_
        elif nodeName_ == 'valorUnitario':
            valorUnitario_ = child_.text
            valorUnitario_ = self.gds_validate_string(valorUnitario_, node, 'valorUnitario')
            self.valorUnitario = valorUnitario_
        elif nodeName_ == 'valorTotal':
            valorTotal_ = child_.text
            valorTotal_ = self.gds_validate_string(valorTotal_, node, 'valorTotal')
            self.valorTotal = valorTotal_
        elif nodeName_ == 'profissionais':
            obj_ = profissionais.factory()
            obj_.build(child_)
            self.profissionais.append(obj_)
            obj_.original_tagname_ = 'profissionais'
# end class ct_procedimentoExecutadoHonorIndiv


class profissionais(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, grauParticipacao=None, codProfissional=None, nomeProfissional=None, conselhoProfissional=None, numeroConselhoProfissional=None, UF=None, CBO=None):
        self.original_tagname_ = None
        self.grauParticipacao = grauParticipacao
        self.validate_dm_grauPart(self.grauParticipacao)
        self.codProfissional = codProfissional
        self.nomeProfissional = nomeProfissional
        self.validate_st_texto70(self.nomeProfissional)
        self.conselhoProfissional = conselhoProfissional
        self.validate_dm_conselhoProfissional(self.conselhoProfissional)
        self.numeroConselhoProfissional = numeroConselhoProfissional
        self.validate_st_texto15(self.numeroConselhoProfissional)
        self.UF = UF
        self.validate_dm_UF(self.UF)
        self.CBO = CBO
        self.validate_dm_CBOS(self.CBO)
    def factory(*args_, **kwargs_):
        if profissionais.subclass:
            return profissionais.subclass(*args_, **kwargs_)
        else:
            return profissionais(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_grauParticipacao(self): return self.grauParticipacao
    def set_grauParticipacao(self, grauParticipacao): self.grauParticipacao = grauParticipacao
    def get_codProfissional(self): return self.codProfissional
    def set_codProfissional(self, codProfissional): self.codProfissional = codProfissional
    def get_nomeProfissional(self): return self.nomeProfissional
    def set_nomeProfissional(self, nomeProfissional): self.nomeProfissional = nomeProfissional
    def get_conselhoProfissional(self): return self.conselhoProfissional
    def set_conselhoProfissional(self, conselhoProfissional): self.conselhoProfissional = conselhoProfissional
    def get_numeroConselhoProfissional(self): return self.numeroConselhoProfissional
    def set_numeroConselhoProfissional(self, numeroConselhoProfissional): self.numeroConselhoProfissional = numeroConselhoProfissional
    def get_UF(self): return self.UF
    def set_UF(self, UF): self.UF = UF
    def get_CBO(self): return self.CBO
    def set_CBO(self, CBO): self.CBO = CBO
    def validate_dm_grauPart(self, value):
        # Validate type dm_grauPart, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_grauPart' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_conselhoProfissional(self, value):
        # Validate type dm_conselhoProfissional, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_conselhoProfissional' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_UF(self, value):
        # Validate type dm_UF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '35', '41', '42', '43', '50', '51', '52', '53', '98']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_UF' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_UF' % {"value" : value.encode("utf-8")} )
    def validate_dm_CBOS(self, value):
        # Validate type dm_CBOS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['201115', '203015', '213150', '225105', '225110', '225148', '225185', '225115', '225120', '225210', '225215', '225220', '225225', '225230', '225235', '225240', '225305', '225350', '225125', '225130', '225135', '225140', '225310', '225145', '225150', '225315', '225320', '225155', '225160', '225245', '225165', '225170', '225175', '225180', '225250', '225190', '225195', '225103', '225106', '225255', '225109', '225260', '225112', '225118', '225265', '225121', '225270', '225275', '225325', '225124', '225127', '225280', '225133', '225330', '225136', '225139', '225285', '223204', '223208', '223212', '223216', '223220', '223224', '223228', '223232', '223236', '223240', '223244', '223248', '223252', '223256', '223260', '223264', '223268', '223272', '223505', '223605', '223910', '223905', '223710', '223810', '239425', '251510', '251545', '251550', '251605', '322205', '322220', '322225', '322230', '516210', '225121', '225325', '223276', '223280', '223284', '223288', '223293', '225122', '225142', '225151', '225203', '225290', '225295', '225335', '225340', '225345', '999999']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_CBOS' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.grauParticipacao is not None or
            self.codProfissional is not None or
            self.nomeProfissional is not None or
            self.conselhoProfissional is not None or
            self.numeroConselhoProfissional is not None or
            self.UF is not None or
            self.CBO is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='profissionais', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='profissionais')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='profissionais', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='profissionais'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='profissionais', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.grauParticipacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrauParticipacao>%s</%sgrauParticipacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.grauParticipacao).encode(ExternalEncoding), input_name='grauParticipacao'), namespace_, eol_))
        if self.codProfissional is not None:
            self.codProfissional.export(outfile, level, namespace_, name_='codProfissional', pretty_print=pretty_print)
        if self.nomeProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProfissional>%s</%snomeProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProfissional).encode(ExternalEncoding), input_name='nomeProfissional'), namespace_, eol_))
        if self.conselhoProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sconselhoProfissional>%s</%sconselhoProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.conselhoProfissional).encode(ExternalEncoding), input_name='conselhoProfissional'), namespace_, eol_))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroConselhoProfissional>%s</%snumeroConselhoProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroConselhoProfissional).encode(ExternalEncoding), input_name='numeroConselhoProfissional'), namespace_, eol_))
        if self.UF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUF>%s</%sUF>%s' % (namespace_, self.gds_format_string(quote_xml(self.UF).encode(ExternalEncoding), input_name='UF'), namespace_, eol_))
        if self.CBO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCBO>%s</%sCBO>%s' % (namespace_, self.gds_format_string(quote_xml(self.CBO).encode(ExternalEncoding), input_name='CBO'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='profissionais'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.grauParticipacao is not None:
            showIndent(outfile, level)
            outfile.write('grauParticipacao=%s,\n' % quote_python(self.grauParticipacao).encode(ExternalEncoding))
        if self.codProfissional is not None:
            showIndent(outfile, level)
            outfile.write('codProfissional=model_.codProfissional(\n')
            self.codProfissional.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nomeProfissional is not None:
            showIndent(outfile, level)
            outfile.write('nomeProfissional=%s,\n' % quote_python(self.nomeProfissional).encode(ExternalEncoding))
        if self.conselhoProfissional is not None:
            showIndent(outfile, level)
            outfile.write('conselhoProfissional=%s,\n' % quote_python(self.conselhoProfissional).encode(ExternalEncoding))
        if self.numeroConselhoProfissional is not None:
            showIndent(outfile, level)
            outfile.write('numeroConselhoProfissional=%s,\n' % quote_python(self.numeroConselhoProfissional).encode(ExternalEncoding))
        if self.UF is not None:
            showIndent(outfile, level)
            outfile.write('UF=%s,\n' % quote_python(self.UF).encode(ExternalEncoding))
        if self.CBO is not None:
            showIndent(outfile, level)
            outfile.write('CBO=%s,\n' % quote_python(self.CBO).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'grauParticipacao':
            grauParticipacao_ = child_.text
            grauParticipacao_ = self.gds_validate_string(grauParticipacao_, node, 'grauParticipacao')
            self.grauParticipacao = grauParticipacao_
            # validate type dm_grauPart
            self.validate_dm_grauPart(self.grauParticipacao)
        elif nodeName_ == 'codProfissional':
            obj_ = codProfissional.factory()
            obj_.build(child_)
            self.codProfissional = obj_
            obj_.original_tagname_ = 'codProfissional'
        elif nodeName_ == 'nomeProfissional':
            nomeProfissional_ = child_.text
            nomeProfissional_ = self.gds_validate_string(nomeProfissional_, node, 'nomeProfissional')
            self.nomeProfissional = nomeProfissional_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProfissional)
        elif nodeName_ == 'conselhoProfissional':
            conselhoProfissional_ = child_.text
            conselhoProfissional_ = self.gds_validate_string(conselhoProfissional_, node, 'conselhoProfissional')
            self.conselhoProfissional = conselhoProfissional_
            # validate type dm_conselhoProfissional
            self.validate_dm_conselhoProfissional(self.conselhoProfissional)
        elif nodeName_ == 'numeroConselhoProfissional':
            numeroConselhoProfissional_ = child_.text
            numeroConselhoProfissional_ = self.gds_validate_string(numeroConselhoProfissional_, node, 'numeroConselhoProfissional')
            self.numeroConselhoProfissional = numeroConselhoProfissional_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroConselhoProfissional)
        elif nodeName_ == 'UF':
            UF_ = child_.text
            UF_ = self.gds_validate_string(UF_, node, 'UF')
            self.UF = UF_
            # validate type dm_UF
            self.validate_dm_UF(self.UF)
        elif nodeName_ == 'CBO':
            CBO_ = child_.text
            CBO_ = self.gds_validate_string(CBO_, node, 'CBO')
            self.CBO = CBO_
            # validate type dm_CBOS
            self.validate_dm_CBOS(self.CBO)
# end class profissionais


class ct_procedimentoExecutadoSadt(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataExecucao=None, horaInicial=None, horaFinal=None, procedimento=None, quantidadeExecutada=None, viaAcesso=None, tecnicaUtilizada=None, reducaoAcrescimo=None, valorUnitario=None, valorTotal=None, equipeSadt=None):
        self.original_tagname_ = None
        if isinstance(dataExecucao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataExecucao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataExecucao
        self.dataExecucao = initvalue_
        if isinstance(horaInicial, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicial, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicial
        self.horaInicial = initvalue_
        if isinstance(horaFinal, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFinal, '%H:%M:%S').time()
        else:
            initvalue_ = horaFinal
        self.horaFinal = initvalue_
        self.procedimento = procedimento
        self.quantidadeExecutada = quantidadeExecutada
        self.validate_st_numerico3(self.quantidadeExecutada)
        self.viaAcesso = viaAcesso
        self.validate_dm_viaDeAcesso(self.viaAcesso)
        self.tecnicaUtilizada = tecnicaUtilizada
        self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        self.reducaoAcrescimo = reducaoAcrescimo
        self.valorUnitario = valorUnitario
        self.valorTotal = valorTotal
        if equipeSadt is None:
            self.equipeSadt = []
        else:
            self.equipeSadt = equipeSadt
    def factory(*args_, **kwargs_):
        if ct_procedimentoExecutadoSadt.subclass:
            return ct_procedimentoExecutadoSadt.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoExecutadoSadt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataExecucao(self): return self.dataExecucao
    def set_dataExecucao(self, dataExecucao): self.dataExecucao = dataExecucao
    def get_horaInicial(self): return self.horaInicial
    def set_horaInicial(self, horaInicial): self.horaInicial = horaInicial
    def get_horaFinal(self): return self.horaFinal
    def set_horaFinal(self, horaFinal): self.horaFinal = horaFinal
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_quantidadeExecutada(self): return self.quantidadeExecutada
    def set_quantidadeExecutada(self, quantidadeExecutada): self.quantidadeExecutada = quantidadeExecutada
    def get_viaAcesso(self): return self.viaAcesso
    def set_viaAcesso(self, viaAcesso): self.viaAcesso = viaAcesso
    def get_tecnicaUtilizada(self): return self.tecnicaUtilizada
    def set_tecnicaUtilizada(self, tecnicaUtilizada): self.tecnicaUtilizada = tecnicaUtilizada
    def get_reducaoAcrescimo(self): return self.reducaoAcrescimo
    def set_reducaoAcrescimo(self, reducaoAcrescimo): self.reducaoAcrescimo = reducaoAcrescimo
    def get_valorUnitario(self): return self.valorUnitario
    def set_valorUnitario(self, valorUnitario): self.valorUnitario = valorUnitario
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_equipeSadt(self): return self.equipeSadt
    def set_equipeSadt(self, equipeSadt): self.equipeSadt = equipeSadt
    def add_equipeSadt(self, value): self.equipeSadt.append(value)
    def insert_equipeSadt_at(self, index, value): self.equipeSadt.insert(index, value)
    def replace_equipeSadt_at(self, index, value): self.equipeSadt[index] = value
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_viaDeAcesso(self, value):
        # Validate type dm_viaDeAcesso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_viaDeAcesso' % {"value" : value.encode("utf-8")} )
    def validate_dm_tecnicaUtilizada(self, value):
        # Validate type dm_tecnicaUtilizada, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tecnicaUtilizada' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataExecucao is not None or
            self.horaInicial is not None or
            self.horaFinal is not None or
            self.procedimento is not None or
            self.quantidadeExecutada is not None or
            self.viaAcesso is not None or
            self.tecnicaUtilizada is not None or
            self.reducaoAcrescimo is not None or
            self.valorUnitario is not None or
            self.valorTotal is not None or
            self.equipeSadt
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoSadt', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoExecutadoSadt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoExecutadoSadt', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoExecutadoSadt'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoExecutadoSadt', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataExecucao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataExecucao>%s</%sdataExecucao>%s' % (namespace_, self.gds_format_date(self.dataExecucao, input_name='dataExecucao'), namespace_, eol_))
        if self.horaInicial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicial>%s</%shoraInicial>%s' % (namespace_, self.gds_format_time(self.horaInicial, input_name='horaInicial'), namespace_, eol_))
        if self.horaFinal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFinal>%s</%shoraFinal>%s' % (namespace_, self.gds_format_time(self.horaFinal, input_name='horaFinal'), namespace_, eol_))
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeExecutada>%s</%squantidadeExecutada>%s' % (namespace_, self.gds_format_integer(self.quantidadeExecutada, input_name='quantidadeExecutada'), namespace_, eol_))
        if self.viaAcesso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sviaAcesso>%s</%sviaAcesso>%s' % (namespace_, self.gds_format_string(quote_xml(self.viaAcesso).encode(ExternalEncoding), input_name='viaAcesso'), namespace_, eol_))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stecnicaUtilizada>%s</%stecnicaUtilizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.tecnicaUtilizada).encode(ExternalEncoding), input_name='tecnicaUtilizada'), namespace_, eol_))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreducaoAcrescimo>%s</%sreducaoAcrescimo>%s' % (namespace_, self.gds_format_string(quote_xml(self.reducaoAcrescimo).encode(ExternalEncoding), input_name='reducaoAcrescimo'), namespace_, eol_))
        if self.valorUnitario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorUnitario>%s</%svalorUnitario>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorUnitario).encode(ExternalEncoding), input_name='valorUnitario'), namespace_, eol_))
        if self.valorTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotal>%s</%svalorTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotal).encode(ExternalEncoding), input_name='valorTotal'), namespace_, eol_))
        for equipeSadt_ in self.equipeSadt:
            equipeSadt_.export(outfile, level, namespace_, name_='equipeSadt', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_procedimentoExecutadoSadt'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataExecucao is not None:
            showIndent(outfile, level)
            outfile.write('dataExecucao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataExecucao, input_name='dataExecucao'))
        if self.horaInicial is not None:
            showIndent(outfile, level)
            outfile.write('horaInicial=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicial, input_name='horaInicial'))
        if self.horaFinal is not None:
            showIndent(outfile, level)
            outfile.write('horaFinal=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFinal, input_name='horaFinal'))
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidadeExecutada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeExecutada=%d,\n' % self.quantidadeExecutada)
        if self.viaAcesso is not None:
            showIndent(outfile, level)
            outfile.write('viaAcesso=%s,\n' % quote_python(self.viaAcesso).encode(ExternalEncoding))
        if self.tecnicaUtilizada is not None:
            showIndent(outfile, level)
            outfile.write('tecnicaUtilizada=%s,\n' % quote_python(self.tecnicaUtilizada).encode(ExternalEncoding))
        if self.reducaoAcrescimo is not None:
            showIndent(outfile, level)
            outfile.write('reducaoAcrescimo=%s,\n' % quote_python(self.reducaoAcrescimo).encode(ExternalEncoding))
        if self.valorUnitario is not None:
            showIndent(outfile, level)
            outfile.write('valorUnitario=%s,\n' % quote_python(self.valorUnitario).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=%s,\n' % quote_python(self.valorTotal).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('equipeSadt=[\n')
        level += 1
        for equipeSadt_ in self.equipeSadt:
            showIndent(outfile, level)
            outfile.write('model_.ct_identEquipeSADT(\n')
            equipeSadt_.exportLiteral(outfile, level, name_='ct_identEquipeSADT')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataExecucao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataExecucao = dval_
            # validate type st_data
            self.validate_st_data(self.dataExecucao)
        elif nodeName_ == 'horaInicial':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicial = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicial)
        elif nodeName_ == 'horaFinal':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFinal = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFinal)
        elif nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'quantidadeExecutada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeExecutada')
            self.quantidadeExecutada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeExecutada)
        elif nodeName_ == 'viaAcesso':
            viaAcesso_ = child_.text
            viaAcesso_ = self.gds_validate_string(viaAcesso_, node, 'viaAcesso')
            self.viaAcesso = viaAcesso_
            # validate type dm_viaDeAcesso
            self.validate_dm_viaDeAcesso(self.viaAcesso)
        elif nodeName_ == 'tecnicaUtilizada':
            tecnicaUtilizada_ = child_.text
            tecnicaUtilizada_ = self.gds_validate_string(tecnicaUtilizada_, node, 'tecnicaUtilizada')
            self.tecnicaUtilizada = tecnicaUtilizada_
            # validate type dm_tecnicaUtilizada
            self.validate_dm_tecnicaUtilizada(self.tecnicaUtilizada)
        elif nodeName_ == 'reducaoAcrescimo':
            reducaoAcrescimo_ = child_.text
            reducaoAcrescimo_ = self.gds_validate_string(reducaoAcrescimo_, node, 'reducaoAcrescimo')
            self.reducaoAcrescimo = reducaoAcrescimo_
        elif nodeName_ == 'valorUnitario':
            valorUnitario_ = child_.text
            valorUnitario_ = self.gds_validate_string(valorUnitario_, node, 'valorUnitario')
            self.valorUnitario = valorUnitario_
        elif nodeName_ == 'valorTotal':
            valorTotal_ = child_.text
            valorTotal_ = self.gds_validate_string(valorTotal_, node, 'valorTotal')
            self.valorTotal = valorTotal_
        elif nodeName_ == 'equipeSadt':
            obj_ = ct_identEquipeSADT.factory()
            obj_.build(child_)
            self.equipeSadt.append(obj_)
            obj_.original_tagname_ = 'equipeSadt'
# end class ct_procedimentoExecutadoSadt


class ct_procedimentoSolicitado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimento=None, unidadeMedida=None, quantidadeSolicitada=None):
        self.original_tagname_ = None
        self.procedimento = procedimento
        self.unidadeMedida = unidadeMedida
        self.validate_dm_unidadeMedida(self.unidadeMedida)
        self.quantidadeSolicitada = quantidadeSolicitada
        self.validate_st_numerico3(self.quantidadeSolicitada)
    def factory(*args_, **kwargs_):
        if ct_procedimentoSolicitado.subclass:
            return ct_procedimentoSolicitado.subclass(*args_, **kwargs_)
        else:
            return ct_procedimentoSolicitado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_unidadeMedida(self): return self.unidadeMedida
    def set_unidadeMedida(self, unidadeMedida): self.unidadeMedida = unidadeMedida
    def get_quantidadeSolicitada(self): return self.quantidadeSolicitada
    def set_quantidadeSolicitada(self, quantidadeSolicitada): self.quantidadeSolicitada = quantidadeSolicitada
    def validate_dm_unidadeMedida(self, value):
        # Validate type dm_unidadeMedida, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['001', '002', '003', '004', '005', '006', '007', '008', '009', '010', '011', '012', '013', '014', '015', '016', '017', '018', '019', '020', '021', '022', '023', '024', '025', '026', '027', '028', '029', '030', '031', '032', '033', '034', '035', '036', '037', '038', '039', '040', '041', '042', '043', '044', '045', '046', '047', '048', '049', '050', '051', '052']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_unidadeMedida' % {"value" : value.encode("utf-8")} )
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_unidadeMedida' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def hasContent_(self):
        if (
            self.procedimento is not None or
            self.unidadeMedida is not None or
            self.quantidadeSolicitada is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_procedimentoSolicitado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_procedimentoSolicitado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_procedimentoSolicitado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_procedimentoSolicitado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_procedimentoSolicitado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.unidadeMedida is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunidadeMedida>%s</%sunidadeMedida>%s' % (namespace_, self.gds_format_string(quote_xml(self.unidadeMedida).encode(ExternalEncoding), input_name='unidadeMedida'), namespace_, eol_))
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeSolicitada>%s</%squantidadeSolicitada>%s' % (namespace_, self.gds_format_integer(self.quantidadeSolicitada, input_name='quantidadeSolicitada'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_procedimentoSolicitado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.unidadeMedida is not None:
            showIndent(outfile, level)
            outfile.write('unidadeMedida=%s,\n' % quote_python(self.unidadeMedida).encode(ExternalEncoding))
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeSolicitada=%d,\n' % self.quantidadeSolicitada)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'unidadeMedida':
            unidadeMedida_ = child_.text
            unidadeMedida_ = self.gds_validate_string(unidadeMedida_, node, 'unidadeMedida')
            self.unidadeMedida = unidadeMedida_
            # validate type dm_unidadeMedida
            self.validate_dm_unidadeMedida(self.unidadeMedida)
        elif nodeName_ == 'quantidadeSolicitada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeSolicitada')
            self.quantidadeSolicitada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeSolicitada)
# end class ct_procedimentoSolicitado


class ct_protocoloDetalhe(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None, valorTotalProtocolo=None, glosaProtocolo=None, dadosGuiasProtocolo=None):
        self.original_tagname_ = None
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.valorTotalProtocolo = valorTotalProtocolo
        self.glosaProtocolo = glosaProtocolo
        self.dadosGuiasProtocolo = dadosGuiasProtocolo
    def factory(*args_, **kwargs_):
        if ct_protocoloDetalhe.subclass:
            return ct_protocoloDetalhe.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloDetalhe(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_valorTotalProtocolo(self): return self.valorTotalProtocolo
    def set_valorTotalProtocolo(self, valorTotalProtocolo): self.valorTotalProtocolo = valorTotalProtocolo
    def get_glosaProtocolo(self): return self.glosaProtocolo
    def set_glosaProtocolo(self, glosaProtocolo): self.glosaProtocolo = glosaProtocolo
    def get_dadosGuiasProtocolo(self): return self.dadosGuiasProtocolo
    def set_dadosGuiasProtocolo(self, dadosGuiasProtocolo): self.dadosGuiasProtocolo = dadosGuiasProtocolo
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroProtocolo is not None or
            self.valorTotalProtocolo is not None or
            self.glosaProtocolo is not None or
            self.dadosGuiasProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloDetalhe', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloDetalhe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloDetalhe', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloDetalhe'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloDetalhe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.valorTotalProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalProtocolo>%s</%svalorTotalProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalProtocolo).encode(ExternalEncoding), input_name='valorTotalProtocolo'), namespace_, eol_))
        if self.glosaProtocolo is not None:
            self.glosaProtocolo.export(outfile, level, namespace_, name_='glosaProtocolo', pretty_print=pretty_print)
        if self.dadosGuiasProtocolo is not None:
            self.dadosGuiasProtocolo.export(outfile, level, namespace_, name_='dadosGuiasProtocolo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloDetalhe'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.valorTotalProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalProtocolo=%s,\n' % quote_python(self.valorTotalProtocolo).encode(ExternalEncoding))
        if self.glosaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('glosaProtocolo=model_.glosaProtocolo(\n')
            self.glosaProtocolo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosGuiasProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('dadosGuiasProtocolo=model_.dadosGuiasProtocolo(\n')
            self.dadosGuiasProtocolo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'valorTotalProtocolo':
            valorTotalProtocolo_ = child_.text
            valorTotalProtocolo_ = self.gds_validate_string(valorTotalProtocolo_, node, 'valorTotalProtocolo')
            self.valorTotalProtocolo = valorTotalProtocolo_
        elif nodeName_ == 'glosaProtocolo':
            obj_ = glosaProtocolo.factory()
            obj_.build(child_)
            self.glosaProtocolo = obj_
            obj_.original_tagname_ = 'glosaProtocolo'
        elif nodeName_ == 'dadosGuiasProtocolo':
            obj_ = dadosGuiasProtocolo.factory()
            obj_.build(child_)
            self.dadosGuiasProtocolo = obj_
            obj_.original_tagname_ = 'dadosGuiasProtocolo'
# end class ct_protocoloDetalhe


class glosaProtocolo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivosGlosa=None, vlGlosaProtocolo=None):
        self.original_tagname_ = None
        self.motivosGlosa = motivosGlosa
        self.vlGlosaProtocolo = vlGlosaProtocolo
    def factory(*args_, **kwargs_):
        if glosaProtocolo.subclass:
            return glosaProtocolo.subclass(*args_, **kwargs_)
        else:
            return glosaProtocolo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivosGlosa(self): return self.motivosGlosa
    def set_motivosGlosa(self, motivosGlosa): self.motivosGlosa = motivosGlosa
    def get_vlGlosaProtocolo(self): return self.vlGlosaProtocolo
    def set_vlGlosaProtocolo(self, vlGlosaProtocolo): self.vlGlosaProtocolo = vlGlosaProtocolo
    def hasContent_(self):
        if (
            self.motivosGlosa is not None or
            self.vlGlosaProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='glosaProtocolo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='glosaProtocolo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='glosaProtocolo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='glosaProtocolo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='glosaProtocolo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.motivosGlosa is not None:
            self.motivosGlosa.export(outfile, level, namespace_, name_='motivosGlosa', pretty_print=pretty_print)
        if self.vlGlosaProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svlGlosaProtocolo>%s</%svlGlosaProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.vlGlosaProtocolo).encode(ExternalEncoding), input_name='vlGlosaProtocolo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='glosaProtocolo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.motivosGlosa is not None:
            showIndent(outfile, level)
            outfile.write('motivosGlosa=model_.motivosGlosa(\n')
            self.motivosGlosa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.vlGlosaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('vlGlosaProtocolo=%s,\n' % quote_python(self.vlGlosaProtocolo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivosGlosa':
            obj_ = motivosGlosa.factory()
            obj_.build(child_)
            self.motivosGlosa = obj_
            obj_.original_tagname_ = 'motivosGlosa'
        elif nodeName_ == 'vlGlosaProtocolo':
            vlGlosaProtocolo_ = child_.text
            vlGlosaProtocolo_ = self.gds_validate_string(vlGlosaProtocolo_, node, 'vlGlosaProtocolo')
            self.vlGlosaProtocolo = vlGlosaProtocolo_
# end class glosaProtocolo


class motivosGlosa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivoGlosa=None):
        self.original_tagname_ = None
        if motivoGlosa is None:
            self.motivoGlosa = []
        else:
            self.motivoGlosa = motivoGlosa
    def factory(*args_, **kwargs_):
        if motivosGlosa.subclass:
            return motivosGlosa.subclass(*args_, **kwargs_)
        else:
            return motivosGlosa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivoGlosa(self): return self.motivoGlosa
    def set_motivoGlosa(self, motivoGlosa): self.motivoGlosa = motivoGlosa
    def add_motivoGlosa(self, value): self.motivoGlosa.append(value)
    def insert_motivoGlosa_at(self, index, value): self.motivoGlosa.insert(index, value)
    def replace_motivoGlosa_at(self, index, value): self.motivoGlosa[index] = value
    def hasContent_(self):
        if (
            self.motivoGlosa
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='motivosGlosa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='motivosGlosa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='motivosGlosa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='motivosGlosa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='motivosGlosa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for motivoGlosa_ in self.motivoGlosa:
            motivoGlosa_.export(outfile, level, namespace_, name_='motivoGlosa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='motivosGlosa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('motivoGlosa=[\n')
        level += 1
        for motivoGlosa_ in self.motivoGlosa:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            motivoGlosa_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivoGlosa':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.motivoGlosa.append(obj_)
            obj_.original_tagname_ = 'motivoGlosa'
# end class motivosGlosa


class dadosGuiasProtocolo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosGuias=None, dadosGuiasOdonto=None):
        self.original_tagname_ = None
        if dadosGuias is None:
            self.dadosGuias = []
        else:
            self.dadosGuias = dadosGuias
        if dadosGuiasOdonto is None:
            self.dadosGuiasOdonto = []
        else:
            self.dadosGuiasOdonto = dadosGuiasOdonto
    def factory(*args_, **kwargs_):
        if dadosGuiasProtocolo.subclass:
            return dadosGuiasProtocolo.subclass(*args_, **kwargs_)
        else:
            return dadosGuiasProtocolo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosGuias(self): return self.dadosGuias
    def set_dadosGuias(self, dadosGuias): self.dadosGuias = dadosGuias
    def add_dadosGuias(self, value): self.dadosGuias.append(value)
    def insert_dadosGuias_at(self, index, value): self.dadosGuias.insert(index, value)
    def replace_dadosGuias_at(self, index, value): self.dadosGuias[index] = value
    def get_dadosGuiasOdonto(self): return self.dadosGuiasOdonto
    def set_dadosGuiasOdonto(self, dadosGuiasOdonto): self.dadosGuiasOdonto = dadosGuiasOdonto
    def add_dadosGuiasOdonto(self, value): self.dadosGuiasOdonto.append(value)
    def insert_dadosGuiasOdonto_at(self, index, value): self.dadosGuiasOdonto.insert(index, value)
    def replace_dadosGuiasOdonto_at(self, index, value): self.dadosGuiasOdonto[index] = value
    def hasContent_(self):
        if (
            self.dadosGuias or
            self.dadosGuiasOdonto
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosGuiasProtocolo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosGuiasProtocolo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosGuiasProtocolo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosGuiasProtocolo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosGuiasProtocolo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dadosGuias_ in self.dadosGuias:
            dadosGuias_.export(outfile, level, namespace_, name_='dadosGuias', pretty_print=pretty_print)
        for dadosGuiasOdonto_ in self.dadosGuiasOdonto:
            dadosGuiasOdonto_.export(outfile, level, namespace_, name_='dadosGuiasOdonto', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='dadosGuiasProtocolo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dadosGuias=[\n')
        level += 1
        for dadosGuias_ in self.dadosGuias:
            showIndent(outfile, level)
            outfile.write('model_.ct_guiaDados(\n')
            dadosGuias_.exportLiteral(outfile, level, name_='ct_guiaDados')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('dadosGuiasOdonto=[\n')
        level += 1
        for dadosGuiasOdonto_ in self.dadosGuiasOdonto:
            showIndent(outfile, level)
            outfile.write('model_.ct_guiaDadosOdonto(\n')
            dadosGuiasOdonto_.exportLiteral(outfile, level, name_='ct_guiaDadosOdonto')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosGuias':
            obj_ = ct_guiaDados.factory()
            obj_.build(child_)
            self.dadosGuias.append(obj_)
            obj_.original_tagname_ = 'dadosGuias'
        elif nodeName_ == 'dadosGuiasOdonto':
            obj_ = ct_guiaDadosOdonto.factory()
            obj_.build(child_)
            self.dadosGuiasOdonto.append(obj_)
            obj_.original_tagname_ = 'dadosGuiasOdonto'
# end class dadosGuiasProtocolo


class ct_anexoLote(GeneratedsSuper):
    """estrutura da resposta da operadora a um lote de anexos"""
    subclass = None
    superclass = None
    def __init__(self, numeroLote=None, AnexosGuiasTISS=None):
        self.original_tagname_ = None
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.AnexosGuiasTISS = AnexosGuiasTISS
    def factory(*args_, **kwargs_):
        if ct_anexoLote.subclass:
            return ct_anexoLote.subclass(*args_, **kwargs_)
        else:
            return ct_anexoLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_AnexosGuiasTISS(self): return self.AnexosGuiasTISS
    def set_AnexosGuiasTISS(self, AnexosGuiasTISS): self.AnexosGuiasTISS = AnexosGuiasTISS
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroLote is not None or
            self.AnexosGuiasTISS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_anexoLote', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_anexoLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_anexoLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_anexoLote'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_anexoLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.AnexosGuiasTISS is not None:
            self.AnexosGuiasTISS.export(outfile, level, namespace_, name_='AnexosGuiasTISS', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_anexoLote'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.AnexosGuiasTISS is not None:
            showIndent(outfile, level)
            outfile.write('AnexosGuiasTISS=model_.AnexosGuiasTISS(\n')
            self.AnexosGuiasTISS.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'AnexosGuiasTISS':
            obj_ = AnexosGuiasTISS.factory()
            obj_.build(child_)
            self.AnexosGuiasTISS = obj_
            obj_.original_tagname_ = 'AnexosGuiasTISS'
# end class ct_anexoLote


class AnexosGuiasTISS(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, anexoSituacaoInicial=None, anexoSolicitacaoRadio=None, anexoSolicitacaoQuimio=None, anexoSolicitacaoOPME=None):
        self.original_tagname_ = None
        if anexoSituacaoInicial is None:
            self.anexoSituacaoInicial = []
        else:
            self.anexoSituacaoInicial = anexoSituacaoInicial
        self.anexoSolicitacaoRadio = anexoSolicitacaoRadio
        self.anexoSolicitacaoQuimio = anexoSolicitacaoQuimio
        self.anexoSolicitacaoOPME = anexoSolicitacaoOPME
    def factory(*args_, **kwargs_):
        if AnexosGuiasTISS.subclass:
            return AnexosGuiasTISS.subclass(*args_, **kwargs_)
        else:
            return AnexosGuiasTISS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anexoSituacaoInicial(self): return self.anexoSituacaoInicial
    def set_anexoSituacaoInicial(self, anexoSituacaoInicial): self.anexoSituacaoInicial = anexoSituacaoInicial
    def add_anexoSituacaoInicial(self, value): self.anexoSituacaoInicial.append(value)
    def insert_anexoSituacaoInicial_at(self, index, value): self.anexoSituacaoInicial.insert(index, value)
    def replace_anexoSituacaoInicial_at(self, index, value): self.anexoSituacaoInicial[index] = value
    def get_anexoSolicitacaoRadio(self): return self.anexoSolicitacaoRadio
    def set_anexoSolicitacaoRadio(self, anexoSolicitacaoRadio): self.anexoSolicitacaoRadio = anexoSolicitacaoRadio
    def get_anexoSolicitacaoQuimio(self): return self.anexoSolicitacaoQuimio
    def set_anexoSolicitacaoQuimio(self, anexoSolicitacaoQuimio): self.anexoSolicitacaoQuimio = anexoSolicitacaoQuimio
    def get_anexoSolicitacaoOPME(self): return self.anexoSolicitacaoOPME
    def set_anexoSolicitacaoOPME(self, anexoSolicitacaoOPME): self.anexoSolicitacaoOPME = anexoSolicitacaoOPME
    def hasContent_(self):
        if (
            self.anexoSituacaoInicial or
            self.anexoSolicitacaoRadio is not None or
            self.anexoSolicitacaoQuimio is not None or
            self.anexoSolicitacaoOPME is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='AnexosGuiasTISS', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AnexosGuiasTISS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='AnexosGuiasTISS', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='AnexosGuiasTISS'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='AnexosGuiasTISS', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for anexoSituacaoInicial_ in self.anexoSituacaoInicial:
            anexoSituacaoInicial_.export(outfile, level, namespace_, name_='anexoSituacaoInicial', pretty_print=pretty_print)
        if self.anexoSolicitacaoRadio is not None:
            self.anexoSolicitacaoRadio.export(outfile, level, namespace_, name_='anexoSolicitacaoRadio', pretty_print=pretty_print)
        if self.anexoSolicitacaoQuimio is not None:
            self.anexoSolicitacaoQuimio.export(outfile, level, namespace_, name_='anexoSolicitacaoQuimio', pretty_print=pretty_print)
        if self.anexoSolicitacaoOPME is not None:
            self.anexoSolicitacaoOPME.export(outfile, level, namespace_, name_='anexoSolicitacaoOPME', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='AnexosGuiasTISS'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('anexoSituacaoInicial=[\n')
        level += 1
        for anexoSituacaoInicial_ in self.anexoSituacaoInicial:
            showIndent(outfile, level)
            outfile.write('model_.cto_anexoSituacaoInicial(\n')
            anexoSituacaoInicial_.exportLiteral(outfile, level, name_='cto_anexoSituacaoInicial')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.anexoSolicitacaoRadio is not None:
            showIndent(outfile, level)
            outfile.write('anexoSolicitacaoRadio=model_.ctm_anexoSolicitacaoRadio(\n')
            self.anexoSolicitacaoRadio.exportLiteral(outfile, level, name_='anexoSolicitacaoRadio')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.anexoSolicitacaoQuimio is not None:
            showIndent(outfile, level)
            outfile.write('anexoSolicitacaoQuimio=model_.ctm_anexoSolicitacaoQuimio(\n')
            self.anexoSolicitacaoQuimio.exportLiteral(outfile, level, name_='anexoSolicitacaoQuimio')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.anexoSolicitacaoOPME is not None:
            showIndent(outfile, level)
            outfile.write('anexoSolicitacaoOPME=model_.ctm_anexoSolicitacaoOPME(\n')
            self.anexoSolicitacaoOPME.exportLiteral(outfile, level, name_='anexoSolicitacaoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'anexoSituacaoInicial':
            obj_ = cto_anexoSituacaoInicial.factory()
            obj_.build(child_)
            self.anexoSituacaoInicial.append(obj_)
            obj_.original_tagname_ = 'anexoSituacaoInicial'
        elif nodeName_ == 'anexoSolicitacaoRadio':
            obj_ = ctm_anexoSolicitacaoRadio.factory()
            obj_.build(child_)
            self.anexoSolicitacaoRadio = obj_
            obj_.original_tagname_ = 'anexoSolicitacaoRadio'
        elif nodeName_ == 'anexoSolicitacaoQuimio':
            obj_ = ctm_anexoSolicitacaoQuimio.factory()
            obj_.build(child_)
            self.anexoSolicitacaoQuimio = obj_
            obj_.original_tagname_ = 'anexoSolicitacaoQuimio'
        elif nodeName_ == 'anexoSolicitacaoOPME':
            obj_ = ctm_anexoSolicitacaoOPME.factory()
            obj_.build(child_)
            self.anexoSolicitacaoOPME = obj_
            obj_.original_tagname_ = 'anexoSolicitacaoOPME'
# end class AnexosGuiasTISS


class ct_protocoloDetalheAnexo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None, valorTotalProtocolo=None, glosasProtocolo=None, vlGlosaProtocolo=None, dadosGuias=None):
        self.original_tagname_ = None
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.valorTotalProtocolo = valorTotalProtocolo
        if glosasProtocolo is None:
            self.glosasProtocolo = []
        else:
            self.glosasProtocolo = glosasProtocolo
        self.vlGlosaProtocolo = vlGlosaProtocolo
        if dadosGuias is None:
            self.dadosGuias = []
        else:
            self.dadosGuias = dadosGuias
    def factory(*args_, **kwargs_):
        if ct_protocoloDetalheAnexo.subclass:
            return ct_protocoloDetalheAnexo.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloDetalheAnexo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_valorTotalProtocolo(self): return self.valorTotalProtocolo
    def set_valorTotalProtocolo(self, valorTotalProtocolo): self.valorTotalProtocolo = valorTotalProtocolo
    def get_glosasProtocolo(self): return self.glosasProtocolo
    def set_glosasProtocolo(self, glosasProtocolo): self.glosasProtocolo = glosasProtocolo
    def add_glosasProtocolo(self, value): self.glosasProtocolo.append(value)
    def insert_glosasProtocolo_at(self, index, value): self.glosasProtocolo.insert(index, value)
    def replace_glosasProtocolo_at(self, index, value): self.glosasProtocolo[index] = value
    def get_vlGlosaProtocolo(self): return self.vlGlosaProtocolo
    def set_vlGlosaProtocolo(self, vlGlosaProtocolo): self.vlGlosaProtocolo = vlGlosaProtocolo
    def get_dadosGuias(self): return self.dadosGuias
    def set_dadosGuias(self, dadosGuias): self.dadosGuias = dadosGuias
    def add_dadosGuias(self, value): self.dadosGuias.append(value)
    def insert_dadosGuias_at(self, index, value): self.dadosGuias.insert(index, value)
    def replace_dadosGuias_at(self, index, value): self.dadosGuias[index] = value
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroProtocolo is not None or
            self.valorTotalProtocolo is not None or
            self.glosasProtocolo or
            self.vlGlosaProtocolo is not None or
            self.dadosGuias
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloDetalheAnexo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloDetalheAnexo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloDetalheAnexo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloDetalheAnexo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloDetalheAnexo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.valorTotalProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalProtocolo>%s</%svalorTotalProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalProtocolo).encode(ExternalEncoding), input_name='valorTotalProtocolo'), namespace_, eol_))
        for glosasProtocolo_ in self.glosasProtocolo:
            glosasProtocolo_.export(outfile, level, namespace_, name_='glosasProtocolo', pretty_print=pretty_print)
        if self.vlGlosaProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svlGlosaProtocolo>%s</%svlGlosaProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.vlGlosaProtocolo).encode(ExternalEncoding), input_name='vlGlosaProtocolo'), namespace_, eol_))
        for dadosGuias_ in self.dadosGuias:
            dadosGuias_.export(outfile, level, namespace_, name_='dadosGuias', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloDetalheAnexo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.valorTotalProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalProtocolo=%s,\n' % quote_python(self.valorTotalProtocolo).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('glosasProtocolo=[\n')
        level += 1
        for glosasProtocolo_ in self.glosasProtocolo:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            glosasProtocolo_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.vlGlosaProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('vlGlosaProtocolo=%s,\n' % quote_python(self.vlGlosaProtocolo).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('dadosGuias=[\n')
        level += 1
        for dadosGuias_ in self.dadosGuias:
            showIndent(outfile, level)
            outfile.write('model_.ct_guiaDadosAnexo(\n')
            dadosGuias_.exportLiteral(outfile, level, name_='ct_guiaDadosAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'valorTotalProtocolo':
            valorTotalProtocolo_ = child_.text
            valorTotalProtocolo_ = self.gds_validate_string(valorTotalProtocolo_, node, 'valorTotalProtocolo')
            self.valorTotalProtocolo = valorTotalProtocolo_
        elif nodeName_ == 'glosasProtocolo':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.glosasProtocolo.append(obj_)
            obj_.original_tagname_ = 'glosasProtocolo'
        elif nodeName_ == 'vlGlosaProtocolo':
            vlGlosaProtocolo_ = child_.text
            vlGlosaProtocolo_ = self.gds_validate_string(vlGlosaProtocolo_, node, 'vlGlosaProtocolo')
            self.vlGlosaProtocolo = vlGlosaProtocolo_
        elif nodeName_ == 'dadosGuias':
            obj_ = ct_guiaDadosAnexo.factory()
            obj_.build(child_)
            self.dadosGuias.append(obj_)
            obj_.original_tagname_ = 'dadosGuias'
# end class ct_protocoloDetalheAnexo


class ct_protocoloRecurso(GeneratedsSuper):
    """estrutura da resposta da operadora a um lote de guias de recurso de
    glosa de medicina e de odonto"""
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None, glosaProtocolo=None, dadosGuias=None):
        self.original_tagname_ = None
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        if glosaProtocolo is None:
            self.glosaProtocolo = []
        else:
            self.glosaProtocolo = glosaProtocolo
        if dadosGuias is None:
            self.dadosGuias = []
        else:
            self.dadosGuias = dadosGuias
    def factory(*args_, **kwargs_):
        if ct_protocoloRecurso.subclass:
            return ct_protocoloRecurso.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloRecurso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_glosaProtocolo(self): return self.glosaProtocolo
    def set_glosaProtocolo(self, glosaProtocolo): self.glosaProtocolo = glosaProtocolo
    def add_glosaProtocolo(self, value): self.glosaProtocolo.append(value)
    def insert_glosaProtocolo_at(self, index, value): self.glosaProtocolo.insert(index, value)
    def replace_glosaProtocolo_at(self, index, value): self.glosaProtocolo[index] = value
    def get_dadosGuias(self): return self.dadosGuias
    def set_dadosGuias(self, dadosGuias): self.dadosGuias = dadosGuias
    def add_dadosGuias(self, value): self.dadosGuias.append(value)
    def insert_dadosGuias_at(self, index, value): self.dadosGuias.insert(index, value)
    def replace_dadosGuias_at(self, index, value): self.dadosGuias[index] = value
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroProtocolo is not None or
            self.glosaProtocolo or
            self.dadosGuias
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecurso', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloRecurso')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloRecurso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloRecurso'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecurso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        for glosaProtocolo_ in self.glosaProtocolo:
            glosaProtocolo_.export(outfile, level, namespace_, name_='glosaProtocolo', pretty_print=pretty_print)
        for dadosGuias_ in self.dadosGuias:
            dadosGuias_.export(outfile, level, namespace_, name_='dadosGuias', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloRecurso'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('glosaProtocolo=[\n')
        level += 1
        for glosaProtocolo_ in self.glosaProtocolo:
            showIndent(outfile, level)
            outfile.write('model_.ct_motivoGlosa(\n')
            glosaProtocolo_.exportLiteral(outfile, level, name_='ct_motivoGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('dadosGuias=[\n')
        level += 1
        for dadosGuias_ in self.dadosGuias:
            showIndent(outfile, level)
            outfile.write('model_.ct_guiaRecurso(\n')
            dadosGuias_.exportLiteral(outfile, level, name_='ct_guiaRecurso')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'glosaProtocolo':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.glosaProtocolo.append(obj_)
            obj_.original_tagname_ = 'glosaProtocolo'
        elif nodeName_ == 'dadosGuias':
            obj_ = ct_guiaRecurso.factory()
            obj_.build(child_)
            self.dadosGuias.append(obj_)
            obj_.original_tagname_ = 'dadosGuias'
# end class ct_protocoloRecurso


class ct_protocoloRecebimentoAnexo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None, identificacaoOperadora=None, dadosPrestador=None, numeroLote=None, dataEnvioLote=None, detalheProtocolo=None):
        self.original_tagname_ = None
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.identificacaoOperadora = identificacaoOperadora
        self.dadosPrestador = dadosPrestador
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.dataEnvioLote = dataEnvioLote
        self.validate_st_texto12(self.dataEnvioLote)
        self.detalheProtocolo = detalheProtocolo
    def factory(*args_, **kwargs_):
        if ct_protocoloRecebimentoAnexo.subclass:
            return ct_protocoloRecebimentoAnexo.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloRecebimentoAnexo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_identificacaoOperadora(self): return self.identificacaoOperadora
    def set_identificacaoOperadora(self, identificacaoOperadora): self.identificacaoOperadora = identificacaoOperadora
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_dataEnvioLote(self): return self.dataEnvioLote
    def set_dataEnvioLote(self, dataEnvioLote): self.dataEnvioLote = dataEnvioLote
    def get_detalheProtocolo(self): return self.detalheProtocolo
    def set_detalheProtocolo(self, detalheProtocolo): self.detalheProtocolo = detalheProtocolo
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroProtocolo is not None or
            self.identificacaoOperadora is not None or
            self.dadosPrestador is not None or
            self.numeroLote is not None or
            self.dataEnvioLote is not None or
            self.detalheProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecebimentoAnexo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloRecebimentoAnexo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloRecebimentoAnexo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloRecebimentoAnexo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecebimentoAnexo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.identificacaoOperadora is not None:
            self.identificacaoOperadora.export(outfile, level, namespace_, name_='identificacaoOperadora', pretty_print=pretty_print)
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioLote>%s</%sdataEnvioLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.dataEnvioLote).encode(ExternalEncoding), input_name='dataEnvioLote'), namespace_, eol_))
        if self.detalheProtocolo is not None:
            self.detalheProtocolo.export(outfile, level, namespace_, name_='detalheProtocolo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloRecebimentoAnexo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOperadora=model_.ct_fontePagadora(\n')
            self.identificacaoOperadora.exportLiteral(outfile, level, name_='identificacaoOperadora')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioLote=%s,\n' % quote_python(self.dataEnvioLote).encode(ExternalEncoding))
        if self.detalheProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('detalheProtocolo=model_.ct_protocoloDetalheAnexo(\n')
            self.detalheProtocolo.exportLiteral(outfile, level, name_='detalheProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'identificacaoOperadora':
            obj_ = ct_fontePagadora.factory()
            obj_.build(child_)
            self.identificacaoOperadora = obj_
            obj_.original_tagname_ = 'identificacaoOperadora'
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'dataEnvioLote':
            dataEnvioLote_ = child_.text
            dataEnvioLote_ = self.gds_validate_string(dataEnvioLote_, node, 'dataEnvioLote')
            self.dataEnvioLote = dataEnvioLote_
            # validate type st_texto12
            self.validate_st_texto12(self.dataEnvioLote)
        elif nodeName_ == 'detalheProtocolo':
            obj_ = ct_protocoloDetalheAnexo.factory()
            obj_.build(child_)
            self.detalheProtocolo = obj_
            obj_.original_tagname_ = 'detalheProtocolo'
# end class ct_protocoloRecebimentoAnexo


class ct_protocoloRecebimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, dadosPrestador=None, numeroLote=None, dataEnvioLote=None, detalheProtocolo=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.dadosPrestador = dadosPrestador
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        if isinstance(dataEnvioLote, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioLote, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioLote
        self.dataEnvioLote = initvalue_
        self.detalheProtocolo = detalheProtocolo
    def factory(*args_, **kwargs_):
        if ct_protocoloRecebimento.subclass:
            return ct_protocoloRecebimento.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloRecebimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_dataEnvioLote(self): return self.dataEnvioLote
    def set_dataEnvioLote(self, dataEnvioLote): self.dataEnvioLote = dataEnvioLote
    def get_detalheProtocolo(self): return self.detalheProtocolo
    def set_detalheProtocolo(self, detalheProtocolo): self.detalheProtocolo = detalheProtocolo
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.dadosPrestador is not None or
            self.numeroLote is not None or
            self.dataEnvioLote is not None or
            self.detalheProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecebimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloRecebimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloRecebimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloRecebimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecebimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioLote>%s</%sdataEnvioLote>%s' % (namespace_, self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'), namespace_, eol_))
        if self.detalheProtocolo is not None:
            self.detalheProtocolo.export(outfile, level, namespace_, name_='detalheProtocolo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloRecebimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioLote=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'))
        if self.detalheProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('detalheProtocolo=model_.ct_protocoloDetalhe(\n')
            self.detalheProtocolo.exportLiteral(outfile, level, name_='detalheProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'dataEnvioLote':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioLote = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioLote)
        elif nodeName_ == 'detalheProtocolo':
            obj_ = ct_protocoloDetalhe.factory()
            obj_.build(child_)
            self.detalheProtocolo = obj_
            obj_.original_tagname_ = 'detalheProtocolo'
# end class ct_protocoloRecebimento


class ct_protocoloRecebimentoRecurso(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroProtocolo=None, identificacaoOperadora=None, dadosPrestador=None, numeroLote=None, dataEnvioLote=None, detalheProtocolo=None):
        self.original_tagname_ = None
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
        self.identificacaoOperadora = identificacaoOperadora
        self.dadosPrestador = dadosPrestador
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        if isinstance(dataEnvioLote, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioLote, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioLote
        self.dataEnvioLote = initvalue_
        self.detalheProtocolo = detalheProtocolo
    def factory(*args_, **kwargs_):
        if ct_protocoloRecebimentoRecurso.subclass:
            return ct_protocoloRecebimentoRecurso.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloRecebimentoRecurso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_identificacaoOperadora(self): return self.identificacaoOperadora
    def set_identificacaoOperadora(self, identificacaoOperadora): self.identificacaoOperadora = identificacaoOperadora
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_dataEnvioLote(self): return self.dataEnvioLote
    def set_dataEnvioLote(self, dataEnvioLote): self.dataEnvioLote = dataEnvioLote
    def get_detalheProtocolo(self): return self.detalheProtocolo
    def set_detalheProtocolo(self, detalheProtocolo): self.detalheProtocolo = detalheProtocolo
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.numeroProtocolo is not None or
            self.identificacaoOperadora is not None or
            self.dadosPrestador is not None or
            self.numeroLote is not None or
            self.dataEnvioLote is not None or
            self.detalheProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecebimentoRecurso', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloRecebimentoRecurso')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloRecebimentoRecurso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloRecebimentoRecurso'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloRecebimentoRecurso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
        if self.identificacaoOperadora is not None:
            self.identificacaoOperadora.export(outfile, level, namespace_, name_='identificacaoOperadora', pretty_print=pretty_print)
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioLote>%s</%sdataEnvioLote>%s' % (namespace_, self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'), namespace_, eol_))
        if self.detalheProtocolo is not None:
            self.detalheProtocolo.export(outfile, level, namespace_, name_='detalheProtocolo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloRecebimentoRecurso'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOperadora=model_.ct_fontePagadora(\n')
            self.identificacaoOperadora.exportLiteral(outfile, level, name_='identificacaoOperadora')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.dataEnvioLote is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioLote=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioLote, input_name='dataEnvioLote'))
        if self.detalheProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('detalheProtocolo=model_.ct_protocoloRecurso(\n')
            self.detalheProtocolo.exportLiteral(outfile, level, name_='detalheProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
        elif nodeName_ == 'identificacaoOperadora':
            obj_ = ct_fontePagadora.factory()
            obj_.build(child_)
            self.identificacaoOperadora = obj_
            obj_.original_tagname_ = 'identificacaoOperadora'
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'dataEnvioLote':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioLote = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioLote)
        elif nodeName_ == 'detalheProtocolo':
            obj_ = ct_protocoloRecurso.factory()
            obj_.build(child_)
            self.detalheProtocolo = obj_
            obj_.original_tagname_ = 'detalheProtocolo'
# end class ct_protocoloRecebimentoRecurso


class ct_protocoloSolicitacaoStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosPrestador=None, numeroProtocolo=None):
        self.original_tagname_ = None
        self.dadosPrestador = dadosPrestador
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_texto12(self.numeroProtocolo)
    def factory(*args_, **kwargs_):
        if ct_protocoloSolicitacaoStatus.subclass:
            return ct_protocoloSolicitacaoStatus.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloSolicitacaoStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosPrestador is not None or
            self.numeroProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloSolicitacaoStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloSolicitacaoStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloSolicitacaoStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloSolicitacaoStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloSolicitacaoStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroProtocolo).encode(ExternalEncoding), input_name='numeroProtocolo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_protocoloSolicitacaoStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%s,\n' % quote_python(self.numeroProtocolo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'numeroProtocolo':
            numeroProtocolo_ = child_.text
            numeroProtocolo_ = self.gds_validate_string(numeroProtocolo_, node, 'numeroProtocolo')
            self.numeroProtocolo = numeroProtocolo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroProtocolo)
# end class ct_protocoloSolicitacaoStatus


class ct_protocoloStatus(GeneratedsSuper):
    """estrutura utilizada na resposta da operadora sobre a situação do
    protocolo"""
    subclass = None
    superclass = None
    def __init__(self, identificacaoOperadora=None, dadosPrestador=None, lote=None):
        self.original_tagname_ = None
        self.identificacaoOperadora = identificacaoOperadora
        self.validate_st_registroANS(self.identificacaoOperadora)
        self.dadosPrestador = dadosPrestador
        self.lote = lote
    def factory(*args_, **kwargs_):
        if ct_protocoloStatus.subclass:
            return ct_protocoloStatus.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOperadora(self): return self.identificacaoOperadora
    def set_identificacaoOperadora(self, identificacaoOperadora): self.identificacaoOperadora = identificacaoOperadora
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_lote(self): return self.lote
    def set_lote(self, lote): self.lote = lote
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def hasContent_(self):
        if (
            self.identificacaoOperadora is not None or
            self.dadosPrestador is not None or
            self.lote is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificacaoOperadora>%s</%sidentificacaoOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.identificacaoOperadora).encode(ExternalEncoding), input_name='identificacaoOperadora'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.lote is not None:
            self.lote.export(outfile, level, namespace_, name_='lote', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOperadora=%s,\n' % quote_python(self.identificacaoOperadora).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.lote is not None:
            showIndent(outfile, level)
            outfile.write('lote=model_.lote(\n')
            self.lote.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOperadora':
            identificacaoOperadora_ = child_.text
            identificacaoOperadora_ = self.gds_validate_string(identificacaoOperadora_, node, 'identificacaoOperadora')
            self.identificacaoOperadora = identificacaoOperadora_
            # validate type st_registroANS
            self.validate_st_registroANS(self.identificacaoOperadora)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'lote':
            obj_ = lote.factory()
            obj_.build(child_)
            self.lote = obj_
            obj_.original_tagname_ = 'lote'
# end class ct_protocoloStatus


class lote(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, detalheLote=None, mensagemErro=None):
        self.original_tagname_ = None
        self.detalheLote = detalheLote
        self.mensagemErro = mensagemErro
    def factory(*args_, **kwargs_):
        if lote.subclass:
            return lote.subclass(*args_, **kwargs_)
        else:
            return lote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_detalheLote(self): return self.detalheLote
    def set_detalheLote(self, detalheLote): self.detalheLote = detalheLote
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def hasContent_(self):
        if (
            self.detalheLote is not None or
            self.mensagemErro is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='lote', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='lote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='lote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='lote'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='lote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.detalheLote is not None:
            self.detalheLote.export(outfile, level, namespace_, name_='detalheLote', pretty_print=pretty_print)
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='lote'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.detalheLote is not None:
            showIndent(outfile, level)
            outfile.write('detalheLote=model_.ct_loteStatus(\n')
            self.detalheLote.exportLiteral(outfile, level, name_='detalheLote')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'detalheLote':
            obj_ = ct_loteStatus.factory()
            obj_.build(child_)
            self.detalheLote = obj_
            obj_.original_tagname_ = 'detalheLote'
        elif nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
# end class lote


class ct_protocoloAnexoStatus(GeneratedsSuper):
    """estrutura utilizada na resposta da operadora sobre a situação do
    protocolo"""
    subclass = None
    superclass = None
    def __init__(self, identificacaoOperadora=None, dadosPrestador=None, loteAnexo=None):
        self.original_tagname_ = None
        self.identificacaoOperadora = identificacaoOperadora
        self.validate_st_registroANS(self.identificacaoOperadora)
        self.dadosPrestador = dadosPrestador
        self.loteAnexo = loteAnexo
    def factory(*args_, **kwargs_):
        if ct_protocoloAnexoStatus.subclass:
            return ct_protocoloAnexoStatus.subclass(*args_, **kwargs_)
        else:
            return ct_protocoloAnexoStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOperadora(self): return self.identificacaoOperadora
    def set_identificacaoOperadora(self, identificacaoOperadora): self.identificacaoOperadora = identificacaoOperadora
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_loteAnexo(self): return self.loteAnexo
    def set_loteAnexo(self, loteAnexo): self.loteAnexo = loteAnexo
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def hasContent_(self):
        if (
            self.identificacaoOperadora is not None or
            self.dadosPrestador is not None or
            self.loteAnexo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_protocoloAnexoStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_protocoloAnexoStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_protocoloAnexoStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_protocoloAnexoStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_protocoloAnexoStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificacaoOperadora>%s</%sidentificacaoOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.identificacaoOperadora).encode(ExternalEncoding), input_name='identificacaoOperadora'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.loteAnexo is not None:
            self.loteAnexo.export(outfile, level, namespace_, name_='loteAnexo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_protocoloAnexoStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoOperadora is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOperadora=%s,\n' % quote_python(self.identificacaoOperadora).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.loteAnexo is not None:
            showIndent(outfile, level)
            outfile.write('loteAnexo=model_.loteAnexo(\n')
            self.loteAnexo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOperadora':
            identificacaoOperadora_ = child_.text
            identificacaoOperadora_ = self.gds_validate_string(identificacaoOperadora_, node, 'identificacaoOperadora')
            self.identificacaoOperadora = identificacaoOperadora_
            # validate type st_registroANS
            self.validate_st_registroANS(self.identificacaoOperadora)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'loteAnexo':
            obj_ = loteAnexo.factory()
            obj_.build(child_)
            self.loteAnexo = obj_
            obj_.original_tagname_ = 'loteAnexo'
# end class ct_protocoloAnexoStatus


class loteAnexo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, detalheLoteAnexo=None, mensagemErro=None):
        self.original_tagname_ = None
        self.detalheLoteAnexo = detalheLoteAnexo
        self.mensagemErro = mensagemErro
    def factory(*args_, **kwargs_):
        if loteAnexo.subclass:
            return loteAnexo.subclass(*args_, **kwargs_)
        else:
            return loteAnexo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_detalheLoteAnexo(self): return self.detalheLoteAnexo
    def set_detalheLoteAnexo(self, detalheLoteAnexo): self.detalheLoteAnexo = detalheLoteAnexo
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def hasContent_(self):
        if (
            self.detalheLoteAnexo is not None or
            self.mensagemErro is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='loteAnexo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='loteAnexo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='loteAnexo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='loteAnexo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='loteAnexo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.detalheLoteAnexo is not None:
            self.detalheLoteAnexo.export(outfile, level, namespace_, name_='detalheLoteAnexo', pretty_print=pretty_print)
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='loteAnexo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.detalheLoteAnexo is not None:
            showIndent(outfile, level)
            outfile.write('detalheLoteAnexo=model_.ct_loteAnexoStatus(\n')
            self.detalheLoteAnexo.exportLiteral(outfile, level, name_='detalheLoteAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'detalheLoteAnexo':
            obj_ = ct_loteAnexoStatus.factory()
            obj_.build(child_)
            self.detalheLoteAnexo = obj_
            obj_.original_tagname_ = 'detalheLoteAnexo'
        elif nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
# end class loteAnexo


class ct_recursoGlosaRecebimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nrProtocoloRecursoGlosa=None, dataEnvioRecurso=None, dataRecebimentoRecurso=None, numeroLote=None, registroANS=None, dadosPrestador=None, nrProtocoloRecursado=None, recursoProtocolo=None, qtGuiasRecurso=None, guiasRecurso=None, observacao=None, valorTotalRecursado=None):
        self.original_tagname_ = None
        self.nrProtocoloRecursoGlosa = nrProtocoloRecursoGlosa
        self.validate_st_texto12(self.nrProtocoloRecursoGlosa)
        if isinstance(dataEnvioRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioRecurso
        self.dataEnvioRecurso = initvalue_
        if isinstance(dataRecebimentoRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRecebimentoRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRecebimentoRecurso
        self.dataRecebimentoRecurso = initvalue_
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.dadosPrestador = dadosPrestador
        self.nrProtocoloRecursado = nrProtocoloRecursado
        self.validate_st_texto12(self.nrProtocoloRecursado)
        self.recursoProtocolo = recursoProtocolo
        self.qtGuiasRecurso = qtGuiasRecurso
        self.validate_st_numerico3(self.qtGuiasRecurso)
        if guiasRecurso is None:
            self.guiasRecurso = []
        else:
            self.guiasRecurso = guiasRecurso
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.valorTotalRecursado = valorTotalRecursado
    def factory(*args_, **kwargs_):
        if ct_recursoGlosaRecebimento.subclass:
            return ct_recursoGlosaRecebimento.subclass(*args_, **kwargs_)
        else:
            return ct_recursoGlosaRecebimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrProtocoloRecursoGlosa(self): return self.nrProtocoloRecursoGlosa
    def set_nrProtocoloRecursoGlosa(self, nrProtocoloRecursoGlosa): self.nrProtocoloRecursoGlosa = nrProtocoloRecursoGlosa
    def get_dataEnvioRecurso(self): return self.dataEnvioRecurso
    def set_dataEnvioRecurso(self, dataEnvioRecurso): self.dataEnvioRecurso = dataEnvioRecurso
    def get_dataRecebimentoRecurso(self): return self.dataRecebimentoRecurso
    def set_dataRecebimentoRecurso(self, dataRecebimentoRecurso): self.dataRecebimentoRecurso = dataRecebimentoRecurso
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_nrProtocoloRecursado(self): return self.nrProtocoloRecursado
    def set_nrProtocoloRecursado(self, nrProtocoloRecursado): self.nrProtocoloRecursado = nrProtocoloRecursado
    def get_recursoProtocolo(self): return self.recursoProtocolo
    def set_recursoProtocolo(self, recursoProtocolo): self.recursoProtocolo = recursoProtocolo
    def get_qtGuiasRecurso(self): return self.qtGuiasRecurso
    def set_qtGuiasRecurso(self, qtGuiasRecurso): self.qtGuiasRecurso = qtGuiasRecurso
    def get_guiasRecurso(self): return self.guiasRecurso
    def set_guiasRecurso(self, guiasRecurso): self.guiasRecurso = guiasRecurso
    def add_guiasRecurso(self, value): self.guiasRecurso.append(value)
    def insert_guiasRecurso_at(self, index, value): self.guiasRecurso.insert(index, value)
    def replace_guiasRecurso_at(self, index, value): self.guiasRecurso[index] = value
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_valorTotalRecursado(self): return self.valorTotalRecursado
    def set_valorTotalRecursado(self, valorTotalRecursado): self.valorTotalRecursado = valorTotalRecursado
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nrProtocoloRecursoGlosa is not None or
            self.dataEnvioRecurso is not None or
            self.dataRecebimentoRecurso is not None or
            self.numeroLote is not None or
            self.registroANS is not None or
            self.dadosPrestador is not None or
            self.nrProtocoloRecursado is not None or
            self.recursoProtocolo is not None or
            self.qtGuiasRecurso is not None or
            self.guiasRecurso or
            self.observacao is not None or
            self.valorTotalRecursado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_recursoGlosaRecebimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_recursoGlosaRecebimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_recursoGlosaRecebimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_recursoGlosaRecebimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_recursoGlosaRecebimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrProtocoloRecursoGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrProtocoloRecursoGlosa>%s</%snrProtocoloRecursoGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrProtocoloRecursoGlosa).encode(ExternalEncoding), input_name='nrProtocoloRecursoGlosa'), namespace_, eol_))
        if self.dataEnvioRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioRecurso>%s</%sdataEnvioRecurso>%s' % (namespace_, self.gds_format_date(self.dataEnvioRecurso, input_name='dataEnvioRecurso'), namespace_, eol_))
        if self.dataRecebimentoRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRecebimentoRecurso>%s</%sdataRecebimentoRecurso>%s' % (namespace_, self.gds_format_date(self.dataRecebimentoRecurso, input_name='dataRecebimentoRecurso'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.nrProtocoloRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrProtocoloRecursado>%s</%snrProtocoloRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrProtocoloRecursado).encode(ExternalEncoding), input_name='nrProtocoloRecursado'), namespace_, eol_))
        if self.recursoProtocolo is not None:
            self.recursoProtocolo.export(outfile, level, namespace_, name_='recursoProtocolo', pretty_print=pretty_print)
        if self.qtGuiasRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtGuiasRecurso>%s</%sqtGuiasRecurso>%s' % (namespace_, self.gds_format_integer(self.qtGuiasRecurso, input_name='qtGuiasRecurso'), namespace_, eol_))
        for guiasRecurso_ in self.guiasRecurso:
            guiasRecurso_.export(outfile, level, namespace_, name_='guiasRecurso', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalRecursado>%s</%svalorTotalRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalRecursado).encode(ExternalEncoding), input_name='valorTotalRecursado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_recursoGlosaRecebimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nrProtocoloRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('nrProtocoloRecursoGlosa=%s,\n' % quote_python(self.nrProtocoloRecursoGlosa).encode(ExternalEncoding))
        if self.dataEnvioRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioRecurso, input_name='dataEnvioRecurso'))
        if self.dataRecebimentoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataRecebimentoRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRecebimentoRecurso, input_name='dataRecebimentoRecurso'))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nrProtocoloRecursado is not None:
            showIndent(outfile, level)
            outfile.write('nrProtocoloRecursado=%s,\n' % quote_python(self.nrProtocoloRecursado).encode(ExternalEncoding))
        if self.recursoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('recursoProtocolo=model_.recursoProtocolo(\n')
            self.recursoProtocolo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.qtGuiasRecurso is not None:
            showIndent(outfile, level)
            outfile.write('qtGuiasRecurso=%d,\n' % self.qtGuiasRecurso)
        showIndent(outfile, level)
        outfile.write('guiasRecurso=[\n')
        level += 1
        for guiasRecurso_ in self.guiasRecurso:
            showIndent(outfile, level)
            outfile.write('model_.guiasRecurso(\n')
            guiasRecurso_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalRecursado=%s,\n' % quote_python(self.valorTotalRecursado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrProtocoloRecursoGlosa':
            nrProtocoloRecursoGlosa_ = child_.text
            nrProtocoloRecursoGlosa_ = self.gds_validate_string(nrProtocoloRecursoGlosa_, node, 'nrProtocoloRecursoGlosa')
            self.nrProtocoloRecursoGlosa = nrProtocoloRecursoGlosa_
            # validate type st_texto12
            self.validate_st_texto12(self.nrProtocoloRecursoGlosa)
        elif nodeName_ == 'dataEnvioRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioRecurso)
        elif nodeName_ == 'dataRecebimentoRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRecebimentoRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataRecebimentoRecurso)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'nrProtocoloRecursado':
            nrProtocoloRecursado_ = child_.text
            nrProtocoloRecursado_ = self.gds_validate_string(nrProtocoloRecursado_, node, 'nrProtocoloRecursado')
            self.nrProtocoloRecursado = nrProtocoloRecursado_
            # validate type st_texto12
            self.validate_st_texto12(self.nrProtocoloRecursado)
        elif nodeName_ == 'recursoProtocolo':
            obj_ = recursoProtocolo.factory()
            obj_.build(child_)
            self.recursoProtocolo = obj_
            obj_.original_tagname_ = 'recursoProtocolo'
        elif nodeName_ == 'qtGuiasRecurso':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'qtGuiasRecurso')
            self.qtGuiasRecurso = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.qtGuiasRecurso)
        elif nodeName_ == 'guiasRecurso':
            obj_ = guiasRecurso.factory()
            obj_.build(child_)
            self.guiasRecurso.append(obj_)
            obj_.original_tagname_ = 'guiasRecurso'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'valorTotalRecursado':
            valorTotalRecursado_ = child_.text
            valorTotalRecursado_ = self.gds_validate_string(valorTotalRecursado_, node, 'valorTotalRecursado')
            self.valorTotalRecursado = valorTotalRecursado_
# end class ct_recursoGlosaRecebimento


class guiasRecurso(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaOrigem=None, numeroGuiaOperadora=None, senha=None, opcaoRecursoGuia=None):
        self.original_tagname_ = None
        self.numeroGuiaOrigem = numeroGuiaOrigem
        self.validate_st_texto20(self.numeroGuiaOrigem)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        self.opcaoRecursoGuia = opcaoRecursoGuia
    def factory(*args_, **kwargs_):
        if guiasRecurso.subclass:
            return guiasRecurso.subclass(*args_, **kwargs_)
        else:
            return guiasRecurso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaOrigem(self): return self.numeroGuiaOrigem
    def set_numeroGuiaOrigem(self, numeroGuiaOrigem): self.numeroGuiaOrigem = numeroGuiaOrigem
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_opcaoRecursoGuia(self): return self.opcaoRecursoGuia
    def set_opcaoRecursoGuia(self, opcaoRecursoGuia): self.opcaoRecursoGuia = opcaoRecursoGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaOrigem is not None or
            self.numeroGuiaOperadora is not None or
            self.senha is not None or
            self.opcaoRecursoGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='guiasRecurso', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='guiasRecurso')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='guiasRecurso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='guiasRecurso'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='guiasRecurso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaOrigem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOrigem>%s</%snumeroGuiaOrigem>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOrigem).encode(ExternalEncoding), input_name='numeroGuiaOrigem'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.opcaoRecursoGuia is not None:
            self.opcaoRecursoGuia.export(outfile, level, namespace_, name_='opcaoRecursoGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='guiasRecurso'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaOrigem is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOrigem=%s,\n' % quote_python(self.numeroGuiaOrigem).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.opcaoRecursoGuia is not None:
            showIndent(outfile, level)
            outfile.write('opcaoRecursoGuia=model_.opcaoRecursoGuia(\n')
            self.opcaoRecursoGuia.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaOrigem':
            numeroGuiaOrigem_ = child_.text
            numeroGuiaOrigem_ = self.gds_validate_string(numeroGuiaOrigem_, node, 'numeroGuiaOrigem')
            self.numeroGuiaOrigem = numeroGuiaOrigem_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOrigem)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'opcaoRecursoGuia':
            obj_ = opcaoRecursoGuia.factory()
            obj_.build(child_)
            self.opcaoRecursoGuia = obj_
            obj_.original_tagname_ = 'opcaoRecursoGuia'
# end class guiasRecurso


class opcaoRecursoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, recursoGuia=None, itensGuia=None):
        self.original_tagname_ = None
        if recursoGuia is None:
            self.recursoGuia = []
        else:
            self.recursoGuia = recursoGuia
        if itensGuia is None:
            self.itensGuia = []
        else:
            self.itensGuia = itensGuia
    def factory(*args_, **kwargs_):
        if opcaoRecursoGuia.subclass:
            return opcaoRecursoGuia.subclass(*args_, **kwargs_)
        else:
            return opcaoRecursoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_recursoGuia(self): return self.recursoGuia
    def set_recursoGuia(self, recursoGuia): self.recursoGuia = recursoGuia
    def add_recursoGuia(self, value): self.recursoGuia.append(value)
    def insert_recursoGuia_at(self, index, value): self.recursoGuia.insert(index, value)
    def replace_recursoGuia_at(self, index, value): self.recursoGuia[index] = value
    def get_itensGuia(self): return self.itensGuia
    def set_itensGuia(self, itensGuia): self.itensGuia = itensGuia
    def add_itensGuia(self, value): self.itensGuia.append(value)
    def insert_itensGuia_at(self, index, value): self.itensGuia.insert(index, value)
    def replace_itensGuia_at(self, index, value): self.itensGuia[index] = value
    def hasContent_(self):
        if (
            self.recursoGuia or
            self.itensGuia
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='opcaoRecursoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='opcaoRecursoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='opcaoRecursoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='opcaoRecursoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='opcaoRecursoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for recursoGuia_ in self.recursoGuia:
            recursoGuia_.export(outfile, level, namespace_, name_='recursoGuia', pretty_print=pretty_print)
        for itensGuia_ in self.itensGuia:
            itensGuia_.export(outfile, level, namespace_, name_='itensGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='opcaoRecursoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('recursoGuia=[\n')
        level += 1
        for recursoGuia_ in self.recursoGuia:
            showIndent(outfile, level)
            outfile.write('model_.recursoGuia(\n')
            recursoGuia_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('itensGuia=[\n')
        level += 1
        for itensGuia_ in self.itensGuia:
            showIndent(outfile, level)
            outfile.write('model_.itensGuia(\n')
            itensGuia_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'recursoGuia':
            obj_ = recursoGuia.factory()
            obj_.build(child_)
            self.recursoGuia.append(obj_)
            obj_.original_tagname_ = 'recursoGuia'
        elif nodeName_ == 'itensGuia':
            obj_ = itensGuia.factory()
            obj_.build(child_)
            self.itensGuia.append(obj_)
            obj_.original_tagname_ = 'itensGuia'
# end class opcaoRecursoGuia


class itensGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataInicio=None, dataFim=None, procRecurso=None, denteRegiao=None, denteFace=None, codGlosaItem=None, valorRecursado=None, justificativaItem=None):
        self.original_tagname_ = None
        if isinstance(dataInicio, basestring):
            initvalue_ = datetime_.datetime.strptime(dataInicio, '%Y-%m-%d').date()
        else:
            initvalue_ = dataInicio
        self.dataInicio = initvalue_
        if isinstance(dataFim, basestring):
            initvalue_ = datetime_.datetime.strptime(dataFim, '%Y-%m-%d').date()
        else:
            initvalue_ = dataFim
        self.dataFim = initvalue_
        self.procRecurso = procRecurso
        self.denteRegiao = denteRegiao
        self.denteFace = denteFace
        self.validate_dm_face(self.denteFace)
        self.codGlosaItem = codGlosaItem
        self.validate_dm_tipoGlosa(self.codGlosaItem)
        self.valorRecursado = valorRecursado
        self.justificativaItem = justificativaItem
        self.validate_st_texto150(self.justificativaItem)
    def factory(*args_, **kwargs_):
        if itensGuia.subclass:
            return itensGuia.subclass(*args_, **kwargs_)
        else:
            return itensGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataInicio(self): return self.dataInicio
    def set_dataInicio(self, dataInicio): self.dataInicio = dataInicio
    def get_dataFim(self): return self.dataFim
    def set_dataFim(self, dataFim): self.dataFim = dataFim
    def get_procRecurso(self): return self.procRecurso
    def set_procRecurso(self, procRecurso): self.procRecurso = procRecurso
    def get_denteRegiao(self): return self.denteRegiao
    def set_denteRegiao(self, denteRegiao): self.denteRegiao = denteRegiao
    def get_denteFace(self): return self.denteFace
    def set_denteFace(self, denteFace): self.denteFace = denteFace
    def get_codGlosaItem(self): return self.codGlosaItem
    def set_codGlosaItem(self, codGlosaItem): self.codGlosaItem = codGlosaItem
    def get_valorRecursado(self): return self.valorRecursado
    def set_valorRecursado(self, valorRecursado): self.valorRecursado = valorRecursado
    def get_justificativaItem(self): return self.justificativaItem
    def set_justificativaItem(self, justificativaItem): self.justificativaItem = justificativaItem
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_face(self, value):
        # Validate type dm_face, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_dm_face_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_dm_face_patterns_, ))
    validate_dm_face_patterns_ = [['^[OLMVDIP]{1,5}$']]
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataInicio is not None or
            self.dataFim is not None or
            self.procRecurso is not None or
            self.denteRegiao is not None or
            self.denteFace is not None or
            self.codGlosaItem is not None or
            self.valorRecursado is not None or
            self.justificativaItem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='itensGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='itensGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='itensGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='itensGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='itensGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataInicio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataInicio>%s</%sdataInicio>%s' % (namespace_, self.gds_format_date(self.dataInicio, input_name='dataInicio'), namespace_, eol_))
        if self.dataFim is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataFim>%s</%sdataFim>%s' % (namespace_, self.gds_format_date(self.dataFim, input_name='dataFim'), namespace_, eol_))
        if self.procRecurso is not None:
            self.procRecurso.export(outfile, level, namespace_, name_='procRecurso', pretty_print=pretty_print)
        if self.denteRegiao is not None:
            self.denteRegiao.export(outfile, level, namespace_, name_='denteRegiao', pretty_print=pretty_print)
        if self.denteFace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdenteFace>%s</%sdenteFace>%s' % (namespace_, self.gds_format_string(quote_xml(self.denteFace).encode(ExternalEncoding), input_name='denteFace'), namespace_, eol_))
        if self.codGlosaItem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodGlosaItem>%s</%scodGlosaItem>%s' % (namespace_, self.gds_format_string(quote_xml(self.codGlosaItem).encode(ExternalEncoding), input_name='codGlosaItem'), namespace_, eol_))
        if self.valorRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorRecursado>%s</%svalorRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorRecursado).encode(ExternalEncoding), input_name='valorRecursado'), namespace_, eol_))
        if self.justificativaItem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaItem>%s</%sjustificativaItem>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaItem).encode(ExternalEncoding), input_name='justificativaItem'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='itensGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataInicio is not None:
            showIndent(outfile, level)
            outfile.write('dataInicio=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataInicio, input_name='dataInicio'))
        if self.dataFim is not None:
            showIndent(outfile, level)
            outfile.write('dataFim=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataFim, input_name='dataFim'))
        if self.procRecurso is not None:
            showIndent(outfile, level)
            outfile.write('procRecurso=model_.ct_procedimentoDados(\n')
            self.procRecurso.exportLiteral(outfile, level, name_='procRecurso')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteRegiao is not None:
            showIndent(outfile, level)
            outfile.write('denteRegiao=model_.denteRegiao(\n')
            self.denteRegiao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteFace is not None:
            showIndent(outfile, level)
            outfile.write('denteFace=%s,\n' % quote_python(self.denteFace).encode(ExternalEncoding))
        if self.codGlosaItem is not None:
            showIndent(outfile, level)
            outfile.write('codGlosaItem=%s,\n' % quote_python(self.codGlosaItem).encode(ExternalEncoding))
        if self.valorRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorRecursado=%s,\n' % quote_python(self.valorRecursado).encode(ExternalEncoding))
        if self.justificativaItem is not None:
            showIndent(outfile, level)
            outfile.write('justificativaItem=%s,\n' % quote_python(self.justificativaItem).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataInicio':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataInicio = dval_
            # validate type st_data
            self.validate_st_data(self.dataInicio)
        elif nodeName_ == 'dataFim':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataFim = dval_
            # validate type st_data
            self.validate_st_data(self.dataFim)
        elif nodeName_ == 'procRecurso':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procRecurso = obj_
            obj_.original_tagname_ = 'procRecurso'
        elif nodeName_ == 'denteRegiao':
            obj_ = denteRegiao.factory()
            obj_.build(child_)
            self.denteRegiao = obj_
            obj_.original_tagname_ = 'denteRegiao'
        elif nodeName_ == 'denteFace':
            denteFace_ = child_.text
            denteFace_ = self.gds_validate_string(denteFace_, node, 'denteFace')
            self.denteFace = denteFace_
            # validate type dm_face
            self.validate_dm_face(self.denteFace)
        elif nodeName_ == 'codGlosaItem':
            codGlosaItem_ = child_.text
            codGlosaItem_ = self.gds_validate_string(codGlosaItem_, node, 'codGlosaItem')
            self.codGlosaItem = codGlosaItem_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codGlosaItem)
        elif nodeName_ == 'valorRecursado':
            valorRecursado_ = child_.text
            valorRecursado_ = self.gds_validate_string(valorRecursado_, node, 'valorRecursado')
            self.valorRecursado = valorRecursado_
        elif nodeName_ == 'justificativaItem':
            justificativaItem_ = child_.text
            justificativaItem_ = self.gds_validate_string(justificativaItem_, node, 'justificativaItem')
            self.justificativaItem = justificativaItem_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaItem)
# end class itensGuia


class ct_recebimentoLote(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, protocoloRecebimento=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.protocoloRecebimento = protocoloRecebimento
    def factory(*args_, **kwargs_):
        if ct_recebimentoLote.subclass:
            return ct_recebimentoLote.subclass(*args_, **kwargs_)
        else:
            return ct_recebimentoLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_protocoloRecebimento(self): return self.protocoloRecebimento
    def set_protocoloRecebimento(self, protocoloRecebimento): self.protocoloRecebimento = protocoloRecebimento
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.protocoloRecebimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_recebimentoLote', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_recebimentoLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_recebimentoLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_recebimentoLote'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_recebimentoLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.protocoloRecebimento is not None:
            self.protocoloRecebimento.export(outfile, level, namespace_, name_='protocoloRecebimento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_recebimentoLote'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.protocoloRecebimento is not None:
            showIndent(outfile, level)
            outfile.write('protocoloRecebimento=model_.ct_protocoloRecebimento(\n')
            self.protocoloRecebimento.exportLiteral(outfile, level, name_='protocoloRecebimento')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'protocoloRecebimento':
            obj_ = ct_protocoloRecebimento.factory()
            obj_.build(child_)
            self.protocoloRecebimento = obj_
            obj_.original_tagname_ = 'protocoloRecebimento'
# end class ct_recebimentoLote


class ct_recebimentoRecurso(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, protocoloRecebimento=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.protocoloRecebimento = protocoloRecebimento
    def factory(*args_, **kwargs_):
        if ct_recebimentoRecurso.subclass:
            return ct_recebimentoRecurso.subclass(*args_, **kwargs_)
        else:
            return ct_recebimentoRecurso(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_protocoloRecebimento(self): return self.protocoloRecebimento
    def set_protocoloRecebimento(self, protocoloRecebimento): self.protocoloRecebimento = protocoloRecebimento
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.protocoloRecebimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_recebimentoRecurso', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_recebimentoRecurso')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_recebimentoRecurso', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_recebimentoRecurso'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_recebimentoRecurso', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.protocoloRecebimento is not None:
            self.protocoloRecebimento.export(outfile, level, namespace_, name_='protocoloRecebimento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_recebimentoRecurso'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.protocoloRecebimento is not None:
            showIndent(outfile, level)
            outfile.write('protocoloRecebimento=model_.ct_recursoGlosaRecebimento(\n')
            self.protocoloRecebimento.exportLiteral(outfile, level, name_='protocoloRecebimento')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'protocoloRecebimento':
            obj_ = ct_recursoGlosaRecebimento.factory()
            obj_.build(child_)
            self.protocoloRecebimento = obj_
            obj_.original_tagname_ = 'protocoloRecebimento'
# end class ct_recebimentoRecurso


class ct_reciboCancelaGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, reciboCancelaGuia=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.reciboCancelaGuia = reciboCancelaGuia
    def factory(*args_, **kwargs_):
        if ct_reciboCancelaGuia.subclass:
            return ct_reciboCancelaGuia.subclass(*args_, **kwargs_)
        else:
            return ct_reciboCancelaGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_reciboCancelaGuia(self): return self.reciboCancelaGuia
    def set_reciboCancelaGuia(self, reciboCancelaGuia): self.reciboCancelaGuia = reciboCancelaGuia
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.reciboCancelaGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_reciboCancelaGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_reciboCancelaGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_reciboCancelaGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_reciboCancelaGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_reciboCancelaGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.reciboCancelaGuia is not None:
            self.reciboCancelaGuia.export(outfile, level, namespace_, name_='reciboCancelaGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_reciboCancelaGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboCancelaGuia is not None:
            showIndent(outfile, level)
            outfile.write('reciboCancelaGuia=model_.ct_guiaCancelamentoRecibo(\n')
            self.reciboCancelaGuia.exportLiteral(outfile, level, name_='reciboCancelaGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'reciboCancelaGuia':
            obj_ = ct_guiaCancelamentoRecibo.factory()
            obj_.build(child_)
            self.reciboCancelaGuia = obj_
            obj_.original_tagname_ = 'reciboCancelaGuia'
# end class ct_reciboCancelaGuia


class ct_reciboComunicacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, reciboComunicacao=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.reciboComunicacao = reciboComunicacao
    def factory(*args_, **kwargs_):
        if ct_reciboComunicacao.subclass:
            return ct_reciboComunicacao.subclass(*args_, **kwargs_)
        else:
            return ct_reciboComunicacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_reciboComunicacao(self): return self.reciboComunicacao
    def set_reciboComunicacao(self, reciboComunicacao): self.reciboComunicacao = reciboComunicacao
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.reciboComunicacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_reciboComunicacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_reciboComunicacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_reciboComunicacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_reciboComunicacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_reciboComunicacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.reciboComunicacao is not None:
            self.reciboComunicacao.export(outfile, level, namespace_, name_='reciboComunicacao', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_reciboComunicacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboComunicacao is not None:
            showIndent(outfile, level)
            outfile.write('reciboComunicacao=model_.ctm_beneficiarioComunicacaoRecibo(\n')
            self.reciboComunicacao.exportLiteral(outfile, level, name_='reciboComunicacao')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'reciboComunicacao':
            obj_ = ctm_beneficiarioComunicacaoRecibo.factory()
            obj_.build(child_)
            self.reciboComunicacao = obj_
            obj_.original_tagname_ = 'reciboComunicacao'
# end class ct_reciboComunicacao


class ct_respostaElegibilidade(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, reciboElegibilidade=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.reciboElegibilidade = reciboElegibilidade
    def factory(*args_, **kwargs_):
        if ct_respostaElegibilidade.subclass:
            return ct_respostaElegibilidade.subclass(*args_, **kwargs_)
        else:
            return ct_respostaElegibilidade(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_reciboElegibilidade(self): return self.reciboElegibilidade
    def set_reciboElegibilidade(self, reciboElegibilidade): self.reciboElegibilidade = reciboElegibilidade
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.reciboElegibilidade is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_respostaElegibilidade', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_respostaElegibilidade')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_respostaElegibilidade', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_respostaElegibilidade'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_respostaElegibilidade', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.reciboElegibilidade is not None:
            self.reciboElegibilidade.export(outfile, level, namespace_, name_='reciboElegibilidade', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_respostaElegibilidade'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboElegibilidade is not None:
            showIndent(outfile, level)
            outfile.write('reciboElegibilidade=model_.ct_elegibilidadeRecibo(\n')
            self.reciboElegibilidade.exportLiteral(outfile, level, name_='reciboElegibilidade')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'reciboElegibilidade':
            obj_ = ct_elegibilidadeRecibo.factory()
            obj_.build(child_)
            self.reciboElegibilidade = obj_
            obj_.original_tagname_ = 'reciboElegibilidade'
# end class ct_respostaElegibilidade


class ct_respostaGlosa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, reciboGlosa=None, reciboGlosaOdonto=None, reciboGlosaStatus=None, mensagemErro=None):
        self.original_tagname_ = None
        self.reciboGlosa = reciboGlosa
        self.reciboGlosaOdonto = reciboGlosaOdonto
        self.reciboGlosaStatus = reciboGlosaStatus
        self.mensagemErro = mensagemErro
    def factory(*args_, **kwargs_):
        if ct_respostaGlosa.subclass:
            return ct_respostaGlosa.subclass(*args_, **kwargs_)
        else:
            return ct_respostaGlosa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_reciboGlosa(self): return self.reciboGlosa
    def set_reciboGlosa(self, reciboGlosa): self.reciboGlosa = reciboGlosa
    def get_reciboGlosaOdonto(self): return self.reciboGlosaOdonto
    def set_reciboGlosaOdonto(self, reciboGlosaOdonto): self.reciboGlosaOdonto = reciboGlosaOdonto
    def get_reciboGlosaStatus(self): return self.reciboGlosaStatus
    def set_reciboGlosaStatus(self, reciboGlosaStatus): self.reciboGlosaStatus = reciboGlosaStatus
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def hasContent_(self):
        if (
            self.reciboGlosa is not None or
            self.reciboGlosaOdonto is not None or
            self.reciboGlosaStatus is not None or
            self.mensagemErro is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_respostaGlosa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_respostaGlosa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_respostaGlosa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_respostaGlosa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_respostaGlosa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.reciboGlosa is not None:
            self.reciboGlosa.export(outfile, level, namespace_, name_='reciboGlosa', pretty_print=pretty_print)
        if self.reciboGlosaOdonto is not None:
            self.reciboGlosaOdonto.export(outfile, level, namespace_, name_='reciboGlosaOdonto', pretty_print=pretty_print)
        if self.reciboGlosaStatus is not None:
            self.reciboGlosaStatus.export(outfile, level, namespace_, name_='reciboGlosaStatus', pretty_print=pretty_print)
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_respostaGlosa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.reciboGlosa is not None:
            showIndent(outfile, level)
            outfile.write('reciboGlosa=model_.ct_glosaRecibo(\n')
            self.reciboGlosa.exportLiteral(outfile, level, name_='reciboGlosa')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboGlosaOdonto is not None:
            showIndent(outfile, level)
            outfile.write('reciboGlosaOdonto=model_.ct_glosaReciboOdonto(\n')
            self.reciboGlosaOdonto.exportLiteral(outfile, level, name_='reciboGlosaOdonto')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.reciboGlosaStatus is not None:
            showIndent(outfile, level)
            outfile.write('reciboGlosaStatus=model_.reciboGlosaStatus(\n')
            self.reciboGlosaStatus.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'reciboGlosa':
            obj_ = ct_glosaRecibo.factory()
            obj_.build(child_)
            self.reciboGlosa = obj_
            obj_.original_tagname_ = 'reciboGlosa'
        elif nodeName_ == 'reciboGlosaOdonto':
            obj_ = ct_glosaReciboOdonto.factory()
            obj_.build(child_)
            self.reciboGlosaOdonto = obj_
            obj_.original_tagname_ = 'reciboGlosaOdonto'
        elif nodeName_ == 'reciboGlosaStatus':
            obj_ = reciboGlosaStatus.factory()
            obj_.build(child_)
            self.reciboGlosaStatus = obj_
            obj_.original_tagname_ = 'reciboGlosaStatus'
        elif nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
# end class ct_respostaGlosa


class reciboGlosaStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nrProtocoloRecursoGlosa=None, dataEnvioRecurso=None, dataRecebimentoRecurso=None, numeroLote=None, registroANS=None, dadosPrestador=None, nrProtocoloSituacaoRecursoGlosa=None, dataSituacao=None, situacaoProtocolo=None):
        self.original_tagname_ = None
        self.nrProtocoloRecursoGlosa = nrProtocoloRecursoGlosa
        self.validate_st_texto12(self.nrProtocoloRecursoGlosa)
        if isinstance(dataEnvioRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEnvioRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEnvioRecurso
        self.dataEnvioRecurso = initvalue_
        if isinstance(dataRecebimentoRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRecebimentoRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRecebimentoRecurso
        self.dataRecebimentoRecurso = initvalue_
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.dadosPrestador = dadosPrestador
        self.nrProtocoloSituacaoRecursoGlosa = nrProtocoloSituacaoRecursoGlosa
        self.validate_st_texto12(self.nrProtocoloSituacaoRecursoGlosa)
        if isinstance(dataSituacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSituacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSituacao
        self.dataSituacao = initvalue_
        self.situacaoProtocolo = situacaoProtocolo
        self.validate_dm_statusProtocolo(self.situacaoProtocolo)
    def factory(*args_, **kwargs_):
        if reciboGlosaStatus.subclass:
            return reciboGlosaStatus.subclass(*args_, **kwargs_)
        else:
            return reciboGlosaStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrProtocoloRecursoGlosa(self): return self.nrProtocoloRecursoGlosa
    def set_nrProtocoloRecursoGlosa(self, nrProtocoloRecursoGlosa): self.nrProtocoloRecursoGlosa = nrProtocoloRecursoGlosa
    def get_dataEnvioRecurso(self): return self.dataEnvioRecurso
    def set_dataEnvioRecurso(self, dataEnvioRecurso): self.dataEnvioRecurso = dataEnvioRecurso
    def get_dataRecebimentoRecurso(self): return self.dataRecebimentoRecurso
    def set_dataRecebimentoRecurso(self, dataRecebimentoRecurso): self.dataRecebimentoRecurso = dataRecebimentoRecurso
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_nrProtocoloSituacaoRecursoGlosa(self): return self.nrProtocoloSituacaoRecursoGlosa
    def set_nrProtocoloSituacaoRecursoGlosa(self, nrProtocoloSituacaoRecursoGlosa): self.nrProtocoloSituacaoRecursoGlosa = nrProtocoloSituacaoRecursoGlosa
    def get_dataSituacao(self): return self.dataSituacao
    def set_dataSituacao(self, dataSituacao): self.dataSituacao = dataSituacao
    def get_situacaoProtocolo(self): return self.situacaoProtocolo
    def set_situacaoProtocolo(self, situacaoProtocolo): self.situacaoProtocolo = situacaoProtocolo
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_dm_statusProtocolo(self, value):
        # Validate type dm_statusProtocolo, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7', '8']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nrProtocoloRecursoGlosa is not None or
            self.dataEnvioRecurso is not None or
            self.dataRecebimentoRecurso is not None or
            self.numeroLote is not None or
            self.registroANS is not None or
            self.dadosPrestador is not None or
            self.nrProtocoloSituacaoRecursoGlosa is not None or
            self.dataSituacao is not None or
            self.situacaoProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='reciboGlosaStatus', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='reciboGlosaStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='reciboGlosaStatus', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='reciboGlosaStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='reciboGlosaStatus', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrProtocoloRecursoGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrProtocoloRecursoGlosa>%s</%snrProtocoloRecursoGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrProtocoloRecursoGlosa).encode(ExternalEncoding), input_name='nrProtocoloRecursoGlosa'), namespace_, eol_))
        if self.dataEnvioRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEnvioRecurso>%s</%sdataEnvioRecurso>%s' % (namespace_, self.gds_format_date(self.dataEnvioRecurso, input_name='dataEnvioRecurso'), namespace_, eol_))
        if self.dataRecebimentoRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRecebimentoRecurso>%s</%sdataRecebimentoRecurso>%s' % (namespace_, self.gds_format_date(self.dataRecebimentoRecurso, input_name='dataRecebimentoRecurso'), namespace_, eol_))
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.nrProtocoloSituacaoRecursoGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrProtocoloSituacaoRecursoGlosa>%s</%snrProtocoloSituacaoRecursoGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrProtocoloSituacaoRecursoGlosa).encode(ExternalEncoding), input_name='nrProtocoloSituacaoRecursoGlosa'), namespace_, eol_))
        if self.dataSituacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSituacao>%s</%sdataSituacao>%s' % (namespace_, self.gds_format_date(self.dataSituacao, input_name='dataSituacao'), namespace_, eol_))
        if self.situacaoProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssituacaoProtocolo>%s</%ssituacaoProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.situacaoProtocolo).encode(ExternalEncoding), input_name='situacaoProtocolo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='reciboGlosaStatus'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nrProtocoloRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('nrProtocoloRecursoGlosa=%s,\n' % quote_python(self.nrProtocoloRecursoGlosa).encode(ExternalEncoding))
        if self.dataEnvioRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataEnvioRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEnvioRecurso, input_name='dataEnvioRecurso'))
        if self.dataRecebimentoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataRecebimentoRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRecebimentoRecurso, input_name='dataRecebimentoRecurso'))
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.ct_contratadoDados(\n')
            self.dadosPrestador.exportLiteral(outfile, level, name_='dadosPrestador')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nrProtocoloSituacaoRecursoGlosa is not None:
            showIndent(outfile, level)
            outfile.write('nrProtocoloSituacaoRecursoGlosa=%s,\n' % quote_python(self.nrProtocoloSituacaoRecursoGlosa).encode(ExternalEncoding))
        if self.dataSituacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSituacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSituacao, input_name='dataSituacao'))
        if self.situacaoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('situacaoProtocolo=%s,\n' % quote_python(self.situacaoProtocolo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrProtocoloRecursoGlosa':
            nrProtocoloRecursoGlosa_ = child_.text
            nrProtocoloRecursoGlosa_ = self.gds_validate_string(nrProtocoloRecursoGlosa_, node, 'nrProtocoloRecursoGlosa')
            self.nrProtocoloRecursoGlosa = nrProtocoloRecursoGlosa_
            # validate type st_texto12
            self.validate_st_texto12(self.nrProtocoloRecursoGlosa)
        elif nodeName_ == 'dataEnvioRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEnvioRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataEnvioRecurso)
        elif nodeName_ == 'dataRecebimentoRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRecebimentoRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataRecebimentoRecurso)
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'dadosPrestador':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'nrProtocoloSituacaoRecursoGlosa':
            nrProtocoloSituacaoRecursoGlosa_ = child_.text
            nrProtocoloSituacaoRecursoGlosa_ = self.gds_validate_string(nrProtocoloSituacaoRecursoGlosa_, node, 'nrProtocoloSituacaoRecursoGlosa')
            self.nrProtocoloSituacaoRecursoGlosa = nrProtocoloSituacaoRecursoGlosa_
            # validate type st_texto12
            self.validate_st_texto12(self.nrProtocoloSituacaoRecursoGlosa)
        elif nodeName_ == 'dataSituacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSituacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSituacao)
        elif nodeName_ == 'situacaoProtocolo':
            situacaoProtocolo_ = child_.text
            situacaoProtocolo_ = self.gds_validate_string(situacaoProtocolo_, node, 'situacaoProtocolo')
            self.situacaoProtocolo = situacaoProtocolo_
            # validate type dm_statusProtocolo
            self.validate_dm_statusProtocolo(self.situacaoProtocolo)
# end class reciboGlosaStatus


class ct_respostaGlosaGuiaMedica(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, senha=None, codGlosa=None, justificativaPrestador=None, recursoGuiaAcatado=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        self.codGlosa = codGlosa
        self.validate_dm_tipoGlosa(self.codGlosa)
        self.justificativaPrestador = justificativaPrestador
        self.validate_st_texto150(self.justificativaPrestador)
        self.recursoGuiaAcatado = recursoGuiaAcatado
        self.validate_dm_simNao(self.recursoGuiaAcatado)
    def factory(*args_, **kwargs_):
        if ct_respostaGlosaGuiaMedica.subclass:
            return ct_respostaGlosaGuiaMedica.subclass(*args_, **kwargs_)
        else:
            return ct_respostaGlosaGuiaMedica(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_codGlosa(self): return self.codGlosa
    def set_codGlosa(self, codGlosa): self.codGlosa = codGlosa
    def get_justificativaPrestador(self): return self.justificativaPrestador
    def set_justificativaPrestador(self, justificativaPrestador): self.justificativaPrestador = justificativaPrestador
    def get_recursoGuiaAcatado(self): return self.recursoGuiaAcatado
    def set_recursoGuiaAcatado(self, recursoGuiaAcatado): self.recursoGuiaAcatado = recursoGuiaAcatado
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.senha is not None or
            self.codGlosa is not None or
            self.justificativaPrestador is not None or
            self.recursoGuiaAcatado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_respostaGlosaGuiaMedica', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_respostaGlosaGuiaMedica')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_respostaGlosaGuiaMedica', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_respostaGlosaGuiaMedica'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_respostaGlosaGuiaMedica', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.codGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodGlosa>%s</%scodGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.codGlosa).encode(ExternalEncoding), input_name='codGlosa'), namespace_, eol_))
        if self.justificativaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaPrestador>%s</%sjustificativaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaPrestador).encode(ExternalEncoding), input_name='justificativaPrestador'), namespace_, eol_))
        if self.recursoGuiaAcatado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecursoGuiaAcatado>%s</%srecursoGuiaAcatado>%s' % (namespace_, self.gds_format_string(quote_xml(self.recursoGuiaAcatado).encode(ExternalEncoding), input_name='recursoGuiaAcatado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_respostaGlosaGuiaMedica'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.codGlosa is not None:
            showIndent(outfile, level)
            outfile.write('codGlosa=%s,\n' % quote_python(self.codGlosa).encode(ExternalEncoding))
        if self.justificativaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('justificativaPrestador=%s,\n' % quote_python(self.justificativaPrestador).encode(ExternalEncoding))
        if self.recursoGuiaAcatado is not None:
            showIndent(outfile, level)
            outfile.write('recursoGuiaAcatado=%s,\n' % quote_python(self.recursoGuiaAcatado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'codGlosa':
            codGlosa_ = child_.text
            codGlosa_ = self.gds_validate_string(codGlosa_, node, 'codGlosa')
            self.codGlosa = codGlosa_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codGlosa)
        elif nodeName_ == 'justificativaPrestador':
            justificativaPrestador_ = child_.text
            justificativaPrestador_ = self.gds_validate_string(justificativaPrestador_, node, 'justificativaPrestador')
            self.justificativaPrestador = justificativaPrestador_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaPrestador)
        elif nodeName_ == 'recursoGuiaAcatado':
            recursoGuiaAcatado_ = child_.text
            recursoGuiaAcatado_ = self.gds_validate_string(recursoGuiaAcatado_, node, 'recursoGuiaAcatado')
            self.recursoGuiaAcatado = recursoGuiaAcatado_
            # validate type dm_simNao
            self.validate_dm_simNao(self.recursoGuiaAcatado)
# end class ct_respostaGlosaGuiaMedica


class ct_respostaGlosaItemMedico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, senha=None, dataRealizacao=None, dataFim=None, procRecurso=None, codGlosa=None, valorRecursado=None, justificativaPrestador=None, valorAcatadado=None, justificativaOperadora=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        if isinstance(dataRealizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRealizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRealizacao
        self.dataRealizacao = initvalue_
        if isinstance(dataFim, basestring):
            initvalue_ = datetime_.datetime.strptime(dataFim, '%Y-%m-%d').date()
        else:
            initvalue_ = dataFim
        self.dataFim = initvalue_
        self.procRecurso = procRecurso
        self.codGlosa = codGlosa
        self.validate_dm_tipoGlosa(self.codGlosa)
        self.valorRecursado = valorRecursado
        self.justificativaPrestador = justificativaPrestador
        self.validate_st_texto150(self.justificativaPrestador)
        self.valorAcatadado = valorAcatadado
        self.justificativaOperadora = justificativaOperadora
        self.validate_st_texto150(self.justificativaOperadora)
    def factory(*args_, **kwargs_):
        if ct_respostaGlosaItemMedico.subclass:
            return ct_respostaGlosaItemMedico.subclass(*args_, **kwargs_)
        else:
            return ct_respostaGlosaItemMedico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_dataRealizacao(self): return self.dataRealizacao
    def set_dataRealizacao(self, dataRealizacao): self.dataRealizacao = dataRealizacao
    def get_dataFim(self): return self.dataFim
    def set_dataFim(self, dataFim): self.dataFim = dataFim
    def get_procRecurso(self): return self.procRecurso
    def set_procRecurso(self, procRecurso): self.procRecurso = procRecurso
    def get_codGlosa(self): return self.codGlosa
    def set_codGlosa(self, codGlosa): self.codGlosa = codGlosa
    def get_valorRecursado(self): return self.valorRecursado
    def set_valorRecursado(self, valorRecursado): self.valorRecursado = valorRecursado
    def get_justificativaPrestador(self): return self.justificativaPrestador
    def set_justificativaPrestador(self, justificativaPrestador): self.justificativaPrestador = justificativaPrestador
    def get_valorAcatadado(self): return self.valorAcatadado
    def set_valorAcatadado(self, valorAcatadado): self.valorAcatadado = valorAcatadado
    def get_justificativaOperadora(self): return self.justificativaOperadora
    def set_justificativaOperadora(self, justificativaOperadora): self.justificativaOperadora = justificativaOperadora
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.senha is not None or
            self.dataRealizacao is not None or
            self.dataFim is not None or
            self.procRecurso is not None or
            self.codGlosa is not None or
            self.valorRecursado is not None or
            self.justificativaPrestador is not None or
            self.valorAcatadado is not None or
            self.justificativaOperadora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_respostaGlosaItemMedico', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_respostaGlosaItemMedico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_respostaGlosaItemMedico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_respostaGlosaItemMedico'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_respostaGlosaItemMedico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.dataRealizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRealizacao>%s</%sdataRealizacao>%s' % (namespace_, self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'), namespace_, eol_))
        if self.dataFim is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataFim>%s</%sdataFim>%s' % (namespace_, self.gds_format_date(self.dataFim, input_name='dataFim'), namespace_, eol_))
        if self.procRecurso is not None:
            self.procRecurso.export(outfile, level, namespace_, name_='procRecurso', pretty_print=pretty_print)
        if self.codGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodGlosa>%s</%scodGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.codGlosa).encode(ExternalEncoding), input_name='codGlosa'), namespace_, eol_))
        if self.valorRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorRecursado>%s</%svalorRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorRecursado).encode(ExternalEncoding), input_name='valorRecursado'), namespace_, eol_))
        if self.justificativaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaPrestador>%s</%sjustificativaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaPrestador).encode(ExternalEncoding), input_name='justificativaPrestador'), namespace_, eol_))
        if self.valorAcatadado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorAcatadado>%s</%svalorAcatadado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorAcatadado).encode(ExternalEncoding), input_name='valorAcatadado'), namespace_, eol_))
        if self.justificativaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaOperadora>%s</%sjustificativaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaOperadora).encode(ExternalEncoding), input_name='justificativaOperadora'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_respostaGlosaItemMedico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.dataRealizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataRealizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'))
        if self.dataFim is not None:
            showIndent(outfile, level)
            outfile.write('dataFim=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataFim, input_name='dataFim'))
        if self.procRecurso is not None:
            showIndent(outfile, level)
            outfile.write('procRecurso=model_.ct_procedimentoDados(\n')
            self.procRecurso.exportLiteral(outfile, level, name_='procRecurso')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.codGlosa is not None:
            showIndent(outfile, level)
            outfile.write('codGlosa=%s,\n' % quote_python(self.codGlosa).encode(ExternalEncoding))
        if self.valorRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorRecursado=%s,\n' % quote_python(self.valorRecursado).encode(ExternalEncoding))
        if self.justificativaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('justificativaPrestador=%s,\n' % quote_python(self.justificativaPrestador).encode(ExternalEncoding))
        if self.valorAcatadado is not None:
            showIndent(outfile, level)
            outfile.write('valorAcatadado=%s,\n' % quote_python(self.valorAcatadado).encode(ExternalEncoding))
        if self.justificativaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('justificativaOperadora=%s,\n' % quote_python(self.justificativaOperadora).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'dataRealizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRealizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataRealizacao)
        elif nodeName_ == 'dataFim':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataFim = dval_
            # validate type st_data
            self.validate_st_data(self.dataFim)
        elif nodeName_ == 'procRecurso':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procRecurso = obj_
            obj_.original_tagname_ = 'procRecurso'
        elif nodeName_ == 'codGlosa':
            codGlosa_ = child_.text
            codGlosa_ = self.gds_validate_string(codGlosa_, node, 'codGlosa')
            self.codGlosa = codGlosa_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codGlosa)
        elif nodeName_ == 'valorRecursado':
            valorRecursado_ = child_.text
            valorRecursado_ = self.gds_validate_string(valorRecursado_, node, 'valorRecursado')
            self.valorRecursado = valorRecursado_
        elif nodeName_ == 'justificativaPrestador':
            justificativaPrestador_ = child_.text
            justificativaPrestador_ = self.gds_validate_string(justificativaPrestador_, node, 'justificativaPrestador')
            self.justificativaPrestador = justificativaPrestador_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaPrestador)
        elif nodeName_ == 'valorAcatadado':
            valorAcatadado_ = child_.text
            valorAcatadado_ = self.gds_validate_string(valorAcatadado_, node, 'valorAcatadado')
            self.valorAcatadado = valorAcatadado_
        elif nodeName_ == 'justificativaOperadora':
            justificativaOperadora_ = child_.text
            justificativaOperadora_ = self.gds_validate_string(justificativaOperadora_, node, 'justificativaOperadora')
            self.justificativaOperadora = justificativaOperadora_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaOperadora)
# end class ct_respostaGlosaItemMedico


class ct_respostaRecursoGuiaOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, senha=None, nomeBeneficiario=None, codGlosaGuia=None, justificativaGuia=None, recursoAcatadoGuia=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.codGlosaGuia = codGlosaGuia
        self.validate_dm_tipoGlosa(self.codGlosaGuia)
        self.justificativaGuia = justificativaGuia
        self.validate_st_texto150(self.justificativaGuia)
        self.recursoAcatadoGuia = recursoAcatadoGuia
        self.validate_dm_simNao(self.recursoAcatadoGuia)
    def factory(*args_, **kwargs_):
        if ct_respostaRecursoGuiaOdonto.subclass:
            return ct_respostaRecursoGuiaOdonto.subclass(*args_, **kwargs_)
        else:
            return ct_respostaRecursoGuiaOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_codGlosaGuia(self): return self.codGlosaGuia
    def set_codGlosaGuia(self, codGlosaGuia): self.codGlosaGuia = codGlosaGuia
    def get_justificativaGuia(self): return self.justificativaGuia
    def set_justificativaGuia(self, justificativaGuia): self.justificativaGuia = justificativaGuia
    def get_recursoAcatadoGuia(self): return self.recursoAcatadoGuia
    def set_recursoAcatadoGuia(self, recursoAcatadoGuia): self.recursoAcatadoGuia = recursoAcatadoGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.senha is not None or
            self.nomeBeneficiario is not None or
            self.codGlosaGuia is not None or
            self.justificativaGuia is not None or
            self.recursoAcatadoGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_respostaRecursoGuiaOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_respostaRecursoGuiaOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_respostaRecursoGuiaOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_respostaRecursoGuiaOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_respostaRecursoGuiaOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.codGlosaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodGlosaGuia>%s</%scodGlosaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.codGlosaGuia).encode(ExternalEncoding), input_name='codGlosaGuia'), namespace_, eol_))
        if self.justificativaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaGuia>%s</%sjustificativaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaGuia).encode(ExternalEncoding), input_name='justificativaGuia'), namespace_, eol_))
        if self.recursoAcatadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecursoAcatadoGuia>%s</%srecursoAcatadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.recursoAcatadoGuia).encode(ExternalEncoding), input_name='recursoAcatadoGuia'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_respostaRecursoGuiaOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.codGlosaGuia is not None:
            showIndent(outfile, level)
            outfile.write('codGlosaGuia=%s,\n' % quote_python(self.codGlosaGuia).encode(ExternalEncoding))
        if self.justificativaGuia is not None:
            showIndent(outfile, level)
            outfile.write('justificativaGuia=%s,\n' % quote_python(self.justificativaGuia).encode(ExternalEncoding))
        if self.recursoAcatadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('recursoAcatadoGuia=%s,\n' % quote_python(self.recursoAcatadoGuia).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'codGlosaGuia':
            codGlosaGuia_ = child_.text
            codGlosaGuia_ = self.gds_validate_string(codGlosaGuia_, node, 'codGlosaGuia')
            self.codGlosaGuia = codGlosaGuia_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codGlosaGuia)
        elif nodeName_ == 'justificativaGuia':
            justificativaGuia_ = child_.text
            justificativaGuia_ = self.gds_validate_string(justificativaGuia_, node, 'justificativaGuia')
            self.justificativaGuia = justificativaGuia_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaGuia)
        elif nodeName_ == 'recursoAcatadoGuia':
            recursoAcatadoGuia_ = child_.text
            recursoAcatadoGuia_ = self.gds_validate_string(recursoAcatadoGuia_, node, 'recursoAcatadoGuia')
            self.recursoAcatadoGuia = recursoAcatadoGuia_
            # validate type dm_simNao
            self.validate_dm_simNao(self.recursoAcatadoGuia)
# end class ct_respostaRecursoGuiaOdonto


class ct_respostaRecursoItemOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, senha=None, nomeBeneficiario=None, recursoProcedimento=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        if recursoProcedimento is None:
            self.recursoProcedimento = []
        else:
            self.recursoProcedimento = recursoProcedimento
    def factory(*args_, **kwargs_):
        if ct_respostaRecursoItemOdonto.subclass:
            return ct_respostaRecursoItemOdonto.subclass(*args_, **kwargs_)
        else:
            return ct_respostaRecursoItemOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_recursoProcedimento(self): return self.recursoProcedimento
    def set_recursoProcedimento(self, recursoProcedimento): self.recursoProcedimento = recursoProcedimento
    def add_recursoProcedimento(self, value): self.recursoProcedimento.append(value)
    def insert_recursoProcedimento_at(self, index, value): self.recursoProcedimento.insert(index, value)
    def replace_recursoProcedimento_at(self, index, value): self.recursoProcedimento[index] = value
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.senha is not None or
            self.nomeBeneficiario is not None or
            self.recursoProcedimento
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_respostaRecursoItemOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_respostaRecursoItemOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_respostaRecursoItemOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_respostaRecursoItemOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_respostaRecursoItemOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        for recursoProcedimento_ in self.recursoProcedimento:
            recursoProcedimento_.export(outfile, level, namespace_, name_='recursoProcedimento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_respostaRecursoItemOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('recursoProcedimento=[\n')
        level += 1
        for recursoProcedimento_ in self.recursoProcedimento:
            showIndent(outfile, level)
            outfile.write('model_.recursoProcedimento(\n')
            recursoProcedimento_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'recursoProcedimento':
            obj_ = recursoProcedimento.factory()
            obj_.build(child_)
            self.recursoProcedimento.append(obj_)
            obj_.original_tagname_ = 'recursoProcedimento'
# end class ct_respostaRecursoItemOdonto


class recursoProcedimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataRealizacao=None, denteRegiao=None, denteFace=None, quantidade=None, procRecurso=None, codGlosaProc=None, valorRecursado=None, justificativaPrestador=None, valorAcatado=None, justificativaOperadora=None):
        self.original_tagname_ = None
        if isinstance(dataRealizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRealizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRealizacao
        self.dataRealizacao = initvalue_
        self.denteRegiao = denteRegiao
        self.denteFace = denteFace
        self.validate_dm_face(self.denteFace)
        self.quantidade = quantidade
        self.validate_st_numerico2(self.quantidade)
        self.procRecurso = procRecurso
        self.codGlosaProc = codGlosaProc
        self.validate_dm_tipoGlosa(self.codGlosaProc)
        self.valorRecursado = valorRecursado
        self.justificativaPrestador = justificativaPrestador
        self.validate_st_texto150(self.justificativaPrestador)
        self.valorAcatado = valorAcatado
        self.justificativaOperadora = justificativaOperadora
        self.validate_st_texto150(self.justificativaOperadora)
    def factory(*args_, **kwargs_):
        if recursoProcedimento.subclass:
            return recursoProcedimento.subclass(*args_, **kwargs_)
        else:
            return recursoProcedimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataRealizacao(self): return self.dataRealizacao
    def set_dataRealizacao(self, dataRealizacao): self.dataRealizacao = dataRealizacao
    def get_denteRegiao(self): return self.denteRegiao
    def set_denteRegiao(self, denteRegiao): self.denteRegiao = denteRegiao
    def get_denteFace(self): return self.denteFace
    def set_denteFace(self, denteFace): self.denteFace = denteFace
    def get_quantidade(self): return self.quantidade
    def set_quantidade(self, quantidade): self.quantidade = quantidade
    def get_procRecurso(self): return self.procRecurso
    def set_procRecurso(self, procRecurso): self.procRecurso = procRecurso
    def get_codGlosaProc(self): return self.codGlosaProc
    def set_codGlosaProc(self, codGlosaProc): self.codGlosaProc = codGlosaProc
    def get_valorRecursado(self): return self.valorRecursado
    def set_valorRecursado(self, valorRecursado): self.valorRecursado = valorRecursado
    def get_justificativaPrestador(self): return self.justificativaPrestador
    def set_justificativaPrestador(self, justificativaPrestador): self.justificativaPrestador = justificativaPrestador
    def get_valorAcatado(self): return self.valorAcatado
    def set_valorAcatado(self, valorAcatado): self.valorAcatado = valorAcatado
    def get_justificativaOperadora(self): return self.justificativaOperadora
    def set_justificativaOperadora(self, justificativaOperadora): self.justificativaOperadora = justificativaOperadora
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_face(self, value):
        # Validate type dm_face, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_dm_face_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_dm_face_patterns_, ))
    validate_dm_face_patterns_ = [['^[OLMVDIP]{1,5}$']]
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataRealizacao is not None or
            self.denteRegiao is not None or
            self.denteFace is not None or
            self.quantidade is not None or
            self.procRecurso is not None or
            self.codGlosaProc is not None or
            self.valorRecursado is not None or
            self.justificativaPrestador is not None or
            self.valorAcatado is not None or
            self.justificativaOperadora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='recursoProcedimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='recursoProcedimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='recursoProcedimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='recursoProcedimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='recursoProcedimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataRealizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRealizacao>%s</%sdataRealizacao>%s' % (namespace_, self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'), namespace_, eol_))
        if self.denteRegiao is not None:
            self.denteRegiao.export(outfile, level, namespace_, name_='denteRegiao', pretty_print=pretty_print)
        if self.denteFace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdenteFace>%s</%sdenteFace>%s' % (namespace_, self.gds_format_string(quote_xml(self.denteFace).encode(ExternalEncoding), input_name='denteFace'), namespace_, eol_))
        if self.quantidade is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidade>%s</%squantidade>%s' % (namespace_, self.gds_format_integer(self.quantidade, input_name='quantidade'), namespace_, eol_))
        if self.procRecurso is not None:
            self.procRecurso.export(outfile, level, namespace_, name_='procRecurso', pretty_print=pretty_print)
        if self.codGlosaProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodGlosaProc>%s</%scodGlosaProc>%s' % (namespace_, self.gds_format_string(quote_xml(self.codGlosaProc).encode(ExternalEncoding), input_name='codGlosaProc'), namespace_, eol_))
        if self.valorRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorRecursado>%s</%svalorRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorRecursado).encode(ExternalEncoding), input_name='valorRecursado'), namespace_, eol_))
        if self.justificativaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaPrestador>%s</%sjustificativaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaPrestador).encode(ExternalEncoding), input_name='justificativaPrestador'), namespace_, eol_))
        if self.valorAcatado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorAcatado>%s</%svalorAcatado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorAcatado).encode(ExternalEncoding), input_name='valorAcatado'), namespace_, eol_))
        if self.justificativaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaOperadora>%s</%sjustificativaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaOperadora).encode(ExternalEncoding), input_name='justificativaOperadora'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='recursoProcedimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataRealizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataRealizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRealizacao, input_name='dataRealizacao'))
        if self.denteRegiao is not None:
            showIndent(outfile, level)
            outfile.write('denteRegiao=model_.denteRegiao(\n')
            self.denteRegiao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteFace is not None:
            showIndent(outfile, level)
            outfile.write('denteFace=%s,\n' % quote_python(self.denteFace).encode(ExternalEncoding))
        if self.quantidade is not None:
            showIndent(outfile, level)
            outfile.write('quantidade=%d,\n' % self.quantidade)
        if self.procRecurso is not None:
            showIndent(outfile, level)
            outfile.write('procRecurso=model_.ct_procedimentoDados(\n')
            self.procRecurso.exportLiteral(outfile, level, name_='procRecurso')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.codGlosaProc is not None:
            showIndent(outfile, level)
            outfile.write('codGlosaProc=%s,\n' % quote_python(self.codGlosaProc).encode(ExternalEncoding))
        if self.valorRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorRecursado=%s,\n' % quote_python(self.valorRecursado).encode(ExternalEncoding))
        if self.justificativaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('justificativaPrestador=%s,\n' % quote_python(self.justificativaPrestador).encode(ExternalEncoding))
        if self.valorAcatado is not None:
            showIndent(outfile, level)
            outfile.write('valorAcatado=%s,\n' % quote_python(self.valorAcatado).encode(ExternalEncoding))
        if self.justificativaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('justificativaOperadora=%s,\n' % quote_python(self.justificativaOperadora).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataRealizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRealizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataRealizacao)
        elif nodeName_ == 'denteRegiao':
            obj_ = denteRegiao.factory()
            obj_.build(child_)
            self.denteRegiao = obj_
            obj_.original_tagname_ = 'denteRegiao'
        elif nodeName_ == 'denteFace':
            denteFace_ = child_.text
            denteFace_ = self.gds_validate_string(denteFace_, node, 'denteFace')
            self.denteFace = denteFace_
            # validate type dm_face
            self.validate_dm_face(self.denteFace)
        elif nodeName_ == 'quantidade':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidade')
            self.quantidade = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.quantidade)
        elif nodeName_ == 'procRecurso':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procRecurso = obj_
            obj_.original_tagname_ = 'procRecurso'
        elif nodeName_ == 'codGlosaProc':
            codGlosaProc_ = child_.text
            codGlosaProc_ = self.gds_validate_string(codGlosaProc_, node, 'codGlosaProc')
            self.codGlosaProc = codGlosaProc_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codGlosaProc)
        elif nodeName_ == 'valorRecursado':
            valorRecursado_ = child_.text
            valorRecursado_ = self.gds_validate_string(valorRecursado_, node, 'valorRecursado')
            self.valorRecursado = valorRecursado_
        elif nodeName_ == 'justificativaPrestador':
            justificativaPrestador_ = child_.text
            justificativaPrestador_ = self.gds_validate_string(justificativaPrestador_, node, 'justificativaPrestador')
            self.justificativaPrestador = justificativaPrestador_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaPrestador)
        elif nodeName_ == 'valorAcatado':
            valorAcatado_ = child_.text
            valorAcatado_ = self.gds_validate_string(valorAcatado_, node, 'valorAcatado')
            self.valorAcatado = valorAcatado_
        elif nodeName_ == 'justificativaOperadora':
            justificativaOperadora_ = child_.text
            justificativaOperadora_ = self.gds_validate_string(justificativaOperadora_, node, 'justificativaOperadora')
            self.justificativaOperadora = justificativaOperadora_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaOperadora)
# end class recursoProcedimento


class ct_situacaoAutorizacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, autorizacaoInternacao=None, autorizacaoServico=None, autorizacaoProrrogacao=None, autorizacaoServicoOdonto=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.autorizacaoInternacao = autorizacaoInternacao
        self.autorizacaoServico = autorizacaoServico
        self.autorizacaoProrrogacao = autorizacaoProrrogacao
        self.autorizacaoServicoOdonto = autorizacaoServicoOdonto
    def factory(*args_, **kwargs_):
        if ct_situacaoAutorizacao.subclass:
            return ct_situacaoAutorizacao.subclass(*args_, **kwargs_)
        else:
            return ct_situacaoAutorizacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_autorizacaoInternacao(self): return self.autorizacaoInternacao
    def set_autorizacaoInternacao(self, autorizacaoInternacao): self.autorizacaoInternacao = autorizacaoInternacao
    def get_autorizacaoServico(self): return self.autorizacaoServico
    def set_autorizacaoServico(self, autorizacaoServico): self.autorizacaoServico = autorizacaoServico
    def get_autorizacaoProrrogacao(self): return self.autorizacaoProrrogacao
    def set_autorizacaoProrrogacao(self, autorizacaoProrrogacao): self.autorizacaoProrrogacao = autorizacaoProrrogacao
    def get_autorizacaoServicoOdonto(self): return self.autorizacaoServicoOdonto
    def set_autorizacaoServicoOdonto(self, autorizacaoServicoOdonto): self.autorizacaoServicoOdonto = autorizacaoServicoOdonto
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.autorizacaoInternacao is not None or
            self.autorizacaoServico is not None or
            self.autorizacaoProrrogacao is not None or
            self.autorizacaoServicoOdonto is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_situacaoAutorizacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_situacaoAutorizacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_situacaoAutorizacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_situacaoAutorizacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_situacaoAutorizacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.autorizacaoInternacao is not None:
            self.autorizacaoInternacao.export(outfile, level, namespace_, name_='autorizacaoInternacao', pretty_print=pretty_print)
        if self.autorizacaoServico is not None:
            self.autorizacaoServico.export(outfile, level, namespace_, name_='autorizacaoServico', pretty_print=pretty_print)
        if self.autorizacaoProrrogacao is not None:
            self.autorizacaoProrrogacao.export(outfile, level, namespace_, name_='autorizacaoProrrogacao', pretty_print=pretty_print)
        if self.autorizacaoServicoOdonto is not None:
            self.autorizacaoServicoOdonto.export(outfile, level, namespace_, name_='autorizacaoServicoOdonto', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_situacaoAutorizacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.autorizacaoInternacao is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoInternacao=model_.ctm_autorizacaoInternacao(\n')
            self.autorizacaoInternacao.exportLiteral(outfile, level, name_='autorizacaoInternacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.autorizacaoServico is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoServico=model_.ctm_autorizacaoServico(\n')
            self.autorizacaoServico.exportLiteral(outfile, level, name_='autorizacaoServico')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.autorizacaoProrrogacao is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoProrrogacao=model_.ctm_autorizacaoProrrogacao(\n')
            self.autorizacaoProrrogacao.exportLiteral(outfile, level, name_='autorizacaoProrrogacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.autorizacaoServicoOdonto is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoServicoOdonto=model_.cto_autorizacaoServico(\n')
            self.autorizacaoServicoOdonto.exportLiteral(outfile, level, name_='autorizacaoServicoOdonto')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'autorizacaoInternacao':
            obj_ = ctm_autorizacaoInternacao.factory()
            obj_.build(child_)
            self.autorizacaoInternacao = obj_
            obj_.original_tagname_ = 'autorizacaoInternacao'
        elif nodeName_ == 'autorizacaoServico':
            obj_ = ctm_autorizacaoServico.factory()
            obj_.build(child_)
            self.autorizacaoServico = obj_
            obj_.original_tagname_ = 'autorizacaoServico'
        elif nodeName_ == 'autorizacaoProrrogacao':
            obj_ = ctm_autorizacaoProrrogacao.factory()
            obj_.build(child_)
            self.autorizacaoProrrogacao = obj_
            obj_.original_tagname_ = 'autorizacaoProrrogacao'
        elif nodeName_ == 'autorizacaoServicoOdonto':
            obj_ = cto_autorizacaoServico.factory()
            obj_.build(child_)
            self.autorizacaoServicoOdonto = obj_
            obj_.original_tagname_ = 'autorizacaoServicoOdonto'
# end class ct_situacaoAutorizacao


class ct_situacaoProtocolo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mensagemErro=None, situacaoDoProtocolo=None, situacaoProtocoloAnexo=None):
        self.original_tagname_ = None
        self.mensagemErro = mensagemErro
        self.situacaoDoProtocolo = situacaoDoProtocolo
        self.situacaoProtocoloAnexo = situacaoProtocoloAnexo
    def factory(*args_, **kwargs_):
        if ct_situacaoProtocolo.subclass:
            return ct_situacaoProtocolo.subclass(*args_, **kwargs_)
        else:
            return ct_situacaoProtocolo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def get_situacaoDoProtocolo(self): return self.situacaoDoProtocolo
    def set_situacaoDoProtocolo(self, situacaoDoProtocolo): self.situacaoDoProtocolo = situacaoDoProtocolo
    def get_situacaoProtocoloAnexo(self): return self.situacaoProtocoloAnexo
    def set_situacaoProtocoloAnexo(self, situacaoProtocoloAnexo): self.situacaoProtocoloAnexo = situacaoProtocoloAnexo
    def hasContent_(self):
        if (
            self.mensagemErro is not None or
            self.situacaoDoProtocolo is not None or
            self.situacaoProtocoloAnexo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_situacaoProtocolo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_situacaoProtocolo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_situacaoProtocolo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_situacaoProtocolo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_situacaoProtocolo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
        if self.situacaoDoProtocolo is not None:
            self.situacaoDoProtocolo.export(outfile, level, namespace_, name_='situacaoDoProtocolo', pretty_print=pretty_print)
        if self.situacaoProtocoloAnexo is not None:
            self.situacaoProtocoloAnexo.export(outfile, level, namespace_, name_='situacaoProtocoloAnexo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_situacaoProtocolo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.situacaoDoProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('situacaoDoProtocolo=model_.ct_protocoloStatus(\n')
            self.situacaoDoProtocolo.exportLiteral(outfile, level, name_='situacaoDoProtocolo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.situacaoProtocoloAnexo is not None:
            showIndent(outfile, level)
            outfile.write('situacaoProtocoloAnexo=model_.ct_protocoloAnexoStatus(\n')
            self.situacaoProtocoloAnexo.exportLiteral(outfile, level, name_='situacaoProtocoloAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
        elif nodeName_ == 'situacaoDoProtocolo':
            obj_ = ct_protocoloStatus.factory()
            obj_.build(child_)
            self.situacaoDoProtocolo = obj_
            obj_.original_tagname_ = 'situacaoDoProtocolo'
        elif nodeName_ == 'situacaoProtocoloAnexo':
            obj_ = ct_protocoloAnexoStatus.factory()
            obj_.build(child_)
            self.situacaoProtocoloAnexo = obj_
            obj_.original_tagname_ = 'situacaoProtocoloAnexo'
# end class ct_situacaoProtocolo


class ct_situacaoClinica(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dentes=None):
        self.original_tagname_ = None
        if dentes is None:
            self.dentes = []
        else:
            self.dentes = dentes
    def factory(*args_, **kwargs_):
        if ct_situacaoClinica.subclass:
            return ct_situacaoClinica.subclass(*args_, **kwargs_)
        else:
            return ct_situacaoClinica(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dentes(self): return self.dentes
    def set_dentes(self, dentes): self.dentes = dentes
    def add_dentes(self, value): self.dentes.append(value)
    def insert_dentes_at(self, index, value): self.dentes.insert(index, value)
    def replace_dentes_at(self, index, value): self.dentes[index] = value
    def hasContent_(self):
        if (
            self.dentes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_situacaoClinica', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_situacaoClinica')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_situacaoClinica', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_situacaoClinica'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_situacaoClinica', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dentes_ in self.dentes:
            dentes_.export(outfile, level, namespace_, name_='dentes', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_situacaoClinica'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dentes=[\n')
        level += 1
        for dentes_ in self.dentes:
            showIndent(outfile, level)
            outfile.write('model_.dentes(\n')
            dentes_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dentes':
            obj_ = dentes.factory()
            obj_.build(child_)
            self.dentes.append(obj_)
            obj_.original_tagname_ = 'dentes'
# end class ct_situacaoClinica


class dentes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, elementoDentario=None, condicaoClinica=None):
        self.original_tagname_ = None
        self.elementoDentario = elementoDentario
        self.validate_dm_dente(self.elementoDentario)
        self.condicaoClinica = condicaoClinica
        self.validate_dm_condicaoClinica(self.condicaoClinica)
    def factory(*args_, **kwargs_):
        if dentes.subclass:
            return dentes.subclass(*args_, **kwargs_)
        else:
            return dentes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_elementoDentario(self): return self.elementoDentario
    def set_elementoDentario(self, elementoDentario): self.elementoDentario = elementoDentario
    def get_condicaoClinica(self): return self.condicaoClinica
    def set_condicaoClinica(self, condicaoClinica): self.condicaoClinica = condicaoClinica
    def validate_dm_dente(self, value):
        # Validate type dm_dente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '18', '19', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '34', '35', '36', '37', '38', '39', '41', '42', '43', '44', '45', '46', '47', '48', '49', '51', '52', '53', '54', '55', '59', '61', '62', '63', '64', '65', '69', '71', '72', '73', '74', '75', '79', '81', '82', '83', '84', '85', '89']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_dente' % {"value" : value.encode("utf-8")} )
            if len(value) > 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_dente' % {"value" : value.encode("utf-8")} )
    def validate_dm_condicaoClinica(self, value):
        # Validate type dm_condicaoClinica, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['A', 'E', 'H', 'C', 'R']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_condicaoClinica' % {"value" : value.encode("utf-8")} )
            if len(value) > 1:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_condicaoClinica' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.elementoDentario is not None or
            self.condicaoClinica is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dentes', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dentes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dentes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dentes'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dentes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.elementoDentario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%selementoDentario>%s</%selementoDentario>%s' % (namespace_, self.gds_format_string(quote_xml(self.elementoDentario).encode(ExternalEncoding), input_name='elementoDentario'), namespace_, eol_))
        if self.condicaoClinica is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scondicaoClinica>%s</%scondicaoClinica>%s' % (namespace_, self.gds_format_string(quote_xml(self.condicaoClinica).encode(ExternalEncoding), input_name='condicaoClinica'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dentes'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.elementoDentario is not None:
            showIndent(outfile, level)
            outfile.write('elementoDentario=%s,\n' % quote_python(self.elementoDentario).encode(ExternalEncoding))
        if self.condicaoClinica is not None:
            showIndent(outfile, level)
            outfile.write('condicaoClinica=%s,\n' % quote_python(self.condicaoClinica).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'elementoDentario':
            elementoDentario_ = child_.text
            elementoDentario_ = self.gds_validate_string(elementoDentario_, node, 'elementoDentario')
            self.elementoDentario = elementoDentario_
            # validate type dm_dente
            self.validate_dm_dente(self.elementoDentario)
        elif nodeName_ == 'condicaoClinica':
            condicaoClinica_ = child_.text
            condicaoClinica_ = self.gds_validate_string(condicaoClinica_, node, 'condicaoClinica')
            self.condicaoClinica = condicaoClinica_
            # validate type dm_condicaoClinica
            self.validate_dm_condicaoClinica(self.condicaoClinica)
# end class dentes


class ct_valorCreditoDesconto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tipoLancamento=None, descricao=None, valor=None):
        self.original_tagname_ = None
        self.tipoLancamento = tipoLancamento
        self.validate_dm_tipoLancamento(self.tipoLancamento)
        self.descricao = descricao
        self.validate_st_texto100(self.descricao)
        self.valor = valor
    def factory(*args_, **kwargs_):
        if ct_valorCreditoDesconto.subclass:
            return ct_valorCreditoDesconto.subclass(*args_, **kwargs_)
        else:
            return ct_valorCreditoDesconto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tipoLancamento(self): return self.tipoLancamento
    def set_tipoLancamento(self, tipoLancamento): self.tipoLancamento = tipoLancamento
    def get_descricao(self): return self.descricao
    def set_descricao(self, descricao): self.descricao = descricao
    def get_valor(self): return self.valor
    def set_valor(self, valor): self.valor = valor
    def validate_dm_tipoLancamento(self, value):
        # Validate type dm_tipoLancamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoLancamento' % {"value" : value.encode("utf-8")} )
    def validate_st_texto100(self, value):
        # Validate type st_texto100, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 100:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto100' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto100' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tipoLancamento is not None or
            self.descricao is not None or
            self.valor is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_valorCreditoDesconto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_valorCreditoDesconto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_valorCreditoDesconto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_valorCreditoDesconto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_valorCreditoDesconto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tipoLancamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoLancamento>%s</%stipoLancamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoLancamento).encode(ExternalEncoding), input_name='tipoLancamento'), namespace_, eol_))
        if self.descricao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescricao>%s</%sdescricao>%s' % (namespace_, self.gds_format_string(quote_xml(self.descricao).encode(ExternalEncoding), input_name='descricao'), namespace_, eol_))
        if self.valor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalor>%s</%svalor>%s' % (namespace_, self.gds_format_string(quote_xml(self.valor).encode(ExternalEncoding), input_name='valor'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_valorCreditoDesconto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.tipoLancamento is not None:
            showIndent(outfile, level)
            outfile.write('tipoLancamento=%s,\n' % quote_python(self.tipoLancamento).encode(ExternalEncoding))
        if self.descricao is not None:
            showIndent(outfile, level)
            outfile.write('descricao=%s,\n' % quote_python(self.descricao).encode(ExternalEncoding))
        if self.valor is not None:
            showIndent(outfile, level)
            outfile.write('valor=%s,\n' % quote_python(self.valor).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tipoLancamento':
            tipoLancamento_ = child_.text
            tipoLancamento_ = self.gds_validate_string(tipoLancamento_, node, 'tipoLancamento')
            self.tipoLancamento = tipoLancamento_
            # validate type dm_tipoLancamento
            self.validate_dm_tipoLancamento(self.tipoLancamento)
        elif nodeName_ == 'descricao':
            descricao_ = child_.text
            descricao_ = self.gds_validate_string(descricao_, node, 'descricao')
            self.descricao = descricao_
            # validate type st_texto100
            self.validate_st_texto100(self.descricao)
        elif nodeName_ == 'valor':
            valor_ = child_.text
            valor_ = self.gds_validate_string(valor_, node, 'valor')
            self.valor = valor_
# end class ct_valorCreditoDesconto


class ct_valorTotal(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorProcessado=None, valorGlosa=None, valorLiberado=None):
        self.original_tagname_ = None
        self.valorProcessado = valorProcessado
        self.valorGlosa = valorGlosa
        self.valorLiberado = valorLiberado
    def factory(*args_, **kwargs_):
        if ct_valorTotal.subclass:
            return ct_valorTotal.subclass(*args_, **kwargs_)
        else:
            return ct_valorTotal(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorProcessado(self): return self.valorProcessado
    def set_valorProcessado(self, valorProcessado): self.valorProcessado = valorProcessado
    def get_valorGlosa(self): return self.valorGlosa
    def set_valorGlosa(self, valorGlosa): self.valorGlosa = valorGlosa
    def get_valorLiberado(self): return self.valorLiberado
    def set_valorLiberado(self, valorLiberado): self.valorLiberado = valorLiberado
    def hasContent_(self):
        if (
            self.valorProcessado is not None or
            self.valorGlosa is not None or
            self.valorLiberado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_valorTotal', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_valorTotal')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_valorTotal', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_valorTotal'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_valorTotal', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorProcessado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessado>%s</%svalorProcessado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessado).encode(ExternalEncoding), input_name='valorProcessado'), namespace_, eol_))
        if self.valorGlosa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosa>%s</%svalorGlosa>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosa).encode(ExternalEncoding), input_name='valorGlosa'), namespace_, eol_))
        if self.valorLiberado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberado>%s</%svalorLiberado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberado).encode(ExternalEncoding), input_name='valorLiberado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_valorTotal'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorProcessado is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessado=%s,\n' % quote_python(self.valorProcessado).encode(ExternalEncoding))
        if self.valorGlosa is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosa=%s,\n' % quote_python(self.valorGlosa).encode(ExternalEncoding))
        if self.valorLiberado is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberado=%s,\n' % quote_python(self.valorLiberado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorProcessado':
            valorProcessado_ = child_.text
            valorProcessado_ = self.gds_validate_string(valorProcessado_, node, 'valorProcessado')
            self.valorProcessado = valorProcessado_
        elif nodeName_ == 'valorGlosa':
            valorGlosa_ = child_.text
            valorGlosa_ = self.gds_validate_string(valorGlosa_, node, 'valorGlosa')
            self.valorGlosa = valorGlosa_
        elif nodeName_ == 'valorLiberado':
            valorLiberado_ = child_.text
            valorLiberado_ = self.gds_validate_string(valorLiberado_, node, 'valorLiberado')
            self.valorLiberado = valorLiberado_
# end class ct_valorTotal


class ctm_anexoSolicitacaoOPME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoAnexo=None, dadosBeneficiario=None, profissionalSolicitante=None, justificativaTecnica=None, especificacaoMaterial=None, opmeSolicitadas=None, Observacao=None):
        self.original_tagname_ = None
        self.cabecalhoAnexo = cabecalhoAnexo
        self.dadosBeneficiario = dadosBeneficiario
        self.profissionalSolicitante = profissionalSolicitante
        self.justificativaTecnica = justificativaTecnica
        self.validate_st_texto1000(self.justificativaTecnica)
        self.especificacaoMaterial = especificacaoMaterial
        self.validate_st_texto500(self.especificacaoMaterial)
        self.opmeSolicitadas = opmeSolicitadas
        self.Observacao = Observacao
        self.validate_st_texto500(self.Observacao)
    def factory(*args_, **kwargs_):
        if ctm_anexoSolicitacaoOPME.subclass:
            return ctm_anexoSolicitacaoOPME.subclass(*args_, **kwargs_)
        else:
            return ctm_anexoSolicitacaoOPME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoAnexo(self): return self.cabecalhoAnexo
    def set_cabecalhoAnexo(self, cabecalhoAnexo): self.cabecalhoAnexo = cabecalhoAnexo
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_profissionalSolicitante(self): return self.profissionalSolicitante
    def set_profissionalSolicitante(self, profissionalSolicitante): self.profissionalSolicitante = profissionalSolicitante
    def get_justificativaTecnica(self): return self.justificativaTecnica
    def set_justificativaTecnica(self, justificativaTecnica): self.justificativaTecnica = justificativaTecnica
    def get_especificacaoMaterial(self): return self.especificacaoMaterial
    def set_especificacaoMaterial(self, especificacaoMaterial): self.especificacaoMaterial = especificacaoMaterial
    def get_opmeSolicitadas(self): return self.opmeSolicitadas
    def set_opmeSolicitadas(self, opmeSolicitadas): self.opmeSolicitadas = opmeSolicitadas
    def get_Observacao(self): return self.Observacao
    def set_Observacao(self, Observacao): self.Observacao = Observacao
    def validate_st_texto1000(self, value):
        # Validate type st_texto1000, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoAnexo is not None or
            self.dadosBeneficiario is not None or
            self.profissionalSolicitante is not None or
            self.justificativaTecnica is not None or
            self.especificacaoMaterial is not None or
            self.opmeSolicitadas is not None or
            self.Observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitacaoOPME', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_anexoSolicitacaoOPME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_anexoSolicitacaoOPME', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_anexoSolicitacaoOPME'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitacaoOPME', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoAnexo is not None:
            self.cabecalhoAnexo.export(outfile, level, namespace_, name_='cabecalhoAnexo', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.profissionalSolicitante is not None:
            self.profissionalSolicitante.export(outfile, level, namespace_, name_='profissionalSolicitante', pretty_print=pretty_print)
        if self.justificativaTecnica is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaTecnica>%s</%sjustificativaTecnica>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaTecnica).encode(ExternalEncoding), input_name='justificativaTecnica'), namespace_, eol_))
        if self.especificacaoMaterial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sespecificacaoMaterial>%s</%sespecificacaoMaterial>%s' % (namespace_, self.gds_format_string(quote_xml(self.especificacaoMaterial).encode(ExternalEncoding), input_name='especificacaoMaterial'), namespace_, eol_))
        if self.opmeSolicitadas is not None:
            self.opmeSolicitadas.export(outfile, level, namespace_, name_='opmeSolicitadas', pretty_print=pretty_print)
        if self.Observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sObservacao>%s</%sObservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.Observacao).encode(ExternalEncoding), input_name='Observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_anexoSolicitacaoOPME'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoAnexo is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoAnexo=model_.ct_anexoCabecalho(\n')
            self.cabecalhoAnexo.exportLiteral(outfile, level, name_='cabecalhoAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.profissionalSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('profissionalSolicitante=model_.ctm_anexoSolicitante(\n')
            self.profissionalSolicitante.exportLiteral(outfile, level, name_='profissionalSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.justificativaTecnica is not None:
            showIndent(outfile, level)
            outfile.write('justificativaTecnica=%s,\n' % quote_python(self.justificativaTecnica).encode(ExternalEncoding))
        if self.especificacaoMaterial is not None:
            showIndent(outfile, level)
            outfile.write('especificacaoMaterial=%s,\n' % quote_python(self.especificacaoMaterial).encode(ExternalEncoding))
        if self.opmeSolicitadas is not None:
            showIndent(outfile, level)
            outfile.write('opmeSolicitadas=model_.opmeSolicitadas(\n')
            self.opmeSolicitadas.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Observacao is not None:
            showIndent(outfile, level)
            outfile.write('Observacao=%s,\n' % quote_python(self.Observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoAnexo':
            obj_ = ct_anexoCabecalho.factory()
            obj_.build(child_)
            self.cabecalhoAnexo = obj_
            obj_.original_tagname_ = 'cabecalhoAnexo'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'profissionalSolicitante':
            obj_ = ctm_anexoSolicitante.factory()
            obj_.build(child_)
            self.profissionalSolicitante = obj_
            obj_.original_tagname_ = 'profissionalSolicitante'
        elif nodeName_ == 'justificativaTecnica':
            justificativaTecnica_ = child_.text
            justificativaTecnica_ = self.gds_validate_string(justificativaTecnica_, node, 'justificativaTecnica')
            self.justificativaTecnica = justificativaTecnica_
            # validate type st_texto1000
            self.validate_st_texto1000(self.justificativaTecnica)
        elif nodeName_ == 'especificacaoMaterial':
            especificacaoMaterial_ = child_.text
            especificacaoMaterial_ = self.gds_validate_string(especificacaoMaterial_, node, 'especificacaoMaterial')
            self.especificacaoMaterial = especificacaoMaterial_
            # validate type st_texto500
            self.validate_st_texto500(self.especificacaoMaterial)
        elif nodeName_ == 'opmeSolicitadas':
            obj_ = opmeSolicitadas.factory()
            obj_.build(child_)
            self.opmeSolicitadas = obj_
            obj_.original_tagname_ = 'opmeSolicitadas'
        elif nodeName_ == 'Observacao':
            Observacao_ = child_.text
            Observacao_ = self.gds_validate_string(Observacao_, node, 'Observacao')
            self.Observacao = Observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.Observacao)
# end class ctm_anexoSolicitacaoOPME


class opmeSolicitadas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, opmeSolicitada=None):
        self.original_tagname_ = None
        if opmeSolicitada is None:
            self.opmeSolicitada = []
        else:
            self.opmeSolicitada = opmeSolicitada
    def factory(*args_, **kwargs_):
        if opmeSolicitadas.subclass:
            return opmeSolicitadas.subclass(*args_, **kwargs_)
        else:
            return opmeSolicitadas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_opmeSolicitada(self): return self.opmeSolicitada
    def set_opmeSolicitada(self, opmeSolicitada): self.opmeSolicitada = opmeSolicitada
    def add_opmeSolicitada(self, value): self.opmeSolicitada.append(value)
    def insert_opmeSolicitada_at(self, index, value): self.opmeSolicitada.insert(index, value)
    def replace_opmeSolicitada_at(self, index, value): self.opmeSolicitada[index] = value
    def hasContent_(self):
        if (
            self.opmeSolicitada
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='opmeSolicitadas', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='opmeSolicitadas')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='opmeSolicitadas', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='opmeSolicitadas'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='opmeSolicitadas', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for opmeSolicitada_ in self.opmeSolicitada:
            opmeSolicitada_.export(outfile, level, namespace_, name_='opmeSolicitada', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='opmeSolicitadas'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('opmeSolicitada=[\n')
        level += 1
        for opmeSolicitada_ in self.opmeSolicitada:
            showIndent(outfile, level)
            outfile.write('model_.opmeSolicitada(\n')
            opmeSolicitada_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'opmeSolicitada':
            obj_ = opmeSolicitada.factory()
            obj_.build(child_)
            self.opmeSolicitada.append(obj_)
            obj_.original_tagname_ = 'opmeSolicitada'
# end class opmeSolicitadas


class opmeSolicitada(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identificacaoOPME=None, opcaoFabricante=None, quantidadeSolicitada=None, valorSolicitado=None, registroANVISA=None, codigoRefFabricante=None, autorizacaoFuncionamento=None):
        self.original_tagname_ = None
        self.identificacaoOPME = identificacaoOPME
        self.opcaoFabricante = opcaoFabricante
        self.validate_dm_opcaoFabricante(self.opcaoFabricante)
        self.quantidadeSolicitada = quantidadeSolicitada
        self.validate_st_numerico3(self.quantidadeSolicitada)
        self.valorSolicitado = valorSolicitado
        self.registroANVISA = registroANVISA
        self.validate_st_texto15(self.registroANVISA)
        self.codigoRefFabricante = codigoRefFabricante
        self.validate_st_texto60(self.codigoRefFabricante)
        self.autorizacaoFuncionamento = autorizacaoFuncionamento
        self.validate_st_texto30(self.autorizacaoFuncionamento)
    def factory(*args_, **kwargs_):
        if opmeSolicitada.subclass:
            return opmeSolicitada.subclass(*args_, **kwargs_)
        else:
            return opmeSolicitada(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identificacaoOPME(self): return self.identificacaoOPME
    def set_identificacaoOPME(self, identificacaoOPME): self.identificacaoOPME = identificacaoOPME
    def get_opcaoFabricante(self): return self.opcaoFabricante
    def set_opcaoFabricante(self, opcaoFabricante): self.opcaoFabricante = opcaoFabricante
    def get_quantidadeSolicitada(self): return self.quantidadeSolicitada
    def set_quantidadeSolicitada(self, quantidadeSolicitada): self.quantidadeSolicitada = quantidadeSolicitada
    def get_valorSolicitado(self): return self.valorSolicitado
    def set_valorSolicitado(self, valorSolicitado): self.valorSolicitado = valorSolicitado
    def get_registroANVISA(self): return self.registroANVISA
    def set_registroANVISA(self, registroANVISA): self.registroANVISA = registroANVISA
    def get_codigoRefFabricante(self): return self.codigoRefFabricante
    def set_codigoRefFabricante(self, codigoRefFabricante): self.codigoRefFabricante = codigoRefFabricante
    def get_autorizacaoFuncionamento(self): return self.autorizacaoFuncionamento
    def set_autorizacaoFuncionamento(self, autorizacaoFuncionamento): self.autorizacaoFuncionamento = autorizacaoFuncionamento
    def validate_dm_opcaoFabricante(self, value):
        # Validate type dm_opcaoFabricante, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_opcaoFabricante' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_st_texto60(self, value):
        # Validate type st_texto60, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto60' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto60' % {"value" : value.encode("utf-8")} )
    def validate_st_texto30(self, value):
        # Validate type st_texto30, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto30' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto30' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.identificacaoOPME is not None or
            self.opcaoFabricante is not None or
            self.quantidadeSolicitada is not None or
            self.valorSolicitado is not None or
            self.registroANVISA is not None or
            self.codigoRefFabricante is not None or
            self.autorizacaoFuncionamento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='opmeSolicitada', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='opmeSolicitada')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='opmeSolicitada', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='opmeSolicitada'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='opmeSolicitada', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identificacaoOPME is not None:
            self.identificacaoOPME.export(outfile, level, namespace_, name_='identificacaoOPME', pretty_print=pretty_print)
        if self.opcaoFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sopcaoFabricante>%s</%sopcaoFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.opcaoFabricante).encode(ExternalEncoding), input_name='opcaoFabricante'), namespace_, eol_))
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeSolicitada>%s</%squantidadeSolicitada>%s' % (namespace_, self.gds_format_integer(self.quantidadeSolicitada, input_name='quantidadeSolicitada'), namespace_, eol_))
        if self.valorSolicitado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorSolicitado>%s</%svalorSolicitado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorSolicitado).encode(ExternalEncoding), input_name='valorSolicitado'), namespace_, eol_))
        if self.registroANVISA is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANVISA>%s</%sregistroANVISA>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANVISA).encode(ExternalEncoding), input_name='registroANVISA'), namespace_, eol_))
        if self.codigoRefFabricante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoRefFabricante>%s</%scodigoRefFabricante>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoRefFabricante).encode(ExternalEncoding), input_name='codigoRefFabricante'), namespace_, eol_))
        if self.autorizacaoFuncionamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sautorizacaoFuncionamento>%s</%sautorizacaoFuncionamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.autorizacaoFuncionamento).encode(ExternalEncoding), input_name='autorizacaoFuncionamento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='opmeSolicitada'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.identificacaoOPME is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoOPME=model_.ct_procedimentoDados(\n')
            self.identificacaoOPME.exportLiteral(outfile, level, name_='identificacaoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.opcaoFabricante is not None:
            showIndent(outfile, level)
            outfile.write('opcaoFabricante=%s,\n' % quote_python(self.opcaoFabricante).encode(ExternalEncoding))
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeSolicitada=%d,\n' % self.quantidadeSolicitada)
        if self.valorSolicitado is not None:
            showIndent(outfile, level)
            outfile.write('valorSolicitado=%s,\n' % quote_python(self.valorSolicitado).encode(ExternalEncoding))
        if self.registroANVISA is not None:
            showIndent(outfile, level)
            outfile.write('registroANVISA=%s,\n' % quote_python(self.registroANVISA).encode(ExternalEncoding))
        if self.codigoRefFabricante is not None:
            showIndent(outfile, level)
            outfile.write('codigoRefFabricante=%s,\n' % quote_python(self.codigoRefFabricante).encode(ExternalEncoding))
        if self.autorizacaoFuncionamento is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoFuncionamento=%s,\n' % quote_python(self.autorizacaoFuncionamento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identificacaoOPME':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.identificacaoOPME = obj_
            obj_.original_tagname_ = 'identificacaoOPME'
        elif nodeName_ == 'opcaoFabricante':
            opcaoFabricante_ = child_.text
            opcaoFabricante_ = self.gds_validate_string(opcaoFabricante_, node, 'opcaoFabricante')
            self.opcaoFabricante = opcaoFabricante_
            # validate type dm_opcaoFabricante
            self.validate_dm_opcaoFabricante(self.opcaoFabricante)
        elif nodeName_ == 'quantidadeSolicitada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeSolicitada')
            self.quantidadeSolicitada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeSolicitada)
        elif nodeName_ == 'valorSolicitado':
            valorSolicitado_ = child_.text
            valorSolicitado_ = self.gds_validate_string(valorSolicitado_, node, 'valorSolicitado')
            self.valorSolicitado = valorSolicitado_
        elif nodeName_ == 'registroANVISA':
            registroANVISA_ = child_.text
            registroANVISA_ = self.gds_validate_string(registroANVISA_, node, 'registroANVISA')
            self.registroANVISA = registroANVISA_
            # validate type st_texto15
            self.validate_st_texto15(self.registroANVISA)
        elif nodeName_ == 'codigoRefFabricante':
            codigoRefFabricante_ = child_.text
            codigoRefFabricante_ = self.gds_validate_string(codigoRefFabricante_, node, 'codigoRefFabricante')
            self.codigoRefFabricante = codigoRefFabricante_
            # validate type st_texto60
            self.validate_st_texto60(self.codigoRefFabricante)
        elif nodeName_ == 'autorizacaoFuncionamento':
            autorizacaoFuncionamento_ = child_.text
            autorizacaoFuncionamento_ = self.gds_validate_string(autorizacaoFuncionamento_, node, 'autorizacaoFuncionamento')
            self.autorizacaoFuncionamento = autorizacaoFuncionamento_
            # validate type st_texto30
            self.validate_st_texto30(self.autorizacaoFuncionamento)
# end class opmeSolicitada


class ctm_anexoSolicitacaoQuimio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoAnexo=None, dadosBeneficiario=None, dadosComplementaresBeneficiario=None, medicoSolicitante=None, diagnosticoOncologicoQuimioterapia=None, drogasSolicitadas=None, tratamentosAnteriores=None, numeroCiclos=None, cicloAtual=None, intervaloCiclos=None, observacao=None):
        self.original_tagname_ = None
        self.cabecalhoAnexo = cabecalhoAnexo
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
        self.medicoSolicitante = medicoSolicitante
        self.diagnosticoOncologicoQuimioterapia = diagnosticoOncologicoQuimioterapia
        self.drogasSolicitadas = drogasSolicitadas
        self.tratamentosAnteriores = tratamentosAnteriores
        self.numeroCiclos = numeroCiclos
        self.validate_st_numerico2(self.numeroCiclos)
        self.cicloAtual = cicloAtual
        self.validate_st_numerico2(self.cicloAtual)
        self.intervaloCiclos = intervaloCiclos
        self.validate_st_numerico3(self.intervaloCiclos)
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if ctm_anexoSolicitacaoQuimio.subclass:
            return ctm_anexoSolicitacaoQuimio.subclass(*args_, **kwargs_)
        else:
            return ctm_anexoSolicitacaoQuimio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoAnexo(self): return self.cabecalhoAnexo
    def set_cabecalhoAnexo(self, cabecalhoAnexo): self.cabecalhoAnexo = cabecalhoAnexo
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosComplementaresBeneficiario(self): return self.dadosComplementaresBeneficiario
    def set_dadosComplementaresBeneficiario(self, dadosComplementaresBeneficiario): self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
    def get_medicoSolicitante(self): return self.medicoSolicitante
    def set_medicoSolicitante(self, medicoSolicitante): self.medicoSolicitante = medicoSolicitante
    def get_diagnosticoOncologicoQuimioterapia(self): return self.diagnosticoOncologicoQuimioterapia
    def set_diagnosticoOncologicoQuimioterapia(self, diagnosticoOncologicoQuimioterapia): self.diagnosticoOncologicoQuimioterapia = diagnosticoOncologicoQuimioterapia
    def get_drogasSolicitadas(self): return self.drogasSolicitadas
    def set_drogasSolicitadas(self, drogasSolicitadas): self.drogasSolicitadas = drogasSolicitadas
    def get_tratamentosAnteriores(self): return self.tratamentosAnteriores
    def set_tratamentosAnteriores(self, tratamentosAnteriores): self.tratamentosAnteriores = tratamentosAnteriores
    def get_numeroCiclos(self): return self.numeroCiclos
    def set_numeroCiclos(self, numeroCiclos): self.numeroCiclos = numeroCiclos
    def get_cicloAtual(self): return self.cicloAtual
    def set_cicloAtual(self, cicloAtual): self.cicloAtual = cicloAtual
    def get_intervaloCiclos(self): return self.intervaloCiclos
    def set_intervaloCiclos(self, intervaloCiclos): self.intervaloCiclos = intervaloCiclos
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoAnexo is not None or
            self.dadosBeneficiario is not None or
            self.dadosComplementaresBeneficiario is not None or
            self.medicoSolicitante is not None or
            self.diagnosticoOncologicoQuimioterapia is not None or
            self.drogasSolicitadas is not None or
            self.tratamentosAnteriores is not None or
            self.numeroCiclos is not None or
            self.cicloAtual is not None or
            self.intervaloCiclos is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitacaoQuimio', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_anexoSolicitacaoQuimio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_anexoSolicitacaoQuimio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_anexoSolicitacaoQuimio'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitacaoQuimio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoAnexo is not None:
            self.cabecalhoAnexo.export(outfile, level, namespace_, name_='cabecalhoAnexo', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosComplementaresBeneficiario is not None:
            self.dadosComplementaresBeneficiario.export(outfile, level, namespace_, name_='dadosComplementaresBeneficiario', pretty_print=pretty_print)
        if self.medicoSolicitante is not None:
            self.medicoSolicitante.export(outfile, level, namespace_, name_='medicoSolicitante', pretty_print=pretty_print)
        if self.diagnosticoOncologicoQuimioterapia is not None:
            self.diagnosticoOncologicoQuimioterapia.export(outfile, level, namespace_, name_='diagnosticoOncologicoQuimioterapia', pretty_print=pretty_print)
        if self.drogasSolicitadas is not None:
            self.drogasSolicitadas.export(outfile, level, namespace_, name_='drogasSolicitadas', pretty_print=pretty_print)
        if self.tratamentosAnteriores is not None:
            self.tratamentosAnteriores.export(outfile, level, namespace_, name_='tratamentosAnteriores', pretty_print=pretty_print)
        if self.numeroCiclos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCiclos>%s</%snumeroCiclos>%s' % (namespace_, self.gds_format_integer(self.numeroCiclos, input_name='numeroCiclos'), namespace_, eol_))
        if self.cicloAtual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scicloAtual>%s</%scicloAtual>%s' % (namespace_, self.gds_format_integer(self.cicloAtual, input_name='cicloAtual'), namespace_, eol_))
        if self.intervaloCiclos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintervaloCiclos>%s</%sintervaloCiclos>%s' % (namespace_, self.gds_format_integer(self.intervaloCiclos, input_name='intervaloCiclos'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_anexoSolicitacaoQuimio'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoAnexo is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoAnexo=model_.ct_anexoCabecalho(\n')
            self.cabecalhoAnexo.exportLiteral(outfile, level, name_='cabecalhoAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosComplementaresBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosComplementaresBeneficiario=model_.ct_dadosComplementaresBeneficiario(\n')
            self.dadosComplementaresBeneficiario.exportLiteral(outfile, level, name_='dadosComplementaresBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.medicoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('medicoSolicitante=model_.ctm_anexoSolicitante(\n')
            self.medicoSolicitante.exportLiteral(outfile, level, name_='medicoSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.diagnosticoOncologicoQuimioterapia is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoOncologicoQuimioterapia=model_.diagnosticoOncologicoQuimioterapia(\n')
            self.diagnosticoOncologicoQuimioterapia.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.drogasSolicitadas is not None:
            showIndent(outfile, level)
            outfile.write('drogasSolicitadas=model_.drogasSolicitadas(\n')
            self.drogasSolicitadas.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.tratamentosAnteriores is not None:
            showIndent(outfile, level)
            outfile.write('tratamentosAnteriores=model_.tratamentosAnteriores(\n')
            self.tratamentosAnteriores.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCiclos is not None:
            showIndent(outfile, level)
            outfile.write('numeroCiclos=%d,\n' % self.numeroCiclos)
        if self.cicloAtual is not None:
            showIndent(outfile, level)
            outfile.write('cicloAtual=%d,\n' % self.cicloAtual)
        if self.intervaloCiclos is not None:
            showIndent(outfile, level)
            outfile.write('intervaloCiclos=%d,\n' % self.intervaloCiclos)
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoAnexo':
            obj_ = ct_anexoCabecalho.factory()
            obj_.build(child_)
            self.cabecalhoAnexo = obj_
            obj_.original_tagname_ = 'cabecalhoAnexo'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosComplementaresBeneficiario':
            obj_ = ct_dadosComplementaresBeneficiario.factory()
            obj_.build(child_)
            self.dadosComplementaresBeneficiario = obj_
            obj_.original_tagname_ = 'dadosComplementaresBeneficiario'
        elif nodeName_ == 'medicoSolicitante':
            obj_ = ctm_anexoSolicitante.factory()
            obj_.build(child_)
            self.medicoSolicitante = obj_
            obj_.original_tagname_ = 'medicoSolicitante'
        elif nodeName_ == 'diagnosticoOncologicoQuimioterapia':
            obj_ = diagnosticoOncologicoQuimioterapia.factory()
            obj_.build(child_)
            self.diagnosticoOncologicoQuimioterapia = obj_
            obj_.original_tagname_ = 'diagnosticoOncologicoQuimioterapia'
        elif nodeName_ == 'drogasSolicitadas':
            obj_ = drogasSolicitadas.factory()
            obj_.build(child_)
            self.drogasSolicitadas = obj_
            obj_.original_tagname_ = 'drogasSolicitadas'
        elif nodeName_ == 'tratamentosAnteriores':
            obj_ = tratamentosAnteriores.factory()
            obj_.build(child_)
            self.tratamentosAnteriores = obj_
            obj_.original_tagname_ = 'tratamentosAnteriores'
        elif nodeName_ == 'numeroCiclos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroCiclos')
            self.numeroCiclos = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.numeroCiclos)
        elif nodeName_ == 'cicloAtual':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'cicloAtual')
            self.cicloAtual = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.cicloAtual)
        elif nodeName_ == 'intervaloCiclos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'intervaloCiclos')
            self.intervaloCiclos = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.intervaloCiclos)
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class ctm_anexoSolicitacaoQuimio


class diagnosticoOncologicoQuimioterapia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, diagQuimio=None, tipoQuimioterapia=None, planoTerapeutico=None):
        self.original_tagname_ = None
        self.diagQuimio = diagQuimio
        self.tipoQuimioterapia = tipoQuimioterapia
        self.validate_dm_tipoQuimioterapia(self.tipoQuimioterapia)
        self.planoTerapeutico = planoTerapeutico
        self.validate_st_texto1000(self.planoTerapeutico)
    def factory(*args_, **kwargs_):
        if diagnosticoOncologicoQuimioterapia.subclass:
            return diagnosticoOncologicoQuimioterapia.subclass(*args_, **kwargs_)
        else:
            return diagnosticoOncologicoQuimioterapia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_diagQuimio(self): return self.diagQuimio
    def set_diagQuimio(self, diagQuimio): self.diagQuimio = diagQuimio
    def get_tipoQuimioterapia(self): return self.tipoQuimioterapia
    def set_tipoQuimioterapia(self, tipoQuimioterapia): self.tipoQuimioterapia = tipoQuimioterapia
    def get_planoTerapeutico(self): return self.planoTerapeutico
    def set_planoTerapeutico(self, planoTerapeutico): self.planoTerapeutico = planoTerapeutico
    def validate_dm_tipoQuimioterapia(self, value):
        # Validate type dm_tipoQuimioterapia, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoQuimioterapia' % {"value" : value.encode("utf-8")} )
    def validate_st_texto1000(self, value):
        # Validate type st_texto1000, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.diagQuimio is not None or
            self.tipoQuimioterapia is not None or
            self.planoTerapeutico is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='diagnosticoOncologicoQuimioterapia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='diagnosticoOncologicoQuimioterapia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='diagnosticoOncologicoQuimioterapia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='diagnosticoOncologicoQuimioterapia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='diagnosticoOncologicoQuimioterapia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.diagQuimio is not None:
            self.diagQuimio.export(outfile, level, namespace_, name_='diagQuimio', pretty_print=pretty_print)
        if self.tipoQuimioterapia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoQuimioterapia>%s</%stipoQuimioterapia>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoQuimioterapia).encode(ExternalEncoding), input_name='tipoQuimioterapia'), namespace_, eol_))
        if self.planoTerapeutico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splanoTerapeutico>%s</%splanoTerapeutico>%s' % (namespace_, self.gds_format_string(quote_xml(self.planoTerapeutico).encode(ExternalEncoding), input_name='planoTerapeutico'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='diagnosticoOncologicoQuimioterapia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.diagQuimio is not None:
            showIndent(outfile, level)
            outfile.write('diagQuimio=model_.ct_diagnosticoOncologico(\n')
            self.diagQuimio.exportLiteral(outfile, level, name_='diagQuimio')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.tipoQuimioterapia is not None:
            showIndent(outfile, level)
            outfile.write('tipoQuimioterapia=%s,\n' % quote_python(self.tipoQuimioterapia).encode(ExternalEncoding))
        if self.planoTerapeutico is not None:
            showIndent(outfile, level)
            outfile.write('planoTerapeutico=%s,\n' % quote_python(self.planoTerapeutico).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'diagQuimio':
            obj_ = ct_diagnosticoOncologico.factory()
            obj_.build(child_)
            self.diagQuimio = obj_
            obj_.original_tagname_ = 'diagQuimio'
        elif nodeName_ == 'tipoQuimioterapia':
            tipoQuimioterapia_ = child_.text
            tipoQuimioterapia_ = self.gds_validate_string(tipoQuimioterapia_, node, 'tipoQuimioterapia')
            self.tipoQuimioterapia = tipoQuimioterapia_
            # validate type dm_tipoQuimioterapia
            self.validate_dm_tipoQuimioterapia(self.tipoQuimioterapia)
        elif nodeName_ == 'planoTerapeutico':
            planoTerapeutico_ = child_.text
            planoTerapeutico_ = self.gds_validate_string(planoTerapeutico_, node, 'planoTerapeutico')
            self.planoTerapeutico = planoTerapeutico_
            # validate type st_texto1000
            self.validate_st_texto1000(self.planoTerapeutico)
# end class diagnosticoOncologicoQuimioterapia


class drogasSolicitadas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, drogaSolicitada=None):
        self.original_tagname_ = None
        if drogaSolicitada is None:
            self.drogaSolicitada = []
        else:
            self.drogaSolicitada = drogaSolicitada
    def factory(*args_, **kwargs_):
        if drogasSolicitadas.subclass:
            return drogasSolicitadas.subclass(*args_, **kwargs_)
        else:
            return drogasSolicitadas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_drogaSolicitada(self): return self.drogaSolicitada
    def set_drogaSolicitada(self, drogaSolicitada): self.drogaSolicitada = drogaSolicitada
    def add_drogaSolicitada(self, value): self.drogaSolicitada.append(value)
    def insert_drogaSolicitada_at(self, index, value): self.drogaSolicitada.insert(index, value)
    def replace_drogaSolicitada_at(self, index, value): self.drogaSolicitada[index] = value
    def hasContent_(self):
        if (
            self.drogaSolicitada
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='drogasSolicitadas', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='drogasSolicitadas')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='drogasSolicitadas', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='drogasSolicitadas'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='drogasSolicitadas', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for drogaSolicitada_ in self.drogaSolicitada:
            drogaSolicitada_.export(outfile, level, namespace_, name_='drogaSolicitada', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='drogasSolicitadas'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('drogaSolicitada=[\n')
        level += 1
        for drogaSolicitada_ in self.drogaSolicitada:
            showIndent(outfile, level)
            outfile.write('model_.ct_drogasSolicitadas(\n')
            drogaSolicitada_.exportLiteral(outfile, level, name_='ct_drogasSolicitadas')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'drogaSolicitada':
            obj_ = ct_drogasSolicitadas.factory()
            obj_.build(child_)
            self.drogaSolicitada.append(obj_)
            obj_.original_tagname_ = 'drogaSolicitada'
# end class drogasSolicitadas


class tratamentosAnteriores(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cirurgia=None, datacirurgia=None, areaIrradiada=None, dataIrradiacao=None):
        self.original_tagname_ = None
        self.cirurgia = cirurgia
        self.validate_st_texto40(self.cirurgia)
        if isinstance(datacirurgia, basestring):
            initvalue_ = datetime_.datetime.strptime(datacirurgia, '%Y-%m-%d').date()
        else:
            initvalue_ = datacirurgia
        self.datacirurgia = initvalue_
        self.areaIrradiada = areaIrradiada
        self.validate_st_texto40(self.areaIrradiada)
        if isinstance(dataIrradiacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataIrradiacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataIrradiacao
        self.dataIrradiacao = initvalue_
    def factory(*args_, **kwargs_):
        if tratamentosAnteriores.subclass:
            return tratamentosAnteriores.subclass(*args_, **kwargs_)
        else:
            return tratamentosAnteriores(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cirurgia(self): return self.cirurgia
    def set_cirurgia(self, cirurgia): self.cirurgia = cirurgia
    def get_datacirurgia(self): return self.datacirurgia
    def set_datacirurgia(self, datacirurgia): self.datacirurgia = datacirurgia
    def get_areaIrradiada(self): return self.areaIrradiada
    def set_areaIrradiada(self, areaIrradiada): self.areaIrradiada = areaIrradiada
    def get_dataIrradiacao(self): return self.dataIrradiacao
    def set_dataIrradiacao(self, dataIrradiacao): self.dataIrradiacao = dataIrradiacao
    def validate_st_texto40(self, value):
        # Validate type st_texto40, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.cirurgia is not None or
            self.datacirurgia is not None or
            self.areaIrradiada is not None or
            self.dataIrradiacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='tratamentosAnteriores', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='tratamentosAnteriores')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='tratamentosAnteriores', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='tratamentosAnteriores'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='tratamentosAnteriores', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cirurgia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scirurgia>%s</%scirurgia>%s' % (namespace_, self.gds_format_string(quote_xml(self.cirurgia).encode(ExternalEncoding), input_name='cirurgia'), namespace_, eol_))
        if self.datacirurgia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatacirurgia>%s</%sdatacirurgia>%s' % (namespace_, self.gds_format_date(self.datacirurgia, input_name='datacirurgia'), namespace_, eol_))
        if self.areaIrradiada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sareaIrradiada>%s</%sareaIrradiada>%s' % (namespace_, self.gds_format_string(quote_xml(self.areaIrradiada).encode(ExternalEncoding), input_name='areaIrradiada'), namespace_, eol_))
        if self.dataIrradiacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataIrradiacao>%s</%sdataIrradiacao>%s' % (namespace_, self.gds_format_date(self.dataIrradiacao, input_name='dataIrradiacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='tratamentosAnteriores'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cirurgia is not None:
            showIndent(outfile, level)
            outfile.write('cirurgia=%s,\n' % quote_python(self.cirurgia).encode(ExternalEncoding))
        if self.datacirurgia is not None:
            showIndent(outfile, level)
            outfile.write('datacirurgia=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.datacirurgia, input_name='datacirurgia'))
        if self.areaIrradiada is not None:
            showIndent(outfile, level)
            outfile.write('areaIrradiada=%s,\n' % quote_python(self.areaIrradiada).encode(ExternalEncoding))
        if self.dataIrradiacao is not None:
            showIndent(outfile, level)
            outfile.write('dataIrradiacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataIrradiacao, input_name='dataIrradiacao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cirurgia':
            cirurgia_ = child_.text
            cirurgia_ = self.gds_validate_string(cirurgia_, node, 'cirurgia')
            self.cirurgia = cirurgia_
            # validate type st_texto40
            self.validate_st_texto40(self.cirurgia)
        elif nodeName_ == 'datacirurgia':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.datacirurgia = dval_
            # validate type st_data
            self.validate_st_data(self.datacirurgia)
        elif nodeName_ == 'areaIrradiada':
            areaIrradiada_ = child_.text
            areaIrradiada_ = self.gds_validate_string(areaIrradiada_, node, 'areaIrradiada')
            self.areaIrradiada = areaIrradiada_
            # validate type st_texto40
            self.validate_st_texto40(self.areaIrradiada)
        elif nodeName_ == 'dataIrradiacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataIrradiacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataIrradiacao)
# end class tratamentosAnteriores


class ctm_anexoSolicitacaoRadio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoAnexo=None, dadosBeneficiario=None, dadosComplementaresBeneficiario=None, medicoSolicitante=None, diagnosticoOncologicoRadio=None, tratamentosAnteriores=None, procedimentosComplementares=None, numeroCampos=None, doseCampo=None, doseTotal=None, nrDias=None, dtPrevistaInicio=None, observacao=None):
        self.original_tagname_ = None
        self.cabecalhoAnexo = cabecalhoAnexo
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
        self.medicoSolicitante = medicoSolicitante
        self.diagnosticoOncologicoRadio = diagnosticoOncologicoRadio
        self.tratamentosAnteriores = tratamentosAnteriores
        self.procedimentosComplementares = procedimentosComplementares
        self.numeroCampos = numeroCampos
        self.validate_st_numerico3(self.numeroCampos)
        self.doseCampo = doseCampo
        self.validate_st_numerico4(self.doseCampo)
        self.doseTotal = doseTotal
        self.validate_st_numerico4(self.doseTotal)
        self.nrDias = nrDias
        self.validate_st_numerico3(self.nrDias)
        if isinstance(dtPrevistaInicio, basestring):
            initvalue_ = datetime_.datetime.strptime(dtPrevistaInicio, '%Y-%m-%d').date()
        else:
            initvalue_ = dtPrevistaInicio
        self.dtPrevistaInicio = initvalue_
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if ctm_anexoSolicitacaoRadio.subclass:
            return ctm_anexoSolicitacaoRadio.subclass(*args_, **kwargs_)
        else:
            return ctm_anexoSolicitacaoRadio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoAnexo(self): return self.cabecalhoAnexo
    def set_cabecalhoAnexo(self, cabecalhoAnexo): self.cabecalhoAnexo = cabecalhoAnexo
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosComplementaresBeneficiario(self): return self.dadosComplementaresBeneficiario
    def set_dadosComplementaresBeneficiario(self, dadosComplementaresBeneficiario): self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
    def get_medicoSolicitante(self): return self.medicoSolicitante
    def set_medicoSolicitante(self, medicoSolicitante): self.medicoSolicitante = medicoSolicitante
    def get_diagnosticoOncologicoRadio(self): return self.diagnosticoOncologicoRadio
    def set_diagnosticoOncologicoRadio(self, diagnosticoOncologicoRadio): self.diagnosticoOncologicoRadio = diagnosticoOncologicoRadio
    def get_tratamentosAnteriores(self): return self.tratamentosAnteriores
    def set_tratamentosAnteriores(self, tratamentosAnteriores): self.tratamentosAnteriores = tratamentosAnteriores
    def get_procedimentosComplementares(self): return self.procedimentosComplementares
    def set_procedimentosComplementares(self, procedimentosComplementares): self.procedimentosComplementares = procedimentosComplementares
    def get_numeroCampos(self): return self.numeroCampos
    def set_numeroCampos(self, numeroCampos): self.numeroCampos = numeroCampos
    def get_doseCampo(self): return self.doseCampo
    def set_doseCampo(self, doseCampo): self.doseCampo = doseCampo
    def get_doseTotal(self): return self.doseTotal
    def set_doseTotal(self, doseTotal): self.doseTotal = doseTotal
    def get_nrDias(self): return self.nrDias
    def set_nrDias(self, nrDias): self.nrDias = nrDias
    def get_dtPrevistaInicio(self): return self.dtPrevistaInicio
    def set_dtPrevistaInicio(self, dtPrevistaInicio): self.dtPrevistaInicio = dtPrevistaInicio
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_st_numerico4(self, value):
        # Validate type st_numerico4, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico4' % {"value" : value} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoAnexo is not None or
            self.dadosBeneficiario is not None or
            self.dadosComplementaresBeneficiario is not None or
            self.medicoSolicitante is not None or
            self.diagnosticoOncologicoRadio is not None or
            self.tratamentosAnteriores is not None or
            self.procedimentosComplementares is not None or
            self.numeroCampos is not None or
            self.doseCampo is not None or
            self.doseTotal is not None or
            self.nrDias is not None or
            self.dtPrevistaInicio is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitacaoRadio', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_anexoSolicitacaoRadio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_anexoSolicitacaoRadio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_anexoSolicitacaoRadio'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitacaoRadio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoAnexo is not None:
            self.cabecalhoAnexo.export(outfile, level, namespace_, name_='cabecalhoAnexo', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosComplementaresBeneficiario is not None:
            self.dadosComplementaresBeneficiario.export(outfile, level, namespace_, name_='dadosComplementaresBeneficiario', pretty_print=pretty_print)
        if self.medicoSolicitante is not None:
            self.medicoSolicitante.export(outfile, level, namespace_, name_='medicoSolicitante', pretty_print=pretty_print)
        if self.diagnosticoOncologicoRadio is not None:
            self.diagnosticoOncologicoRadio.export(outfile, level, namespace_, name_='diagnosticoOncologicoRadio', pretty_print=pretty_print)
        if self.tratamentosAnteriores is not None:
            self.tratamentosAnteriores.export(outfile, level, namespace_, name_='tratamentosAnteriores', pretty_print=pretty_print)
        if self.procedimentosComplementares is not None:
            self.procedimentosComplementares.export(outfile, level, namespace_, name_='procedimentosComplementares', pretty_print=pretty_print)
        if self.numeroCampos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCampos>%s</%snumeroCampos>%s' % (namespace_, self.gds_format_integer(self.numeroCampos, input_name='numeroCampos'), namespace_, eol_))
        if self.doseCampo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoseCampo>%s</%sdoseCampo>%s' % (namespace_, self.gds_format_integer(self.doseCampo, input_name='doseCampo'), namespace_, eol_))
        if self.doseTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoseTotal>%s</%sdoseTotal>%s' % (namespace_, self.gds_format_integer(self.doseTotal, input_name='doseTotal'), namespace_, eol_))
        if self.nrDias is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrDias>%s</%snrDias>%s' % (namespace_, self.gds_format_integer(self.nrDias, input_name='nrDias'), namespace_, eol_))
        if self.dtPrevistaInicio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdtPrevistaInicio>%s</%sdtPrevistaInicio>%s' % (namespace_, self.gds_format_date(self.dtPrevistaInicio, input_name='dtPrevistaInicio'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_anexoSolicitacaoRadio'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoAnexo is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoAnexo=model_.ct_anexoCabecalho(\n')
            self.cabecalhoAnexo.exportLiteral(outfile, level, name_='cabecalhoAnexo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosComplementaresBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosComplementaresBeneficiario=model_.ct_dadosComplementaresBeneficiarioRadio(\n')
            self.dadosComplementaresBeneficiario.exportLiteral(outfile, level, name_='dadosComplementaresBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.medicoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('medicoSolicitante=model_.ctm_anexoSolicitante(\n')
            self.medicoSolicitante.exportLiteral(outfile, level, name_='medicoSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.diagnosticoOncologicoRadio is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoOncologicoRadio=model_.diagnosticoOncologicoRadio(\n')
            self.diagnosticoOncologicoRadio.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.tratamentosAnteriores is not None:
            showIndent(outfile, level)
            outfile.write('tratamentosAnteriores=model_.tratamentosAnteriores(\n')
            self.tratamentosAnteriores.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosComplementares is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosComplementares=model_.procedimentosComplementares(\n')
            self.procedimentosComplementares.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCampos is not None:
            showIndent(outfile, level)
            outfile.write('numeroCampos=%d,\n' % self.numeroCampos)
        if self.doseCampo is not None:
            showIndent(outfile, level)
            outfile.write('doseCampo=%d,\n' % self.doseCampo)
        if self.doseTotal is not None:
            showIndent(outfile, level)
            outfile.write('doseTotal=%d,\n' % self.doseTotal)
        if self.nrDias is not None:
            showIndent(outfile, level)
            outfile.write('nrDias=%d,\n' % self.nrDias)
        if self.dtPrevistaInicio is not None:
            showIndent(outfile, level)
            outfile.write('dtPrevistaInicio=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dtPrevistaInicio, input_name='dtPrevistaInicio'))
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoAnexo':
            obj_ = ct_anexoCabecalho.factory()
            obj_.build(child_)
            self.cabecalhoAnexo = obj_
            obj_.original_tagname_ = 'cabecalhoAnexo'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosComplementaresBeneficiario':
            obj_ = ct_dadosComplementaresBeneficiarioRadio.factory()
            obj_.build(child_)
            self.dadosComplementaresBeneficiario = obj_
            obj_.original_tagname_ = 'dadosComplementaresBeneficiario'
        elif nodeName_ == 'medicoSolicitante':
            obj_ = ctm_anexoSolicitante.factory()
            obj_.build(child_)
            self.medicoSolicitante = obj_
            obj_.original_tagname_ = 'medicoSolicitante'
        elif nodeName_ == 'diagnosticoOncologicoRadio':
            obj_ = diagnosticoOncologicoRadio.factory()
            obj_.build(child_)
            self.diagnosticoOncologicoRadio = obj_
            obj_.original_tagname_ = 'diagnosticoOncologicoRadio'
        elif nodeName_ == 'tratamentosAnteriores':
            obj_ = tratamentosAnteriores.factory()
            obj_.build(child_)
            self.tratamentosAnteriores = obj_
            obj_.original_tagname_ = 'tratamentosAnteriores'
        elif nodeName_ == 'procedimentosComplementares':
            obj_ = procedimentosComplementares.factory()
            obj_.build(child_)
            self.procedimentosComplementares = obj_
            obj_.original_tagname_ = 'procedimentosComplementares'
        elif nodeName_ == 'numeroCampos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroCampos')
            self.numeroCampos = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.numeroCampos)
        elif nodeName_ == 'doseCampo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'doseCampo')
            self.doseCampo = ival_
            # validate type st_numerico4
            self.validate_st_numerico4(self.doseCampo)
        elif nodeName_ == 'doseTotal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'doseTotal')
            self.doseTotal = ival_
            # validate type st_numerico4
            self.validate_st_numerico4(self.doseTotal)
        elif nodeName_ == 'nrDias':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'nrDias')
            self.nrDias = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.nrDias)
        elif nodeName_ == 'dtPrevistaInicio':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtPrevistaInicio = dval_
            # validate type st_data
            self.validate_st_data(self.dtPrevistaInicio)
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class ctm_anexoSolicitacaoRadio


class diagnosticoOncologicoRadio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, diagRadio=None, diagnosticoImagem=None):
        self.original_tagname_ = None
        self.diagRadio = diagRadio
        self.diagnosticoImagem = diagnosticoImagem
        self.validate_dm_diagnosticoImagem(self.diagnosticoImagem)
    def factory(*args_, **kwargs_):
        if diagnosticoOncologicoRadio.subclass:
            return diagnosticoOncologicoRadio.subclass(*args_, **kwargs_)
        else:
            return diagnosticoOncologicoRadio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_diagRadio(self): return self.diagRadio
    def set_diagRadio(self, diagRadio): self.diagRadio = diagRadio
    def get_diagnosticoImagem(self): return self.diagnosticoImagem
    def set_diagnosticoImagem(self, diagnosticoImagem): self.diagnosticoImagem = diagnosticoImagem
    def validate_dm_diagnosticoImagem(self, value):
        # Validate type dm_diagnosticoImagem, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_diagnosticoImagem' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.diagRadio is not None or
            self.diagnosticoImagem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='diagnosticoOncologicoRadio', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='diagnosticoOncologicoRadio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='diagnosticoOncologicoRadio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='diagnosticoOncologicoRadio'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='diagnosticoOncologicoRadio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.diagRadio is not None:
            self.diagRadio.export(outfile, level, namespace_, name_='diagRadio', pretty_print=pretty_print)
        if self.diagnosticoImagem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiagnosticoImagem>%s</%sdiagnosticoImagem>%s' % (namespace_, self.gds_format_string(quote_xml(self.diagnosticoImagem).encode(ExternalEncoding), input_name='diagnosticoImagem'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='diagnosticoOncologicoRadio'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.diagRadio is not None:
            showIndent(outfile, level)
            outfile.write('diagRadio=model_.ct_diagnosticoOncologico(\n')
            self.diagRadio.exportLiteral(outfile, level, name_='diagRadio')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.diagnosticoImagem is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoImagem=%s,\n' % quote_python(self.diagnosticoImagem).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'diagRadio':
            obj_ = ct_diagnosticoOncologico.factory()
            obj_.build(child_)
            self.diagRadio = obj_
            obj_.original_tagname_ = 'diagRadio'
        elif nodeName_ == 'diagnosticoImagem':
            diagnosticoImagem_ = child_.text
            diagnosticoImagem_ = self.gds_validate_string(diagnosticoImagem_, node, 'diagnosticoImagem')
            self.diagnosticoImagem = diagnosticoImagem_
            # validate type dm_diagnosticoImagem
            self.validate_dm_diagnosticoImagem(self.diagnosticoImagem)
# end class diagnosticoOncologicoRadio


class procedimentosComplementares(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimentoComplementar=None):
        self.original_tagname_ = None
        if procedimentoComplementar is None:
            self.procedimentoComplementar = []
        else:
            self.procedimentoComplementar = procedimentoComplementar
    def factory(*args_, **kwargs_):
        if procedimentosComplementares.subclass:
            return procedimentosComplementares.subclass(*args_, **kwargs_)
        else:
            return procedimentosComplementares(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimentoComplementar(self): return self.procedimentoComplementar
    def set_procedimentoComplementar(self, procedimentoComplementar): self.procedimentoComplementar = procedimentoComplementar
    def add_procedimentoComplementar(self, value): self.procedimentoComplementar.append(value)
    def insert_procedimentoComplementar_at(self, index, value): self.procedimentoComplementar.insert(index, value)
    def replace_procedimentoComplementar_at(self, index, value): self.procedimentoComplementar[index] = value
    def hasContent_(self):
        if (
            self.procedimentoComplementar
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentosComplementares', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentosComplementares')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentosComplementares', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentosComplementares'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentosComplementares', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for procedimentoComplementar_ in self.procedimentoComplementar:
            procedimentoComplementar_.export(outfile, level, namespace_, name_='procedimentoComplementar', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='procedimentosComplementares'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('procedimentoComplementar=[\n')
        level += 1
        for procedimentoComplementar_ in self.procedimentoComplementar:
            showIndent(outfile, level)
            outfile.write('model_.ct_procedimentosComplementares(\n')
            procedimentoComplementar_.exportLiteral(outfile, level, name_='ct_procedimentosComplementares')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimentoComplementar':
            obj_ = ct_procedimentosComplementares.factory()
            obj_.build(child_)
            self.procedimentoComplementar.append(obj_)
            obj_.original_tagname_ = 'procedimentoComplementar'
# end class procedimentosComplementares


class ctm_anexoSolicitante(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nomeProfissional=None, telefoneProfissional=None, emailProfissional=None):
        self.original_tagname_ = None
        self.nomeProfissional = nomeProfissional
        self.validate_st_texto70(self.nomeProfissional)
        self.telefoneProfissional = telefoneProfissional
        self.validate_st_texto11(self.telefoneProfissional)
        self.emailProfissional = emailProfissional
        self.validate_st_texto60(self.emailProfissional)
    def factory(*args_, **kwargs_):
        if ctm_anexoSolicitante.subclass:
            return ctm_anexoSolicitante.subclass(*args_, **kwargs_)
        else:
            return ctm_anexoSolicitante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nomeProfissional(self): return self.nomeProfissional
    def set_nomeProfissional(self, nomeProfissional): self.nomeProfissional = nomeProfissional
    def get_telefoneProfissional(self): return self.telefoneProfissional
    def set_telefoneProfissional(self, telefoneProfissional): self.telefoneProfissional = telefoneProfissional
    def get_emailProfissional(self): return self.emailProfissional
    def set_emailProfissional(self, emailProfissional): self.emailProfissional = emailProfissional
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto11(self, value):
        # Validate type st_texto11, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto11' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto11' % {"value" : value.encode("utf-8")} )
    def validate_st_texto60(self, value):
        # Validate type st_texto60, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto60' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto60' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nomeProfissional is not None or
            self.telefoneProfissional is not None or
            self.emailProfissional is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitante', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_anexoSolicitante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_anexoSolicitante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_anexoSolicitante'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_anexoSolicitante', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nomeProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProfissional>%s</%snomeProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProfissional).encode(ExternalEncoding), input_name='nomeProfissional'), namespace_, eol_))
        if self.telefoneProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stelefoneProfissional>%s</%stelefoneProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.telefoneProfissional).encode(ExternalEncoding), input_name='telefoneProfissional'), namespace_, eol_))
        if self.emailProfissional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semailProfissional>%s</%semailProfissional>%s' % (namespace_, self.gds_format_string(quote_xml(self.emailProfissional).encode(ExternalEncoding), input_name='emailProfissional'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_anexoSolicitante'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nomeProfissional is not None:
            showIndent(outfile, level)
            outfile.write('nomeProfissional=%s,\n' % quote_python(self.nomeProfissional).encode(ExternalEncoding))
        if self.telefoneProfissional is not None:
            showIndent(outfile, level)
            outfile.write('telefoneProfissional=%s,\n' % quote_python(self.telefoneProfissional).encode(ExternalEncoding))
        if self.emailProfissional is not None:
            showIndent(outfile, level)
            outfile.write('emailProfissional=%s,\n' % quote_python(self.emailProfissional).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nomeProfissional':
            nomeProfissional_ = child_.text
            nomeProfissional_ = self.gds_validate_string(nomeProfissional_, node, 'nomeProfissional')
            self.nomeProfissional = nomeProfissional_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProfissional)
        elif nodeName_ == 'telefoneProfissional':
            telefoneProfissional_ = child_.text
            telefoneProfissional_ = self.gds_validate_string(telefoneProfissional_, node, 'telefoneProfissional')
            self.telefoneProfissional = telefoneProfissional_
            # validate type st_texto11
            self.validate_st_texto11(self.telefoneProfissional)
        elif nodeName_ == 'emailProfissional':
            emailProfissional_ = child_.text
            emailProfissional_ = self.gds_validate_string(emailProfissional_, node, 'emailProfissional')
            self.emailProfissional = emailProfissional_
            # validate type st_texto60
            self.validate_st_texto60(self.emailProfissional)
# end class ctm_anexoSolicitante


class ctm_autorizacaoProrrogacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, autorizacaoDosServicos=None, diariasAutorizadas=None, acomodacaoAutorizada=None, justificativaOperadora=None):
        self.original_tagname_ = None
        self.autorizacaoDosServicos = autorizacaoDosServicos
        self.diariasAutorizadas = diariasAutorizadas
        self.validate_st_numerico2(self.diariasAutorizadas)
        self.acomodacaoAutorizada = acomodacaoAutorizada
        self.validate_dm_tipoAcomodacao(self.acomodacaoAutorizada)
        self.justificativaOperadora = justificativaOperadora
        self.validate_st_texto500(self.justificativaOperadora)
    def factory(*args_, **kwargs_):
        if ctm_autorizacaoProrrogacao.subclass:
            return ctm_autorizacaoProrrogacao.subclass(*args_, **kwargs_)
        else:
            return ctm_autorizacaoProrrogacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_autorizacaoDosServicos(self): return self.autorizacaoDosServicos
    def set_autorizacaoDosServicos(self, autorizacaoDosServicos): self.autorizacaoDosServicos = autorizacaoDosServicos
    def get_diariasAutorizadas(self): return self.diariasAutorizadas
    def set_diariasAutorizadas(self, diariasAutorizadas): self.diariasAutorizadas = diariasAutorizadas
    def get_acomodacaoAutorizada(self): return self.acomodacaoAutorizada
    def set_acomodacaoAutorizada(self, acomodacaoAutorizada): self.acomodacaoAutorizada = acomodacaoAutorizada
    def get_justificativaOperadora(self): return self.justificativaOperadora
    def set_justificativaOperadora(self, justificativaOperadora): self.justificativaOperadora = justificativaOperadora
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_dm_tipoAcomodacao(self, value):
        # Validate type dm_tipoAcomodacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['02', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '25', '26', '27', '28', '29', '30', '31', '32', '33', '36', '37', '38', '39', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '56', '57', '58', '59']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoAcomodacao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.autorizacaoDosServicos is not None or
            self.diariasAutorizadas is not None or
            self.acomodacaoAutorizada is not None or
            self.justificativaOperadora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoProrrogacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_autorizacaoProrrogacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_autorizacaoProrrogacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_autorizacaoProrrogacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoProrrogacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.autorizacaoDosServicos is not None:
            self.autorizacaoDosServicos.export(outfile, level, namespace_, name_='autorizacaoDosServicos', pretty_print=pretty_print)
        if self.diariasAutorizadas is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiariasAutorizadas>%s</%sdiariasAutorizadas>%s' % (namespace_, self.gds_format_integer(self.diariasAutorizadas, input_name='diariasAutorizadas'), namespace_, eol_))
        if self.acomodacaoAutorizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sacomodacaoAutorizada>%s</%sacomodacaoAutorizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.acomodacaoAutorizada).encode(ExternalEncoding), input_name='acomodacaoAutorizada'), namespace_, eol_))
        if self.justificativaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaOperadora>%s</%sjustificativaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaOperadora).encode(ExternalEncoding), input_name='justificativaOperadora'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_autorizacaoProrrogacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.autorizacaoDosServicos is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoDosServicos=model_.ctm_autorizacaoServico(\n')
            self.autorizacaoDosServicos.exportLiteral(outfile, level, name_='autorizacaoDosServicos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.diariasAutorizadas is not None:
            showIndent(outfile, level)
            outfile.write('diariasAutorizadas=%d,\n' % self.diariasAutorizadas)
        if self.acomodacaoAutorizada is not None:
            showIndent(outfile, level)
            outfile.write('acomodacaoAutorizada=%s,\n' % quote_python(self.acomodacaoAutorizada).encode(ExternalEncoding))
        if self.justificativaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('justificativaOperadora=%s,\n' % quote_python(self.justificativaOperadora).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'autorizacaoDosServicos':
            obj_ = ctm_autorizacaoServico.factory()
            obj_.build(child_)
            self.autorizacaoDosServicos = obj_
            obj_.original_tagname_ = 'autorizacaoDosServicos'
        elif nodeName_ == 'diariasAutorizadas':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'diariasAutorizadas')
            self.diariasAutorizadas = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.diariasAutorizadas)
        elif nodeName_ == 'acomodacaoAutorizada':
            acomodacaoAutorizada_ = child_.text
            acomodacaoAutorizada_ = self.gds_validate_string(acomodacaoAutorizada_, node, 'acomodacaoAutorizada')
            self.acomodacaoAutorizada = acomodacaoAutorizada_
            # validate type dm_tipoAcomodacao
            self.validate_dm_tipoAcomodacao(self.acomodacaoAutorizada)
        elif nodeName_ == 'justificativaOperadora':
            justificativaOperadora_ = child_.text
            justificativaOperadora_ = self.gds_validate_string(justificativaOperadora_, node, 'justificativaOperadora')
            self.justificativaOperadora = justificativaOperadora_
            # validate type st_texto500
            self.validate_st_texto500(self.justificativaOperadora)
# end class ctm_autorizacaoProrrogacao


class ctm_autorizacaoInternacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, autorizacaoDosServicos=None, dataProvavelAdmissao=None, qtdDiariasAutorizadas=None, tipoAcomodacaoAutorizada=None):
        self.original_tagname_ = None
        self.autorizacaoDosServicos = autorizacaoDosServicos
        if isinstance(dataProvavelAdmissao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataProvavelAdmissao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataProvavelAdmissao
        self.dataProvavelAdmissao = initvalue_
        self.qtdDiariasAutorizadas = qtdDiariasAutorizadas
        self.validate_st_numerico3(self.qtdDiariasAutorizadas)
        self.tipoAcomodacaoAutorizada = tipoAcomodacaoAutorizada
        self.validate_dm_tipoAcomodacao(self.tipoAcomodacaoAutorizada)
    def factory(*args_, **kwargs_):
        if ctm_autorizacaoInternacao.subclass:
            return ctm_autorizacaoInternacao.subclass(*args_, **kwargs_)
        else:
            return ctm_autorizacaoInternacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_autorizacaoDosServicos(self): return self.autorizacaoDosServicos
    def set_autorizacaoDosServicos(self, autorizacaoDosServicos): self.autorizacaoDosServicos = autorizacaoDosServicos
    def get_dataProvavelAdmissao(self): return self.dataProvavelAdmissao
    def set_dataProvavelAdmissao(self, dataProvavelAdmissao): self.dataProvavelAdmissao = dataProvavelAdmissao
    def get_qtdDiariasAutorizadas(self): return self.qtdDiariasAutorizadas
    def set_qtdDiariasAutorizadas(self, qtdDiariasAutorizadas): self.qtdDiariasAutorizadas = qtdDiariasAutorizadas
    def get_tipoAcomodacaoAutorizada(self): return self.tipoAcomodacaoAutorizada
    def set_tipoAcomodacaoAutorizada(self, tipoAcomodacaoAutorizada): self.tipoAcomodacaoAutorizada = tipoAcomodacaoAutorizada
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_dm_tipoAcomodacao(self, value):
        # Validate type dm_tipoAcomodacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['02', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '25', '26', '27', '28', '29', '30', '31', '32', '33', '36', '37', '38', '39', '40', '41', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '56', '57', '58', '59']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoAcomodacao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.autorizacaoDosServicos is not None or
            self.dataProvavelAdmissao is not None or
            self.qtdDiariasAutorizadas is not None or
            self.tipoAcomodacaoAutorizada is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoInternacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_autorizacaoInternacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_autorizacaoInternacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_autorizacaoInternacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoInternacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.autorizacaoDosServicos is not None:
            self.autorizacaoDosServicos.export(outfile, level, namespace_, name_='autorizacaoDosServicos', pretty_print=pretty_print)
        if self.dataProvavelAdmissao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataProvavelAdmissao>%s</%sdataProvavelAdmissao>%s' % (namespace_, self.gds_format_date(self.dataProvavelAdmissao, input_name='dataProvavelAdmissao'), namespace_, eol_))
        if self.qtdDiariasAutorizadas is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdDiariasAutorizadas>%s</%sqtdDiariasAutorizadas>%s' % (namespace_, self.gds_format_integer(self.qtdDiariasAutorizadas, input_name='qtdDiariasAutorizadas'), namespace_, eol_))
        if self.tipoAcomodacaoAutorizada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoAcomodacaoAutorizada>%s</%stipoAcomodacaoAutorizada>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoAcomodacaoAutorizada).encode(ExternalEncoding), input_name='tipoAcomodacaoAutorizada'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_autorizacaoInternacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.autorizacaoDosServicos is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoDosServicos=model_.ctm_autorizacaoServico(\n')
            self.autorizacaoDosServicos.exportLiteral(outfile, level, name_='autorizacaoDosServicos')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataProvavelAdmissao is not None:
            showIndent(outfile, level)
            outfile.write('dataProvavelAdmissao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataProvavelAdmissao, input_name='dataProvavelAdmissao'))
        if self.qtdDiariasAutorizadas is not None:
            showIndent(outfile, level)
            outfile.write('qtdDiariasAutorizadas=%d,\n' % self.qtdDiariasAutorizadas)
        if self.tipoAcomodacaoAutorizada is not None:
            showIndent(outfile, level)
            outfile.write('tipoAcomodacaoAutorizada=%s,\n' % quote_python(self.tipoAcomodacaoAutorizada).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'autorizacaoDosServicos':
            obj_ = ctm_autorizacaoServico.factory()
            obj_.build(child_)
            self.autorizacaoDosServicos = obj_
            obj_.original_tagname_ = 'autorizacaoDosServicos'
        elif nodeName_ == 'dataProvavelAdmissao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataProvavelAdmissao = dval_
            # validate type st_data
            self.validate_st_data(self.dataProvavelAdmissao)
        elif nodeName_ == 'qtdDiariasAutorizadas':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'qtdDiariasAutorizadas')
            self.qtdDiariasAutorizadas = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.qtdDiariasAutorizadas)
        elif nodeName_ == 'tipoAcomodacaoAutorizada':
            tipoAcomodacaoAutorizada_ = child_.text
            tipoAcomodacaoAutorizada_ = self.gds_validate_string(tipoAcomodacaoAutorizada_, node, 'tipoAcomodacaoAutorizada')
            self.tipoAcomodacaoAutorizada = tipoAcomodacaoAutorizada_
            # validate type dm_tipoAcomodacao
            self.validate_dm_tipoAcomodacao(self.tipoAcomodacaoAutorizada)
# end class ctm_autorizacaoInternacao


class ctm_autorizacaoOPME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosAutorizacao=None, dadosBeneficiario=None, statusSolicitacao=None, motivosNegativa=None, prestadorAutorizado=None, servicosAutorizadosOPME=None):
        self.original_tagname_ = None
        self.dadosAutorizacao = dadosAutorizacao
        self.dadosBeneficiario = dadosBeneficiario
        self.statusSolicitacao = statusSolicitacao
        self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        self.motivosNegativa = motivosNegativa
        self.prestadorAutorizado = prestadorAutorizado
        if servicosAutorizadosOPME is None:
            self.servicosAutorizadosOPME = []
        else:
            self.servicosAutorizadosOPME = servicosAutorizadosOPME
    def factory(*args_, **kwargs_):
        if ctm_autorizacaoOPME.subclass:
            return ctm_autorizacaoOPME.subclass(*args_, **kwargs_)
        else:
            return ctm_autorizacaoOPME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_statusSolicitacao(self): return self.statusSolicitacao
    def set_statusSolicitacao(self, statusSolicitacao): self.statusSolicitacao = statusSolicitacao
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def get_prestadorAutorizado(self): return self.prestadorAutorizado
    def set_prestadorAutorizado(self, prestadorAutorizado): self.prestadorAutorizado = prestadorAutorizado
    def get_servicosAutorizadosOPME(self): return self.servicosAutorizadosOPME
    def set_servicosAutorizadosOPME(self, servicosAutorizadosOPME): self.servicosAutorizadosOPME = servicosAutorizadosOPME
    def add_servicosAutorizadosOPME(self, value): self.servicosAutorizadosOPME.append(value)
    def insert_servicosAutorizadosOPME_at(self, index, value): self.servicosAutorizadosOPME.insert(index, value)
    def replace_servicosAutorizadosOPME_at(self, index, value): self.servicosAutorizadosOPME[index] = value
    def validate_dm_statusSolicitacao(self, value):
        # Validate type dm_statusSolicitacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosAutorizacao is not None or
            self.dadosBeneficiario is not None or
            self.statusSolicitacao is not None or
            self.motivosNegativa is not None or
            self.prestadorAutorizado is not None or
            self.servicosAutorizadosOPME
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoOPME', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_autorizacaoOPME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_autorizacaoOPME', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_autorizacaoOPME'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoOPME', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.statusSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusSolicitacao>%s</%sstatusSolicitacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusSolicitacao).encode(ExternalEncoding), input_name='statusSolicitacao'), namespace_, eol_))
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
        if self.prestadorAutorizado is not None:
            self.prestadorAutorizado.export(outfile, level, namespace_, name_='prestadorAutorizado', pretty_print=pretty_print)
        for servicosAutorizadosOPME_ in self.servicosAutorizadosOPME:
            servicosAutorizadosOPME_.export(outfile, level, namespace_, name_='servicosAutorizadosOPME', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_autorizacaoOPME'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoDados(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.statusSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('statusSolicitacao=%s,\n' % quote_python(self.statusSolicitacao).encode(ExternalEncoding))
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.prestadorAutorizado is not None:
            showIndent(outfile, level)
            outfile.write('prestadorAutorizado=model_.ct_contratadoDados(\n')
            self.prestadorAutorizado.exportLiteral(outfile, level, name_='prestadorAutorizado')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('servicosAutorizadosOPME=[\n')
        level += 1
        for servicosAutorizadosOPME_ in self.servicosAutorizadosOPME:
            showIndent(outfile, level)
            outfile.write('model_.servicosAutorizadosOPME(\n')
            servicosAutorizadosOPME_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoDados.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'statusSolicitacao':
            statusSolicitacao_ = child_.text
            statusSolicitacao_ = self.gds_validate_string(statusSolicitacao_, node, 'statusSolicitacao')
            self.statusSolicitacao = statusSolicitacao_
            # validate type dm_statusSolicitacao
            self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
        elif nodeName_ == 'prestadorAutorizado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.prestadorAutorizado = obj_
            obj_.original_tagname_ = 'prestadorAutorizado'
        elif nodeName_ == 'servicosAutorizadosOPME':
            obj_ = servicosAutorizadosOPME.factory()
            obj_.build(child_)
            self.servicosAutorizadosOPME.append(obj_)
            obj_.original_tagname_ = 'servicosAutorizadosOPME'
# end class ctm_autorizacaoOPME


class servicosAutorizadosOPME(ct_procedimentoAutorizado):
    subclass = None
    superclass = ct_procedimentoAutorizado
    def __init__(self, procedimento=None, quantidadeSolicitada=None, quantidadeAutorizada=None, valorSolicitado=None, valorAutorizado=None, opcaoFabricante=None, registroANVISA=None, codigoRefFabricante=None, autorizacaoFuncionamento=None, motivosNegativa=None):
        self.original_tagname_ = None
        super(servicosAutorizadosOPME, self).__init__(procedimento, quantidadeSolicitada, quantidadeAutorizada, valorSolicitado, valorAutorizado, opcaoFabricante, registroANVISA, codigoRefFabricante, autorizacaoFuncionamento, motivosNegativa, )
    def factory(*args_, **kwargs_):
        if servicosAutorizadosOPME.subclass:
            return servicosAutorizadosOPME.subclass(*args_, **kwargs_)
        else:
            return servicosAutorizadosOPME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(servicosAutorizadosOPME, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='servicosAutorizadosOPME', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='servicosAutorizadosOPME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='servicosAutorizadosOPME', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='servicosAutorizadosOPME'):
        super(servicosAutorizadosOPME, self).exportAttributes(outfile, level, already_processed, namespace_, name_='servicosAutorizadosOPME')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='servicosAutorizadosOPME', fromsubclass_=False, pretty_print=True):
        super(servicosAutorizadosOPME, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='servicosAutorizadosOPME'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(servicosAutorizadosOPME, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(servicosAutorizadosOPME, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(servicosAutorizadosOPME, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(servicosAutorizadosOPME, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class servicosAutorizadosOPME


class ctm_autorizacaoRadio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosAutorizacao=None, numeroCarteira=None, nomeBeneficiario=None, numeroCNS=None, statusSolicitacao=None, dadosComplementaresBeneficiario=None, medicoSolicitante=None, diagnosticoOncologicoRadio=None, tratamentosAnteriores=None, procedimentosComplementares=None, numeroCampos=None, doseCampo=None, doseTotal=None, nrDias=None, dtPrevistaInicio=None, motivosNegativa=None):
        self.original_tagname_ = None
        self.dadosAutorizacao = dadosAutorizacao
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.statusSolicitacao = statusSolicitacao
        self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
        self.medicoSolicitante = medicoSolicitante
        self.diagnosticoOncologicoRadio = diagnosticoOncologicoRadio
        self.tratamentosAnteriores = tratamentosAnteriores
        self.procedimentosComplementares = procedimentosComplementares
        self.numeroCampos = numeroCampos
        self.validate_st_numerico3(self.numeroCampos)
        self.doseCampo = doseCampo
        self.validate_st_numerico4(self.doseCampo)
        self.doseTotal = doseTotal
        self.validate_st_numerico4(self.doseTotal)
        self.nrDias = nrDias
        self.validate_st_numerico3(self.nrDias)
        if isinstance(dtPrevistaInicio, basestring):
            initvalue_ = datetime_.datetime.strptime(dtPrevistaInicio, '%Y-%m-%d').date()
        else:
            initvalue_ = dtPrevistaInicio
        self.dtPrevistaInicio = initvalue_
        self.motivosNegativa = motivosNegativa
    def factory(*args_, **kwargs_):
        if ctm_autorizacaoRadio.subclass:
            return ctm_autorizacaoRadio.subclass(*args_, **kwargs_)
        else:
            return ctm_autorizacaoRadio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_statusSolicitacao(self): return self.statusSolicitacao
    def set_statusSolicitacao(self, statusSolicitacao): self.statusSolicitacao = statusSolicitacao
    def get_dadosComplementaresBeneficiario(self): return self.dadosComplementaresBeneficiario
    def set_dadosComplementaresBeneficiario(self, dadosComplementaresBeneficiario): self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
    def get_medicoSolicitante(self): return self.medicoSolicitante
    def set_medicoSolicitante(self, medicoSolicitante): self.medicoSolicitante = medicoSolicitante
    def get_diagnosticoOncologicoRadio(self): return self.diagnosticoOncologicoRadio
    def set_diagnosticoOncologicoRadio(self, diagnosticoOncologicoRadio): self.diagnosticoOncologicoRadio = diagnosticoOncologicoRadio
    def get_tratamentosAnteriores(self): return self.tratamentosAnteriores
    def set_tratamentosAnteriores(self, tratamentosAnteriores): self.tratamentosAnteriores = tratamentosAnteriores
    def get_procedimentosComplementares(self): return self.procedimentosComplementares
    def set_procedimentosComplementares(self, procedimentosComplementares): self.procedimentosComplementares = procedimentosComplementares
    def get_numeroCampos(self): return self.numeroCampos
    def set_numeroCampos(self, numeroCampos): self.numeroCampos = numeroCampos
    def get_doseCampo(self): return self.doseCampo
    def set_doseCampo(self, doseCampo): self.doseCampo = doseCampo
    def get_doseTotal(self): return self.doseTotal
    def set_doseTotal(self, doseTotal): self.doseTotal = doseTotal
    def get_nrDias(self): return self.nrDias
    def set_nrDias(self, nrDias): self.nrDias = nrDias
    def get_dtPrevistaInicio(self): return self.dtPrevistaInicio
    def set_dtPrevistaInicio(self, dtPrevistaInicio): self.dtPrevistaInicio = dtPrevistaInicio
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_statusSolicitacao(self, value):
        # Validate type dm_statusSolicitacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def validate_st_numerico4(self, value):
        # Validate type st_numerico4, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico4' % {"value" : value} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.dadosAutorizacao is not None or
            self.numeroCarteira is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.statusSolicitacao is not None or
            self.dadosComplementaresBeneficiario is not None or
            self.medicoSolicitante is not None or
            self.diagnosticoOncologicoRadio is not None or
            self.tratamentosAnteriores is not None or
            self.procedimentosComplementares is not None or
            self.numeroCampos is not None or
            self.doseCampo is not None or
            self.doseTotal is not None or
            self.nrDias is not None or
            self.dtPrevistaInicio is not None or
            self.motivosNegativa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoRadio', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_autorizacaoRadio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_autorizacaoRadio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_autorizacaoRadio'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoRadio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.statusSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusSolicitacao>%s</%sstatusSolicitacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusSolicitacao).encode(ExternalEncoding), input_name='statusSolicitacao'), namespace_, eol_))
        if self.dadosComplementaresBeneficiario is not None:
            self.dadosComplementaresBeneficiario.export(outfile, level, namespace_, name_='dadosComplementaresBeneficiario', pretty_print=pretty_print)
        if self.medicoSolicitante is not None:
            self.medicoSolicitante.export(outfile, level, namespace_, name_='medicoSolicitante', pretty_print=pretty_print)
        if self.diagnosticoOncologicoRadio is not None:
            self.diagnosticoOncologicoRadio.export(outfile, level, namespace_, name_='diagnosticoOncologicoRadio', pretty_print=pretty_print)
        if self.tratamentosAnteriores is not None:
            self.tratamentosAnteriores.export(outfile, level, namespace_, name_='tratamentosAnteriores', pretty_print=pretty_print)
        if self.procedimentosComplementares is not None:
            self.procedimentosComplementares.export(outfile, level, namespace_, name_='procedimentosComplementares', pretty_print=pretty_print)
        if self.numeroCampos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCampos>%s</%snumeroCampos>%s' % (namespace_, self.gds_format_integer(self.numeroCampos, input_name='numeroCampos'), namespace_, eol_))
        if self.doseCampo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoseCampo>%s</%sdoseCampo>%s' % (namespace_, self.gds_format_integer(self.doseCampo, input_name='doseCampo'), namespace_, eol_))
        if self.doseTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoseTotal>%s</%sdoseTotal>%s' % (namespace_, self.gds_format_integer(self.doseTotal, input_name='doseTotal'), namespace_, eol_))
        if self.nrDias is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrDias>%s</%snrDias>%s' % (namespace_, self.gds_format_integer(self.nrDias, input_name='nrDias'), namespace_, eol_))
        if self.dtPrevistaInicio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdtPrevistaInicio>%s</%sdtPrevistaInicio>%s' % (namespace_, self.gds_format_date(self.dtPrevistaInicio, input_name='dtPrevistaInicio'), namespace_, eol_))
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_autorizacaoRadio'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoDados(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.statusSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('statusSolicitacao=%s,\n' % quote_python(self.statusSolicitacao).encode(ExternalEncoding))
        if self.dadosComplementaresBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosComplementaresBeneficiario=model_.ct_dadosComplementaresBeneficiarioRadio(\n')
            self.dadosComplementaresBeneficiario.exportLiteral(outfile, level, name_='dadosComplementaresBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.medicoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('medicoSolicitante=model_.ctm_anexoSolicitante(\n')
            self.medicoSolicitante.exportLiteral(outfile, level, name_='medicoSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.diagnosticoOncologicoRadio is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoOncologicoRadio=model_.diagnosticoOncologicoRadio(\n')
            self.diagnosticoOncologicoRadio.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.tratamentosAnteriores is not None:
            showIndent(outfile, level)
            outfile.write('tratamentosAnteriores=model_.tratamentosAnteriores(\n')
            self.tratamentosAnteriores.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosComplementares is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosComplementares=model_.procedimentosComplementares(\n')
            self.procedimentosComplementares.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCampos is not None:
            showIndent(outfile, level)
            outfile.write('numeroCampos=%d,\n' % self.numeroCampos)
        if self.doseCampo is not None:
            showIndent(outfile, level)
            outfile.write('doseCampo=%d,\n' % self.doseCampo)
        if self.doseTotal is not None:
            showIndent(outfile, level)
            outfile.write('doseTotal=%d,\n' % self.doseTotal)
        if self.nrDias is not None:
            showIndent(outfile, level)
            outfile.write('nrDias=%d,\n' % self.nrDias)
        if self.dtPrevistaInicio is not None:
            showIndent(outfile, level)
            outfile.write('dtPrevistaInicio=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dtPrevistaInicio, input_name='dtPrevistaInicio'))
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoDados.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'statusSolicitacao':
            statusSolicitacao_ = child_.text
            statusSolicitacao_ = self.gds_validate_string(statusSolicitacao_, node, 'statusSolicitacao')
            self.statusSolicitacao = statusSolicitacao_
            # validate type dm_statusSolicitacao
            self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        elif nodeName_ == 'dadosComplementaresBeneficiario':
            obj_ = ct_dadosComplementaresBeneficiarioRadio.factory()
            obj_.build(child_)
            self.dadosComplementaresBeneficiario = obj_
            obj_.original_tagname_ = 'dadosComplementaresBeneficiario'
        elif nodeName_ == 'medicoSolicitante':
            obj_ = ctm_anexoSolicitante.factory()
            obj_.build(child_)
            self.medicoSolicitante = obj_
            obj_.original_tagname_ = 'medicoSolicitante'
        elif nodeName_ == 'diagnosticoOncologicoRadio':
            obj_ = diagnosticoOncologicoRadio.factory()
            obj_.build(child_)
            self.diagnosticoOncologicoRadio = obj_
            obj_.original_tagname_ = 'diagnosticoOncologicoRadio'
        elif nodeName_ == 'tratamentosAnteriores':
            obj_ = tratamentosAnteriores.factory()
            obj_.build(child_)
            self.tratamentosAnteriores = obj_
            obj_.original_tagname_ = 'tratamentosAnteriores'
        elif nodeName_ == 'procedimentosComplementares':
            obj_ = procedimentosComplementares.factory()
            obj_.build(child_)
            self.procedimentosComplementares = obj_
            obj_.original_tagname_ = 'procedimentosComplementares'
        elif nodeName_ == 'numeroCampos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroCampos')
            self.numeroCampos = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.numeroCampos)
        elif nodeName_ == 'doseCampo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'doseCampo')
            self.doseCampo = ival_
            # validate type st_numerico4
            self.validate_st_numerico4(self.doseCampo)
        elif nodeName_ == 'doseTotal':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'doseTotal')
            self.doseTotal = ival_
            # validate type st_numerico4
            self.validate_st_numerico4(self.doseTotal)
        elif nodeName_ == 'nrDias':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'nrDias')
            self.nrDias = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.nrDias)
        elif nodeName_ == 'dtPrevistaInicio':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtPrevistaInicio = dval_
            # validate type st_data
            self.validate_st_data(self.dtPrevistaInicio)
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
# end class ctm_autorizacaoRadio


class ctm_autorizacaoQuimio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosAutorizacao=None, numeroCarteira=None, statusSolicitacao=None, nomeBeneficiario=None, numeroCNS=None, dadosComplementaresBeneficiario=None, medicoSolicitante=None, diagnosticoOncologicoQuimioterapia=None, drogasSolicitadas=None, tratamentosAnteriores=None, numeroCiclos=None, cicloAtual=None, intervaloCiclos=None, motivosNegativa=None):
        self.original_tagname_ = None
        self.dadosAutorizacao = dadosAutorizacao
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.statusSolicitacao = statusSolicitacao
        self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
        self.medicoSolicitante = medicoSolicitante
        self.diagnosticoOncologicoQuimioterapia = diagnosticoOncologicoQuimioterapia
        self.drogasSolicitadas = drogasSolicitadas
        self.tratamentosAnteriores = tratamentosAnteriores
        self.numeroCiclos = numeroCiclos
        self.validate_st_numerico2(self.numeroCiclos)
        self.cicloAtual = cicloAtual
        self.validate_st_numerico2(self.cicloAtual)
        self.intervaloCiclos = intervaloCiclos
        self.validate_st_numerico3(self.intervaloCiclos)
        self.motivosNegativa = motivosNegativa
    def factory(*args_, **kwargs_):
        if ctm_autorizacaoQuimio.subclass:
            return ctm_autorizacaoQuimio.subclass(*args_, **kwargs_)
        else:
            return ctm_autorizacaoQuimio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_statusSolicitacao(self): return self.statusSolicitacao
    def set_statusSolicitacao(self, statusSolicitacao): self.statusSolicitacao = statusSolicitacao
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_dadosComplementaresBeneficiario(self): return self.dadosComplementaresBeneficiario
    def set_dadosComplementaresBeneficiario(self, dadosComplementaresBeneficiario): self.dadosComplementaresBeneficiario = dadosComplementaresBeneficiario
    def get_medicoSolicitante(self): return self.medicoSolicitante
    def set_medicoSolicitante(self, medicoSolicitante): self.medicoSolicitante = medicoSolicitante
    def get_diagnosticoOncologicoQuimioterapia(self): return self.diagnosticoOncologicoQuimioterapia
    def set_diagnosticoOncologicoQuimioterapia(self, diagnosticoOncologicoQuimioterapia): self.diagnosticoOncologicoQuimioterapia = diagnosticoOncologicoQuimioterapia
    def get_drogasSolicitadas(self): return self.drogasSolicitadas
    def set_drogasSolicitadas(self, drogasSolicitadas): self.drogasSolicitadas = drogasSolicitadas
    def get_tratamentosAnteriores(self): return self.tratamentosAnteriores
    def set_tratamentosAnteriores(self, tratamentosAnteriores): self.tratamentosAnteriores = tratamentosAnteriores
    def get_numeroCiclos(self): return self.numeroCiclos
    def set_numeroCiclos(self, numeroCiclos): self.numeroCiclos = numeroCiclos
    def get_cicloAtual(self): return self.cicloAtual
    def set_cicloAtual(self, cicloAtual): self.cicloAtual = cicloAtual
    def get_intervaloCiclos(self): return self.intervaloCiclos
    def set_intervaloCiclos(self, intervaloCiclos): self.intervaloCiclos = intervaloCiclos
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_statusSolicitacao(self, value):
        # Validate type dm_statusSolicitacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def hasContent_(self):
        if (
            self.dadosAutorizacao is not None or
            self.numeroCarteira is not None or
            self.statusSolicitacao is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.dadosComplementaresBeneficiario is not None or
            self.medicoSolicitante is not None or
            self.diagnosticoOncologicoQuimioterapia is not None or
            self.drogasSolicitadas is not None or
            self.tratamentosAnteriores is not None or
            self.numeroCiclos is not None or
            self.cicloAtual is not None or
            self.intervaloCiclos is not None or
            self.motivosNegativa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoQuimio', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_autorizacaoQuimio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_autorizacaoQuimio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_autorizacaoQuimio'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoQuimio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.statusSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusSolicitacao>%s</%sstatusSolicitacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusSolicitacao).encode(ExternalEncoding), input_name='statusSolicitacao'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.dadosComplementaresBeneficiario is not None:
            self.dadosComplementaresBeneficiario.export(outfile, level, namespace_, name_='dadosComplementaresBeneficiario', pretty_print=pretty_print)
        if self.medicoSolicitante is not None:
            self.medicoSolicitante.export(outfile, level, namespace_, name_='medicoSolicitante', pretty_print=pretty_print)
        if self.diagnosticoOncologicoQuimioterapia is not None:
            self.diagnosticoOncologicoQuimioterapia.export(outfile, level, namespace_, name_='diagnosticoOncologicoQuimioterapia', pretty_print=pretty_print)
        if self.drogasSolicitadas is not None:
            self.drogasSolicitadas.export(outfile, level, namespace_, name_='drogasSolicitadas', pretty_print=pretty_print)
        if self.tratamentosAnteriores is not None:
            self.tratamentosAnteriores.export(outfile, level, namespace_, name_='tratamentosAnteriores', pretty_print=pretty_print)
        if self.numeroCiclos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCiclos>%s</%snumeroCiclos>%s' % (namespace_, self.gds_format_integer(self.numeroCiclos, input_name='numeroCiclos'), namespace_, eol_))
        if self.cicloAtual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scicloAtual>%s</%scicloAtual>%s' % (namespace_, self.gds_format_integer(self.cicloAtual, input_name='cicloAtual'), namespace_, eol_))
        if self.intervaloCiclos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sintervaloCiclos>%s</%sintervaloCiclos>%s' % (namespace_, self.gds_format_integer(self.intervaloCiclos, input_name='intervaloCiclos'), namespace_, eol_))
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_autorizacaoQuimio'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoDados(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.statusSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('statusSolicitacao=%s,\n' % quote_python(self.statusSolicitacao).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.dadosComplementaresBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosComplementaresBeneficiario=model_.ct_dadosComplementaresBeneficiario(\n')
            self.dadosComplementaresBeneficiario.exportLiteral(outfile, level, name_='dadosComplementaresBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.medicoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('medicoSolicitante=model_.ctm_anexoSolicitante(\n')
            self.medicoSolicitante.exportLiteral(outfile, level, name_='medicoSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.diagnosticoOncologicoQuimioterapia is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoOncologicoQuimioterapia=model_.diagnosticoOncologicoQuimioterapia(\n')
            self.diagnosticoOncologicoQuimioterapia.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.drogasSolicitadas is not None:
            showIndent(outfile, level)
            outfile.write('drogasSolicitadas=model_.drogasSolicitadas(\n')
            self.drogasSolicitadas.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.tratamentosAnteriores is not None:
            showIndent(outfile, level)
            outfile.write('tratamentosAnteriores=model_.tratamentosAnteriores(\n')
            self.tratamentosAnteriores.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCiclos is not None:
            showIndent(outfile, level)
            outfile.write('numeroCiclos=%d,\n' % self.numeroCiclos)
        if self.cicloAtual is not None:
            showIndent(outfile, level)
            outfile.write('cicloAtual=%d,\n' % self.cicloAtual)
        if self.intervaloCiclos is not None:
            showIndent(outfile, level)
            outfile.write('intervaloCiclos=%d,\n' % self.intervaloCiclos)
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoDados.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'statusSolicitacao':
            statusSolicitacao_ = child_.text
            statusSolicitacao_ = self.gds_validate_string(statusSolicitacao_, node, 'statusSolicitacao')
            self.statusSolicitacao = statusSolicitacao_
            # validate type dm_statusSolicitacao
            self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'dadosComplementaresBeneficiario':
            obj_ = ct_dadosComplementaresBeneficiario.factory()
            obj_.build(child_)
            self.dadosComplementaresBeneficiario = obj_
            obj_.original_tagname_ = 'dadosComplementaresBeneficiario'
        elif nodeName_ == 'medicoSolicitante':
            obj_ = ctm_anexoSolicitante.factory()
            obj_.build(child_)
            self.medicoSolicitante = obj_
            obj_.original_tagname_ = 'medicoSolicitante'
        elif nodeName_ == 'diagnosticoOncologicoQuimioterapia':
            obj_ = diagnosticoOncologicoQuimioterapia.factory()
            obj_.build(child_)
            self.diagnosticoOncologicoQuimioterapia = obj_
            obj_.original_tagname_ = 'diagnosticoOncologicoQuimioterapia'
        elif nodeName_ == 'drogasSolicitadas':
            obj_ = drogasSolicitadas.factory()
            obj_.build(child_)
            self.drogasSolicitadas = obj_
            obj_.original_tagname_ = 'drogasSolicitadas'
        elif nodeName_ == 'tratamentosAnteriores':
            obj_ = tratamentosAnteriores.factory()
            obj_.build(child_)
            self.tratamentosAnteriores = obj_
            obj_.original_tagname_ = 'tratamentosAnteriores'
        elif nodeName_ == 'numeroCiclos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroCiclos')
            self.numeroCiclos = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.numeroCiclos)
        elif nodeName_ == 'cicloAtual':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'cicloAtual')
            self.cicloAtual = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.cicloAtual)
        elif nodeName_ == 'intervaloCiclos':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'intervaloCiclos')
            self.intervaloCiclos = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.intervaloCiclos)
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
# end class ctm_autorizacaoQuimio


class ctm_autorizacaoServico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosAutorizacao=None, dadosBeneficiario=None, prestadorAutorizado=None, statusSolicitacao=None, motivosNegativa=None, servicosAutorizados=None, observacao=None, autorizacaoQuimio=None, autorizacaoRadio=None):
        self.original_tagname_ = None
        self.dadosAutorizacao = dadosAutorizacao
        self.dadosBeneficiario = dadosBeneficiario
        self.prestadorAutorizado = prestadorAutorizado
        self.statusSolicitacao = statusSolicitacao
        self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        self.motivosNegativa = motivosNegativa
        self.servicosAutorizados = servicosAutorizados
        self.observacao = observacao
        self.validate_st_texto1000(self.observacao)
        self.autorizacaoQuimio = autorizacaoQuimio
        self.autorizacaoRadio = autorizacaoRadio
    def factory(*args_, **kwargs_):
        if ctm_autorizacaoServico.subclass:
            return ctm_autorizacaoServico.subclass(*args_, **kwargs_)
        else:
            return ctm_autorizacaoServico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_prestadorAutorizado(self): return self.prestadorAutorizado
    def set_prestadorAutorizado(self, prestadorAutorizado): self.prestadorAutorizado = prestadorAutorizado
    def get_statusSolicitacao(self): return self.statusSolicitacao
    def set_statusSolicitacao(self, statusSolicitacao): self.statusSolicitacao = statusSolicitacao
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def get_servicosAutorizados(self): return self.servicosAutorizados
    def set_servicosAutorizados(self, servicosAutorizados): self.servicosAutorizados = servicosAutorizados
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_autorizacaoQuimio(self): return self.autorizacaoQuimio
    def set_autorizacaoQuimio(self, autorizacaoQuimio): self.autorizacaoQuimio = autorizacaoQuimio
    def get_autorizacaoRadio(self): return self.autorizacaoRadio
    def set_autorizacaoRadio(self, autorizacaoRadio): self.autorizacaoRadio = autorizacaoRadio
    def validate_dm_statusSolicitacao(self, value):
        # Validate type dm_statusSolicitacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto1000(self, value):
        # Validate type st_texto1000, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosAutorizacao is not None or
            self.dadosBeneficiario is not None or
            self.prestadorAutorizado is not None or
            self.statusSolicitacao is not None or
            self.motivosNegativa is not None or
            self.servicosAutorizados is not None or
            self.observacao is not None or
            self.autorizacaoQuimio is not None or
            self.autorizacaoRadio is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoServico', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_autorizacaoServico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_autorizacaoServico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_autorizacaoServico'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_autorizacaoServico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.prestadorAutorizado is not None:
            self.prestadorAutorizado.export(outfile, level, namespace_, name_='prestadorAutorizado', pretty_print=pretty_print)
        if self.statusSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusSolicitacao>%s</%sstatusSolicitacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusSolicitacao).encode(ExternalEncoding), input_name='statusSolicitacao'), namespace_, eol_))
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
        if self.servicosAutorizados is not None:
            self.servicosAutorizados.export(outfile, level, namespace_, name_='servicosAutorizados', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.autorizacaoQuimio is not None:
            self.autorizacaoQuimio.export(outfile, level, namespace_, name_='autorizacaoQuimio', pretty_print=pretty_print)
        if self.autorizacaoRadio is not None:
            self.autorizacaoRadio.export(outfile, level, namespace_, name_='autorizacaoRadio', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_autorizacaoServico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoDados(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.prestadorAutorizado is not None:
            showIndent(outfile, level)
            outfile.write('prestadorAutorizado=model_.prestadorAutorizado(\n')
            self.prestadorAutorizado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.statusSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('statusSolicitacao=%s,\n' % quote_python(self.statusSolicitacao).encode(ExternalEncoding))
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.servicosAutorizados is not None:
            showIndent(outfile, level)
            outfile.write('servicosAutorizados=model_.servicosAutorizados(\n')
            self.servicosAutorizados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.autorizacaoQuimio is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoQuimio=model_.ctm_autorizacaoQuimio(\n')
            self.autorizacaoQuimio.exportLiteral(outfile, level, name_='autorizacaoQuimio')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.autorizacaoRadio is not None:
            showIndent(outfile, level)
            outfile.write('autorizacaoRadio=model_.ctm_autorizacaoRadio(\n')
            self.autorizacaoRadio.exportLiteral(outfile, level, name_='autorizacaoRadio')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoDados.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'prestadorAutorizado':
            obj_ = prestadorAutorizado.factory()
            obj_.build(child_)
            self.prestadorAutorizado = obj_
            obj_.original_tagname_ = 'prestadorAutorizado'
        elif nodeName_ == 'statusSolicitacao':
            statusSolicitacao_ = child_.text
            statusSolicitacao_ = self.gds_validate_string(statusSolicitacao_, node, 'statusSolicitacao')
            self.statusSolicitacao = statusSolicitacao_
            # validate type dm_statusSolicitacao
            self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
        elif nodeName_ == 'servicosAutorizados':
            obj_ = servicosAutorizados.factory()
            obj_.build(child_)
            self.servicosAutorizados = obj_
            obj_.original_tagname_ = 'servicosAutorizados'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto1000
            self.validate_st_texto1000(self.observacao)
        elif nodeName_ == 'autorizacaoQuimio':
            obj_ = ctm_autorizacaoQuimio.factory()
            obj_.build(child_)
            self.autorizacaoQuimio = obj_
            obj_.original_tagname_ = 'autorizacaoQuimio'
        elif nodeName_ == 'autorizacaoRadio':
            obj_ = ctm_autorizacaoRadio.factory()
            obj_.build(child_)
            self.autorizacaoRadio = obj_
            obj_.original_tagname_ = 'autorizacaoRadio'
# end class ctm_autorizacaoServico


class prestadorAutorizado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosContratado=None, cnesContratado=None):
        self.original_tagname_ = None
        self.dadosContratado = dadosContratado
        self.cnesContratado = cnesContratado
        self.validate_st_texto7(self.cnesContratado)
    def factory(*args_, **kwargs_):
        if prestadorAutorizado.subclass:
            return prestadorAutorizado.subclass(*args_, **kwargs_)
        else:
            return prestadorAutorizado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_cnesContratado(self): return self.cnesContratado
    def set_cnesContratado(self, cnesContratado): self.cnesContratado = cnesContratado
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosContratado is not None or
            self.cnesContratado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='prestadorAutorizado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='prestadorAutorizado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='prestadorAutorizado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='prestadorAutorizado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='prestadorAutorizado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.cnesContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnesContratado>%s</%scnesContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnesContratado).encode(ExternalEncoding), input_name='cnesContratado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='prestadorAutorizado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.ct_contratadoDados(\n')
            self.dadosContratado.exportLiteral(outfile, level, name_='dadosContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.cnesContratado is not None:
            showIndent(outfile, level)
            outfile.write('cnesContratado=%s,\n' % quote_python(self.cnesContratado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosContratado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'cnesContratado':
            cnesContratado_ = child_.text
            cnesContratado_ = self.gds_validate_string(cnesContratado_, node, 'cnesContratado')
            self.cnesContratado = cnesContratado_
            # validate type st_texto7
            self.validate_st_texto7(self.cnesContratado)
# end class prestadorAutorizado


class servicosAutorizados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, servicoAutorizado=None):
        self.original_tagname_ = None
        if servicoAutorizado is None:
            self.servicoAutorizado = []
        else:
            self.servicoAutorizado = servicoAutorizado
    def factory(*args_, **kwargs_):
        if servicosAutorizados.subclass:
            return servicosAutorizados.subclass(*args_, **kwargs_)
        else:
            return servicosAutorizados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_servicoAutorizado(self): return self.servicoAutorizado
    def set_servicoAutorizado(self, servicoAutorizado): self.servicoAutorizado = servicoAutorizado
    def add_servicoAutorizado(self, value): self.servicoAutorizado.append(value)
    def insert_servicoAutorizado_at(self, index, value): self.servicoAutorizado.insert(index, value)
    def replace_servicoAutorizado_at(self, index, value): self.servicoAutorizado[index] = value
    def hasContent_(self):
        if (
            self.servicoAutorizado
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='servicosAutorizados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='servicosAutorizados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='servicosAutorizados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='servicosAutorizados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='servicosAutorizados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for servicoAutorizado_ in self.servicoAutorizado:
            servicoAutorizado_.export(outfile, level, namespace_, name_='servicoAutorizado', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='servicosAutorizados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('servicoAutorizado=[\n')
        level += 1
        for servicoAutorizado_ in self.servicoAutorizado:
            showIndent(outfile, level)
            outfile.write('model_.ct_procedimentoAutorizado(\n')
            servicoAutorizado_.exportLiteral(outfile, level, name_='ct_procedimentoAutorizado')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'servicoAutorizado':
            class_obj_ = self.get_class_obj_(child_, ct_procedimentoAutorizado)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.servicoAutorizado.append(obj_)
            obj_.original_tagname_ = 'servicoAutorizado'
# end class servicosAutorizados


class ctm_beneficiarioComunicacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosBeneficiario=None, dataEvento=None, tipoEvento=None, dadosInternacao=None):
        self.original_tagname_ = None
        self.dadosBeneficiario = dadosBeneficiario
        if isinstance(dataEvento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEvento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEvento
        self.dataEvento = initvalue_
        self.tipoEvento = tipoEvento
        self.validate_dm_tipoEvento(self.tipoEvento)
        self.dadosInternacao = dadosInternacao
    def factory(*args_, **kwargs_):
        if ctm_beneficiarioComunicacao.subclass:
            return ctm_beneficiarioComunicacao.subclass(*args_, **kwargs_)
        else:
            return ctm_beneficiarioComunicacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dataEvento(self): return self.dataEvento
    def set_dataEvento(self, dataEvento): self.dataEvento = dataEvento
    def get_tipoEvento(self): return self.tipoEvento
    def set_tipoEvento(self, tipoEvento): self.tipoEvento = tipoEvento
    def get_dadosInternacao(self): return self.dadosInternacao
    def set_dadosInternacao(self, dadosInternacao): self.dadosInternacao = dadosInternacao
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tipoEvento(self, value):
        # Validate type dm_tipoEvento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['I', 'A']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoEvento' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosBeneficiario is not None or
            self.dataEvento is not None or
            self.tipoEvento is not None or
            self.dadosInternacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_beneficiarioComunicacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_beneficiarioComunicacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_beneficiarioComunicacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_beneficiarioComunicacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_beneficiarioComunicacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dataEvento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEvento>%s</%sdataEvento>%s' % (namespace_, self.gds_format_date(self.dataEvento, input_name='dataEvento'), namespace_, eol_))
        if self.tipoEvento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoEvento>%s</%stipoEvento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoEvento).encode(ExternalEncoding), input_name='tipoEvento'), namespace_, eol_))
        if self.dadosInternacao is not None:
            self.dadosInternacao.export(outfile, level, namespace_, name_='dadosInternacao', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_beneficiarioComunicacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dataEvento is not None:
            showIndent(outfile, level)
            outfile.write('dataEvento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEvento, input_name='dataEvento'))
        if self.tipoEvento is not None:
            showIndent(outfile, level)
            outfile.write('tipoEvento=%s,\n' % quote_python(self.tipoEvento).encode(ExternalEncoding))
        if self.dadosInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosInternacao=model_.dadosInternacao(\n')
            self.dadosInternacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dataEvento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEvento = dval_
            # validate type st_data
            self.validate_st_data(self.dataEvento)
        elif nodeName_ == 'tipoEvento':
            tipoEvento_ = child_.text
            tipoEvento_ = self.gds_validate_string(tipoEvento_, node, 'tipoEvento')
            self.tipoEvento = tipoEvento_
            # validate type dm_tipoEvento
            self.validate_dm_tipoEvento(self.tipoEvento)
        elif nodeName_ == 'dadosInternacao':
            obj_ = dadosInternacao.factory()
            obj_.build(child_)
            self.dadosInternacao = obj_
            obj_.original_tagname_ = 'dadosInternacao'
# end class ctm_beneficiarioComunicacao


class dadosInternacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, motivoEncerramento=None, tipoInternacao=None):
        self.original_tagname_ = None
        self.motivoEncerramento = motivoEncerramento
        self.validate_dm_motivoSaida(self.motivoEncerramento)
        self.tipoInternacao = tipoInternacao
        self.validate_dm_tipoInternacao(self.tipoInternacao)
    def factory(*args_, **kwargs_):
        if dadosInternacao.subclass:
            return dadosInternacao.subclass(*args_, **kwargs_)
        else:
            return dadosInternacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_motivoEncerramento(self): return self.motivoEncerramento
    def set_motivoEncerramento(self, motivoEncerramento): self.motivoEncerramento = motivoEncerramento
    def get_tipoInternacao(self): return self.tipoInternacao
    def set_tipoInternacao(self, tipoInternacao): self.tipoInternacao = tipoInternacao
    def validate_dm_motivoSaida(self, value):
        # Validate type dm_motivoSaida, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '14', '15', '16', '18', '19', '21', '22', '23', '24', '25', '26', '27', '28', '31', '32', '41', '42', '43', '51', '61', '62', '63', '64', '65', '66', '67']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_motivoSaida' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoInternacao(self, value):
        # Validate type dm_tipoInternacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoInternacao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.motivoEncerramento is not None or
            self.tipoInternacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosInternacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosInternacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosInternacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosInternacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosInternacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.motivoEncerramento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smotivoEncerramento>%s</%smotivoEncerramento>%s' % (namespace_, self.gds_format_string(quote_xml(self.motivoEncerramento).encode(ExternalEncoding), input_name='motivoEncerramento'), namespace_, eol_))
        if self.tipoInternacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoInternacao>%s</%stipoInternacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoInternacao).encode(ExternalEncoding), input_name='tipoInternacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosInternacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.motivoEncerramento is not None:
            showIndent(outfile, level)
            outfile.write('motivoEncerramento=%s,\n' % quote_python(self.motivoEncerramento).encode(ExternalEncoding))
        if self.tipoInternacao is not None:
            showIndent(outfile, level)
            outfile.write('tipoInternacao=%s,\n' % quote_python(self.tipoInternacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'motivoEncerramento':
            motivoEncerramento_ = child_.text
            motivoEncerramento_ = self.gds_validate_string(motivoEncerramento_, node, 'motivoEncerramento')
            self.motivoEncerramento = motivoEncerramento_
            # validate type dm_motivoSaida
            self.validate_dm_motivoSaida(self.motivoEncerramento)
        elif nodeName_ == 'tipoInternacao':
            tipoInternacao_ = child_.text
            tipoInternacao_ = self.gds_validate_string(tipoInternacao_, node, 'tipoInternacao')
            self.tipoInternacao = tipoInternacao_
            # validate type dm_tipoInternacao
            self.validate_dm_tipoInternacao(self.tipoInternacao)
# end class dadosInternacao


class ctm_beneficiarioComunicacaoRecibo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusComunicacao=None, beneficiarioComunicacao=None, mensagemErro=None):
        self.original_tagname_ = None
        self.statusComunicacao = statusComunicacao
        self.validate_dm_simNao(self.statusComunicacao)
        self.beneficiarioComunicacao = beneficiarioComunicacao
        self.mensagemErro = mensagemErro
    def factory(*args_, **kwargs_):
        if ctm_beneficiarioComunicacaoRecibo.subclass:
            return ctm_beneficiarioComunicacaoRecibo.subclass(*args_, **kwargs_)
        else:
            return ctm_beneficiarioComunicacaoRecibo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_statusComunicacao(self): return self.statusComunicacao
    def set_statusComunicacao(self, statusComunicacao): self.statusComunicacao = statusComunicacao
    def get_beneficiarioComunicacao(self): return self.beneficiarioComunicacao
    def set_beneficiarioComunicacao(self, beneficiarioComunicacao): self.beneficiarioComunicacao = beneficiarioComunicacao
    def get_mensagemErro(self): return self.mensagemErro
    def set_mensagemErro(self, mensagemErro): self.mensagemErro = mensagemErro
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.statusComunicacao is not None or
            self.beneficiarioComunicacao is not None or
            self.mensagemErro is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_beneficiarioComunicacaoRecibo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_beneficiarioComunicacaoRecibo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_beneficiarioComunicacaoRecibo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_beneficiarioComunicacaoRecibo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_beneficiarioComunicacaoRecibo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.statusComunicacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusComunicacao>%s</%sstatusComunicacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusComunicacao).encode(ExternalEncoding), input_name='statusComunicacao'), namespace_, eol_))
        if self.beneficiarioComunicacao is not None:
            self.beneficiarioComunicacao.export(outfile, level, namespace_, name_='beneficiarioComunicacao', pretty_print=pretty_print)
        if self.mensagemErro is not None:
            self.mensagemErro.export(outfile, level, namespace_, name_='mensagemErro', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_beneficiarioComunicacaoRecibo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.statusComunicacao is not None:
            showIndent(outfile, level)
            outfile.write('statusComunicacao=%s,\n' % quote_python(self.statusComunicacao).encode(ExternalEncoding))
        if self.beneficiarioComunicacao is not None:
            showIndent(outfile, level)
            outfile.write('beneficiarioComunicacao=model_.ctm_beneficiarioComunicacao(\n')
            self.beneficiarioComunicacao.exportLiteral(outfile, level, name_='beneficiarioComunicacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.mensagemErro is not None:
            showIndent(outfile, level)
            outfile.write('mensagemErro=model_.ct_motivoGlosa(\n')
            self.mensagemErro.exportLiteral(outfile, level, name_='mensagemErro')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'statusComunicacao':
            statusComunicacao_ = child_.text
            statusComunicacao_ = self.gds_validate_string(statusComunicacao_, node, 'statusComunicacao')
            self.statusComunicacao = statusComunicacao_
            # validate type dm_simNao
            self.validate_dm_simNao(self.statusComunicacao)
        elif nodeName_ == 'beneficiarioComunicacao':
            obj_ = ctm_beneficiarioComunicacao.factory()
            obj_.build(child_)
            self.beneficiarioComunicacao = obj_
            obj_.original_tagname_ = 'beneficiarioComunicacao'
        elif nodeName_ == 'mensagemErro':
            obj_ = ct_motivoGlosa.factory()
            obj_.build(child_)
            self.mensagemErro = obj_
            obj_.original_tagname_ = 'mensagemErro'
# end class ctm_beneficiarioComunicacaoRecibo


class ctm_consultaAtendimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataAtendimento=None, tipoConsulta=None, procedimento=None):
        self.original_tagname_ = None
        if isinstance(dataAtendimento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataAtendimento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataAtendimento
        self.dataAtendimento = initvalue_
        self.tipoConsulta = tipoConsulta
        self.validate_dm_tipoConsulta(self.tipoConsulta)
        self.procedimento = procedimento
    def factory(*args_, **kwargs_):
        if ctm_consultaAtendimento.subclass:
            return ctm_consultaAtendimento.subclass(*args_, **kwargs_)
        else:
            return ctm_consultaAtendimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataAtendimento(self): return self.dataAtendimento
    def set_dataAtendimento(self, dataAtendimento): self.dataAtendimento = dataAtendimento
    def get_tipoConsulta(self): return self.tipoConsulta
    def set_tipoConsulta(self, tipoConsulta): self.tipoConsulta = tipoConsulta
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tipoConsulta(self, value):
        # Validate type dm_tipoConsulta, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoConsulta' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataAtendimento is not None or
            self.tipoConsulta is not None or
            self.procedimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_consultaAtendimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_consultaAtendimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_consultaAtendimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_consultaAtendimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_consultaAtendimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataAtendimento>%s</%sdataAtendimento>%s' % (namespace_, self.gds_format_date(self.dataAtendimento, input_name='dataAtendimento'), namespace_, eol_))
        if self.tipoConsulta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoConsulta>%s</%stipoConsulta>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoConsulta).encode(ExternalEncoding), input_name='tipoConsulta'), namespace_, eol_))
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_consultaAtendimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('dataAtendimento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataAtendimento, input_name='dataAtendimento'))
        if self.tipoConsulta is not None:
            showIndent(outfile, level)
            outfile.write('tipoConsulta=%s,\n' % quote_python(self.tipoConsulta).encode(ExternalEncoding))
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.procedimento(\n')
            self.procedimento.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataAtendimento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataAtendimento = dval_
            # validate type st_data
            self.validate_st_data(self.dataAtendimento)
        elif nodeName_ == 'tipoConsulta':
            tipoConsulta_ = child_.text
            tipoConsulta_ = self.gds_validate_string(tipoConsulta_, node, 'tipoConsulta')
            self.tipoConsulta = tipoConsulta_
            # validate type dm_tipoConsulta
            self.validate_dm_tipoConsulta(self.tipoConsulta)
        elif nodeName_ == 'procedimento':
            obj_ = procedimento.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
# end class ctm_consultaAtendimento


class procedimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoTabela=None, codigoProcedimento=None, valorProcedimento=None):
        self.original_tagname_ = None
        self.codigoTabela = codigoTabela
        self.validate_dm_tabela(self.codigoTabela)
        self.codigoProcedimento = codigoProcedimento
        self.validate_st_texto10(self.codigoProcedimento)
        self.valorProcedimento = valorProcedimento
    def factory(*args_, **kwargs_):
        if procedimento.subclass:
            return procedimento.subclass(*args_, **kwargs_)
        else:
            return procedimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoTabela(self): return self.codigoTabela
    def set_codigoTabela(self, codigoTabela): self.codigoTabela = codigoTabela
    def get_codigoProcedimento(self): return self.codigoProcedimento
    def set_codigoProcedimento(self, codigoProcedimento): self.codigoProcedimento = codigoProcedimento
    def get_valorProcedimento(self): return self.valorProcedimento
    def set_valorProcedimento(self, valorProcedimento): self.valorProcedimento = valorProcedimento
    def validate_dm_tabela(self, value):
        # Validate type dm_tabela, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['18', '19', '20', '22', '90', '98', '00']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tabela' % {"value" : value.encode("utf-8")} )
    def validate_st_texto10(self, value):
        # Validate type st_texto10, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto10' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto10' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoTabela is not None or
            self.codigoProcedimento is not None or
            self.valorProcedimento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoTabela is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoTabela>%s</%scodigoTabela>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoTabela).encode(ExternalEncoding), input_name='codigoTabela'), namespace_, eol_))
        if self.codigoProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoProcedimento>%s</%scodigoProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoProcedimento).encode(ExternalEncoding), input_name='codigoProcedimento'), namespace_, eol_))
        if self.valorProcedimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcedimento>%s</%svalorProcedimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcedimento).encode(ExternalEncoding), input_name='valorProcedimento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='procedimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoTabela is not None:
            showIndent(outfile, level)
            outfile.write('codigoTabela=%s,\n' % quote_python(self.codigoTabela).encode(ExternalEncoding))
        if self.codigoProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('codigoProcedimento=%s,\n' % quote_python(self.codigoProcedimento).encode(ExternalEncoding))
        if self.valorProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('valorProcedimento=%s,\n' % quote_python(self.valorProcedimento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoTabela':
            codigoTabela_ = child_.text
            codigoTabela_ = self.gds_validate_string(codigoTabela_, node, 'codigoTabela')
            self.codigoTabela = codigoTabela_
            # validate type dm_tabela
            self.validate_dm_tabela(self.codigoTabela)
        elif nodeName_ == 'codigoProcedimento':
            codigoProcedimento_ = child_.text
            codigoProcedimento_ = self.gds_validate_string(codigoProcedimento_, node, 'codigoProcedimento')
            self.codigoProcedimento = codigoProcedimento_
            # validate type st_texto10
            self.validate_st_texto10(self.codigoProcedimento)
        elif nodeName_ == 'valorProcedimento':
            valorProcedimento_ = child_.text
            valorProcedimento_ = self.gds_validate_string(valorProcedimento_, node, 'valorProcedimento')
            self.valorProcedimento = valorProcedimento_
# end class procedimento


class ctm_consultaGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoConsulta=None, numeroGuiaOperadora=None, dadosBeneficiario=None, contratadoExecutante=None, profissionalExecutante=None, indicacaoAcidente=None, dadosAtendimento=None, observacao=None, assinaturaDigitalGuia=None):
        self.original_tagname_ = None
        self.cabecalhoConsulta = cabecalhoConsulta
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.dadosBeneficiario = dadosBeneficiario
        self.contratadoExecutante = contratadoExecutante
        self.profissionalExecutante = profissionalExecutante
        self.indicacaoAcidente = indicacaoAcidente
        self.validate_dm_indicadorAcidente(self.indicacaoAcidente)
        self.dadosAtendimento = dadosAtendimento
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def factory(*args_, **kwargs_):
        if ctm_consultaGuia.subclass:
            return ctm_consultaGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_consultaGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoConsulta(self): return self.cabecalhoConsulta
    def set_cabecalhoConsulta(self, cabecalhoConsulta): self.cabecalhoConsulta = cabecalhoConsulta
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_contratadoExecutante(self): return self.contratadoExecutante
    def set_contratadoExecutante(self, contratadoExecutante): self.contratadoExecutante = contratadoExecutante
    def get_profissionalExecutante(self): return self.profissionalExecutante
    def set_profissionalExecutante(self, profissionalExecutante): self.profissionalExecutante = profissionalExecutante
    def get_indicacaoAcidente(self): return self.indicacaoAcidente
    def set_indicacaoAcidente(self, indicacaoAcidente): self.indicacaoAcidente = indicacaoAcidente
    def get_dadosAtendimento(self): return self.dadosAtendimento
    def set_dadosAtendimento(self, dadosAtendimento): self.dadosAtendimento = dadosAtendimento
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_assinaturaDigitalGuia(self): return self.assinaturaDigitalGuia
    def set_assinaturaDigitalGuia(self, assinaturaDigitalGuia): self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_indicadorAcidente(self, value):
        # Validate type dm_indicadorAcidente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '9']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_indicadorAcidente' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoConsulta is not None or
            self.numeroGuiaOperadora is not None or
            self.dadosBeneficiario is not None or
            self.contratadoExecutante is not None or
            self.profissionalExecutante is not None or
            self.indicacaoAcidente is not None or
            self.dadosAtendimento is not None or
            self.observacao is not None or
            self.assinaturaDigitalGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_consultaGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_consultaGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_consultaGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_consultaGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_consultaGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoConsulta is not None:
            self.cabecalhoConsulta.export(outfile, level, namespace_, name_='cabecalhoConsulta', pretty_print=pretty_print)
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.contratadoExecutante is not None:
            self.contratadoExecutante.export(outfile, level, namespace_, name_='contratadoExecutante', pretty_print=pretty_print)
        if self.profissionalExecutante is not None:
            self.profissionalExecutante.export(outfile, level, namespace_, name_='profissionalExecutante', pretty_print=pretty_print)
        if self.indicacaoAcidente is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicacaoAcidente>%s</%sindicacaoAcidente>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicacaoAcidente).encode(ExternalEncoding), input_name='indicacaoAcidente'), namespace_, eol_))
        if self.dadosAtendimento is not None:
            self.dadosAtendimento.export(outfile, level, namespace_, name_='dadosAtendimento', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.assinaturaDigitalGuia is not None:
            self.assinaturaDigitalGuia.export(outfile, level, namespace_, name_='assinaturaDigitalGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_consultaGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoConsulta is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoConsulta=model_.ct_guiaCabecalho(\n')
            self.cabecalhoConsulta.exportLiteral(outfile, level, name_='cabecalhoConsulta')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.contratadoExecutante is not None:
            showIndent(outfile, level)
            outfile.write('contratadoExecutante=model_.contratadoExecutante(\n')
            self.contratadoExecutante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.profissionalExecutante is not None:
            showIndent(outfile, level)
            outfile.write('profissionalExecutante=model_.ct_contratadoProfissionalDados(\n')
            self.profissionalExecutante.exportLiteral(outfile, level, name_='profissionalExecutante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.indicacaoAcidente is not None:
            showIndent(outfile, level)
            outfile.write('indicacaoAcidente=%s,\n' % quote_python(self.indicacaoAcidente).encode(ExternalEncoding))
        if self.dadosAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('dadosAtendimento=model_.ctm_consultaAtendimento(\n')
            self.dadosAtendimento.exportLiteral(outfile, level, name_='dadosAtendimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.assinaturaDigitalGuia is not None:
            showIndent(outfile, level)
            outfile.write('assinaturaDigitalGuia=model_.assinaturaDigital(\n')
            self.assinaturaDigitalGuia.exportLiteral(outfile, level, name_='assinaturaDigitalGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoConsulta':
            class_obj_ = self.get_class_obj_(child_, ct_guiaCabecalho)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.cabecalhoConsulta = obj_
            obj_.original_tagname_ = 'cabecalhoConsulta'
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'contratadoExecutante':
            obj_ = contratadoExecutante.factory()
            obj_.build(child_)
            self.contratadoExecutante = obj_
            obj_.original_tagname_ = 'contratadoExecutante'
        elif nodeName_ == 'profissionalExecutante':
            obj_ = ct_contratadoProfissionalDados.factory()
            obj_.build(child_)
            self.profissionalExecutante = obj_
            obj_.original_tagname_ = 'profissionalExecutante'
        elif nodeName_ == 'indicacaoAcidente':
            indicacaoAcidente_ = child_.text
            indicacaoAcidente_ = self.gds_validate_string(indicacaoAcidente_, node, 'indicacaoAcidente')
            self.indicacaoAcidente = indicacaoAcidente_
            # validate type dm_indicadorAcidente
            self.validate_dm_indicadorAcidente(self.indicacaoAcidente)
        elif nodeName_ == 'dadosAtendimento':
            obj_ = ctm_consultaAtendimento.factory()
            obj_.build(child_)
            self.dadosAtendimento = obj_
            obj_.original_tagname_ = 'dadosAtendimento'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'assinaturaDigitalGuia':
            obj_ = assinaturaDigital.factory()
            obj_.build(child_)
            self.assinaturaDigitalGuia = obj_
            obj_.original_tagname_ = 'assinaturaDigitalGuia'
# end class ctm_consultaGuia


class contratadoExecutante(ct_contratadoDados):
    subclass = None
    superclass = ct_contratadoDados
    def __init__(self, codigoPrestadorNaOperadora=None, cpfContratado=None, cnpjContratado=None, nomeContratado=None, CNES=None):
        self.original_tagname_ = None
        super(contratadoExecutante, self).__init__(codigoPrestadorNaOperadora, cpfContratado, cnpjContratado, nomeContratado, )
        self.CNES = CNES
        self.validate_st_texto7(self.CNES)
    def factory(*args_, **kwargs_):
        if contratadoExecutante.subclass:
            return contratadoExecutante.subclass(*args_, **kwargs_)
        else:
            return contratadoExecutante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CNES(self): return self.CNES
    def set_CNES(self, CNES): self.CNES = CNES
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CNES is not None or
            super(contratadoExecutante, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='contratadoExecutante', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='contratadoExecutante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='contratadoExecutante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='contratadoExecutante'):
        super(contratadoExecutante, self).exportAttributes(outfile, level, already_processed, namespace_, name_='contratadoExecutante')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='contratadoExecutante', fromsubclass_=False, pretty_print=True):
        super(contratadoExecutante, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CNES is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNES>%s</%sCNES>%s' % (namespace_, self.gds_format_string(quote_xml(self.CNES).encode(ExternalEncoding), input_name='CNES'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='contratadoExecutante'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(contratadoExecutante, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(contratadoExecutante, self).exportLiteralChildren(outfile, level, name_)
        if self.CNES is not None:
            showIndent(outfile, level)
            outfile.write('CNES=%s,\n' % quote_python(self.CNES).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(contratadoExecutante, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CNES':
            CNES_ = child_.text
            CNES_ = self.gds_validate_string(CNES_, node, 'CNES')
            self.CNES = CNES_
            # validate type st_texto7
            self.validate_st_texto7(self.CNES)
        super(contratadoExecutante, self).buildChildren(child_, node, nodeName_, True)
# end class contratadoExecutante


class ctm_demonstrativoAnaliseConta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoDemonstrativo=None, dadosPrestador=None, dadosConta=None, valorInformadoGeral=None, valorProcessadoGeral=None, valorLiberadoGeral=None, valorGlosaGeral=None):
        self.original_tagname_ = None
        self.cabecalhoDemonstrativo = cabecalhoDemonstrativo
        self.dadosPrestador = dadosPrestador
        self.dadosConta = dadosConta
        self.valorInformadoGeral = valorInformadoGeral
        self.valorProcessadoGeral = valorProcessadoGeral
        self.valorLiberadoGeral = valorLiberadoGeral
        self.valorGlosaGeral = valorGlosaGeral
    def factory(*args_, **kwargs_):
        if ctm_demonstrativoAnaliseConta.subclass:
            return ctm_demonstrativoAnaliseConta.subclass(*args_, **kwargs_)
        else:
            return ctm_demonstrativoAnaliseConta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoDemonstrativo(self): return self.cabecalhoDemonstrativo
    def set_cabecalhoDemonstrativo(self, cabecalhoDemonstrativo): self.cabecalhoDemonstrativo = cabecalhoDemonstrativo
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_dadosConta(self): return self.dadosConta
    def set_dadosConta(self, dadosConta): self.dadosConta = dadosConta
    def get_valorInformadoGeral(self): return self.valorInformadoGeral
    def set_valorInformadoGeral(self, valorInformadoGeral): self.valorInformadoGeral = valorInformadoGeral
    def get_valorProcessadoGeral(self): return self.valorProcessadoGeral
    def set_valorProcessadoGeral(self, valorProcessadoGeral): self.valorProcessadoGeral = valorProcessadoGeral
    def get_valorLiberadoGeral(self): return self.valorLiberadoGeral
    def set_valorLiberadoGeral(self, valorLiberadoGeral): self.valorLiberadoGeral = valorLiberadoGeral
    def get_valorGlosaGeral(self): return self.valorGlosaGeral
    def set_valorGlosaGeral(self, valorGlosaGeral): self.valorGlosaGeral = valorGlosaGeral
    def hasContent_(self):
        if (
            self.cabecalhoDemonstrativo is not None or
            self.dadosPrestador is not None or
            self.dadosConta is not None or
            self.valorInformadoGeral is not None or
            self.valorProcessadoGeral is not None or
            self.valorLiberadoGeral is not None or
            self.valorGlosaGeral is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_demonstrativoAnaliseConta', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_demonstrativoAnaliseConta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_demonstrativoAnaliseConta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_demonstrativoAnaliseConta'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_demonstrativoAnaliseConta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoDemonstrativo is not None:
            self.cabecalhoDemonstrativo.export(outfile, level, namespace_, name_='cabecalhoDemonstrativo', pretty_print=pretty_print)
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        if self.dadosConta is not None:
            self.dadosConta.export(outfile, level, namespace_, name_='dadosConta', pretty_print=pretty_print)
        if self.valorInformadoGeral is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformadoGeral>%s</%svalorInformadoGeral>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformadoGeral).encode(ExternalEncoding), input_name='valorInformadoGeral'), namespace_, eol_))
        if self.valorProcessadoGeral is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessadoGeral>%s</%svalorProcessadoGeral>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessadoGeral).encode(ExternalEncoding), input_name='valorProcessadoGeral'), namespace_, eol_))
        if self.valorLiberadoGeral is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberadoGeral>%s</%svalorLiberadoGeral>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberadoGeral).encode(ExternalEncoding), input_name='valorLiberadoGeral'), namespace_, eol_))
        if self.valorGlosaGeral is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosaGeral>%s</%svalorGlosaGeral>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosaGeral).encode(ExternalEncoding), input_name='valorGlosaGeral'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_demonstrativoAnaliseConta'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoDemonstrativo=model_.ct_demonstrativoCabecalho(\n')
            self.cabecalhoDemonstrativo.exportLiteral(outfile, level, name_='cabecalhoDemonstrativo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.dadosPrestador(\n')
            self.dadosPrestador.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosConta is not None:
            showIndent(outfile, level)
            outfile.write('dadosConta=model_.dadosConta(\n')
            self.dadosConta.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.valorInformadoGeral is not None:
            showIndent(outfile, level)
            outfile.write('valorInformadoGeral=%s,\n' % quote_python(self.valorInformadoGeral).encode(ExternalEncoding))
        if self.valorProcessadoGeral is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessadoGeral=%s,\n' % quote_python(self.valorProcessadoGeral).encode(ExternalEncoding))
        if self.valorLiberadoGeral is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberadoGeral=%s,\n' % quote_python(self.valorLiberadoGeral).encode(ExternalEncoding))
        if self.valorGlosaGeral is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosaGeral=%s,\n' % quote_python(self.valorGlosaGeral).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoDemonstrativo':
            obj_ = ct_demonstrativoCabecalho.factory()
            obj_.build(child_)
            self.cabecalhoDemonstrativo = obj_
            obj_.original_tagname_ = 'cabecalhoDemonstrativo'
        elif nodeName_ == 'dadosPrestador':
            obj_ = dadosPrestador.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'dadosConta':
            obj_ = dadosConta.factory()
            obj_.build(child_)
            self.dadosConta = obj_
            obj_.original_tagname_ = 'dadosConta'
        elif nodeName_ == 'valorInformadoGeral':
            valorInformadoGeral_ = child_.text
            valorInformadoGeral_ = self.gds_validate_string(valorInformadoGeral_, node, 'valorInformadoGeral')
            self.valorInformadoGeral = valorInformadoGeral_
        elif nodeName_ == 'valorProcessadoGeral':
            valorProcessadoGeral_ = child_.text
            valorProcessadoGeral_ = self.gds_validate_string(valorProcessadoGeral_, node, 'valorProcessadoGeral')
            self.valorProcessadoGeral = valorProcessadoGeral_
        elif nodeName_ == 'valorLiberadoGeral':
            valorLiberadoGeral_ = child_.text
            valorLiberadoGeral_ = self.gds_validate_string(valorLiberadoGeral_, node, 'valorLiberadoGeral')
            self.valorLiberadoGeral = valorLiberadoGeral_
        elif nodeName_ == 'valorGlosaGeral':
            valorGlosaGeral_ = child_.text
            valorGlosaGeral_ = self.gds_validate_string(valorGlosaGeral_, node, 'valorGlosaGeral')
            self.valorGlosaGeral = valorGlosaGeral_
# end class ctm_demonstrativoAnaliseConta


class dadosPrestador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosContratado=None, CNES=None):
        self.original_tagname_ = None
        self.dadosContratado = dadosContratado
        self.CNES = CNES
        self.validate_st_texto7(self.CNES)
    def factory(*args_, **kwargs_):
        if dadosPrestador.subclass:
            return dadosPrestador.subclass(*args_, **kwargs_)
        else:
            return dadosPrestador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_CNES(self): return self.CNES
    def set_CNES(self, CNES): self.CNES = CNES
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosContratado is not None or
            self.CNES is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosPrestador', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosPrestador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosPrestador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosPrestador'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosPrestador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.CNES is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNES>%s</%sCNES>%s' % (namespace_, self.gds_format_string(quote_xml(self.CNES).encode(ExternalEncoding), input_name='CNES'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosPrestador'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.ct_contratadoDados(\n')
            self.dadosContratado.exportLiteral(outfile, level, name_='dadosContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CNES is not None:
            showIndent(outfile, level)
            outfile.write('CNES=%s,\n' % quote_python(self.CNES).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosContratado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'CNES':
            CNES_ = child_.text
            CNES_ = self.gds_validate_string(CNES_, node, 'CNES')
            self.CNES = CNES_
            # validate type st_texto7
            self.validate_st_texto7(self.CNES)
# end class dadosPrestador


class dadosConta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosProtocolo=None):
        self.original_tagname_ = None
        if dadosProtocolo is None:
            self.dadosProtocolo = []
        else:
            self.dadosProtocolo = dadosProtocolo
    def factory(*args_, **kwargs_):
        if dadosConta.subclass:
            return dadosConta.subclass(*args_, **kwargs_)
        else:
            return dadosConta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosProtocolo(self): return self.dadosProtocolo
    def set_dadosProtocolo(self, dadosProtocolo): self.dadosProtocolo = dadosProtocolo
    def add_dadosProtocolo(self, value): self.dadosProtocolo.append(value)
    def insert_dadosProtocolo_at(self, index, value): self.dadosProtocolo.insert(index, value)
    def replace_dadosProtocolo_at(self, index, value): self.dadosProtocolo[index] = value
    def hasContent_(self):
        if (
            self.dadosProtocolo
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosConta', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosConta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosConta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosConta'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosConta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for dadosProtocolo_ in self.dadosProtocolo:
            dadosProtocolo_.export(outfile, level, namespace_, name_='dadosProtocolo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='dadosConta'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('dadosProtocolo=[\n')
        level += 1
        for dadosProtocolo_ in self.dadosProtocolo:
            showIndent(outfile, level)
            outfile.write('model_.dadosProtocolo(\n')
            dadosProtocolo_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosProtocolo':
            obj_ = dadosProtocolo.factory()
            obj_.build(child_)
            self.dadosProtocolo.append(obj_)
            obj_.original_tagname_ = 'dadosProtocolo'
# end class dadosConta


class dadosProtocolo(ct_contaMedicaResumo):
    subclass = None
    superclass = ct_contaMedicaResumo
    def __init__(self, numeroLotePrestador=None, numeroProtocolo=None, dataProtocolo=None, GlosaProtocolo=None, situacaoProtocolo=None, relacaoGuias=None, valorInformadoProtocolo=None, valorProcessadoProtocolo=None, valorLiberadoProtocolo=None, valorGlosaProtocolo=None):
        self.original_tagname_ = None
        super(dadosProtocolo, self).__init__(numeroLotePrestador, numeroProtocolo, dataProtocolo, GlosaProtocolo, situacaoProtocolo, relacaoGuias, valorInformadoProtocolo, valorProcessadoProtocolo, valorLiberadoProtocolo, valorGlosaProtocolo, )
    def factory(*args_, **kwargs_):
        if dadosProtocolo.subclass:
            return dadosProtocolo.subclass(*args_, **kwargs_)
        else:
            return dadosProtocolo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(dadosProtocolo, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosProtocolo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosProtocolo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosProtocolo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosProtocolo'):
        super(dadosProtocolo, self).exportAttributes(outfile, level, already_processed, namespace_, name_='dadosProtocolo')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosProtocolo', fromsubclass_=False, pretty_print=True):
        super(dadosProtocolo, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='dadosProtocolo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(dadosProtocolo, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(dadosProtocolo, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(dadosProtocolo, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(dadosProtocolo, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class dadosProtocolo


class ctm_demonstrativoPagamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoDemonstrativo=None, dadosContratado=None, pagamentos=None, totaisDemonstrativo=None, observacao=None):
        self.original_tagname_ = None
        self.cabecalhoDemonstrativo = cabecalhoDemonstrativo
        self.dadosContratado = dadosContratado
        self.pagamentos = pagamentos
        self.totaisDemonstrativo = totaisDemonstrativo
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if ctm_demonstrativoPagamento.subclass:
            return ctm_demonstrativoPagamento.subclass(*args_, **kwargs_)
        else:
            return ctm_demonstrativoPagamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoDemonstrativo(self): return self.cabecalhoDemonstrativo
    def set_cabecalhoDemonstrativo(self, cabecalhoDemonstrativo): self.cabecalhoDemonstrativo = cabecalhoDemonstrativo
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_pagamentos(self): return self.pagamentos
    def set_pagamentos(self, pagamentos): self.pagamentos = pagamentos
    def get_totaisDemonstrativo(self): return self.totaisDemonstrativo
    def set_totaisDemonstrativo(self, totaisDemonstrativo): self.totaisDemonstrativo = totaisDemonstrativo
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoDemonstrativo is not None or
            self.dadosContratado is not None or
            self.pagamentos is not None or
            self.totaisDemonstrativo is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_demonstrativoPagamento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_demonstrativoPagamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_demonstrativoPagamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_demonstrativoPagamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_demonstrativoPagamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoDemonstrativo is not None:
            self.cabecalhoDemonstrativo.export(outfile, level, namespace_, name_='cabecalhoDemonstrativo', pretty_print=pretty_print)
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.pagamentos is not None:
            self.pagamentos.export(outfile, level, namespace_, name_='pagamentos', pretty_print=pretty_print)
        if self.totaisDemonstrativo is not None:
            self.totaisDemonstrativo.export(outfile, level, namespace_, name_='totaisDemonstrativo', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_demonstrativoPagamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoDemonstrativo=model_.ct_demonstrativoCabecalho(\n')
            self.cabecalhoDemonstrativo.exportLiteral(outfile, level, name_='cabecalhoDemonstrativo')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.dadosContratado(\n')
            self.dadosContratado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.pagamentos is not None:
            showIndent(outfile, level)
            outfile.write('pagamentos=model_.pagamentos(\n')
            self.pagamentos.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.totaisDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totaisDemonstrativo=model_.totaisDemonstrativo(\n')
            self.totaisDemonstrativo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoDemonstrativo':
            obj_ = ct_demonstrativoCabecalho.factory()
            obj_.build(child_)
            self.cabecalhoDemonstrativo = obj_
            obj_.original_tagname_ = 'cabecalhoDemonstrativo'
        elif nodeName_ == 'dadosContratado':
            obj_ = dadosContratado.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'pagamentos':
            obj_ = pagamentos.factory()
            obj_.build(child_)
            self.pagamentos = obj_
            obj_.original_tagname_ = 'pagamentos'
        elif nodeName_ == 'totaisDemonstrativo':
            obj_ = totaisDemonstrativo.factory()
            obj_.build(child_)
            self.totaisDemonstrativo = obj_
            obj_.original_tagname_ = 'totaisDemonstrativo'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class ctm_demonstrativoPagamento


class pagamentos(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, pagamentosPorData=None):
        self.original_tagname_ = None
        if pagamentosPorData is None:
            self.pagamentosPorData = []
        else:
            self.pagamentosPorData = pagamentosPorData
    def factory(*args_, **kwargs_):
        if pagamentos.subclass:
            return pagamentos.subclass(*args_, **kwargs_)
        else:
            return pagamentos(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_pagamentosPorData(self): return self.pagamentosPorData
    def set_pagamentosPorData(self, pagamentosPorData): self.pagamentosPorData = pagamentosPorData
    def add_pagamentosPorData(self, value): self.pagamentosPorData.append(value)
    def insert_pagamentosPorData_at(self, index, value): self.pagamentosPorData.insert(index, value)
    def replace_pagamentosPorData_at(self, index, value): self.pagamentosPorData[index] = value
    def hasContent_(self):
        if (
            self.pagamentosPorData
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='pagamentos', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pagamentos')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='pagamentos', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='pagamentos'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='pagamentos', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for pagamentosPorData_ in self.pagamentosPorData:
            pagamentosPorData_.export(outfile, level, namespace_, name_='pagamentosPorData', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='pagamentos'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('pagamentosPorData=[\n')
        level += 1
        for pagamentosPorData_ in self.pagamentosPorData:
            showIndent(outfile, level)
            outfile.write('model_.pagamentosPorData(\n')
            pagamentosPorData_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'pagamentosPorData':
            obj_ = pagamentosPorData.factory()
            obj_.build(child_)
            self.pagamentosPorData.append(obj_)
            obj_.original_tagname_ = 'pagamentosPorData'
# end class pagamentos


class pagamentosPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosPagamento=None, dadosResumo=None, totaisBrutosPorData=None, debitosCreditosPorData=None, totaisLiquidosPorData=None):
        self.original_tagname_ = None
        self.dadosPagamento = dadosPagamento
        self.dadosResumo = dadosResumo
        self.totaisBrutosPorData = totaisBrutosPorData
        self.debitosCreditosPorData = debitosCreditosPorData
        self.totaisLiquidosPorData = totaisLiquidosPorData
    def factory(*args_, **kwargs_):
        if pagamentosPorData.subclass:
            return pagamentosPorData.subclass(*args_, **kwargs_)
        else:
            return pagamentosPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosPagamento(self): return self.dadosPagamento
    def set_dadosPagamento(self, dadosPagamento): self.dadosPagamento = dadosPagamento
    def get_dadosResumo(self): return self.dadosResumo
    def set_dadosResumo(self, dadosResumo): self.dadosResumo = dadosResumo
    def get_totaisBrutosPorData(self): return self.totaisBrutosPorData
    def set_totaisBrutosPorData(self, totaisBrutosPorData): self.totaisBrutosPorData = totaisBrutosPorData
    def get_debitosCreditosPorData(self): return self.debitosCreditosPorData
    def set_debitosCreditosPorData(self, debitosCreditosPorData): self.debitosCreditosPorData = debitosCreditosPorData
    def get_totaisLiquidosPorData(self): return self.totaisLiquidosPorData
    def set_totaisLiquidosPorData(self, totaisLiquidosPorData): self.totaisLiquidosPorData = totaisLiquidosPorData
    def hasContent_(self):
        if (
            self.dadosPagamento is not None or
            self.dadosResumo is not None or
            self.totaisBrutosPorData is not None or
            self.debitosCreditosPorData is not None or
            self.totaisLiquidosPorData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='pagamentosPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pagamentosPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='pagamentosPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='pagamentosPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='pagamentosPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosPagamento is not None:
            self.dadosPagamento.export(outfile, level, namespace_, name_='dadosPagamento', pretty_print=pretty_print)
        if self.dadosResumo is not None:
            self.dadosResumo.export(outfile, level, namespace_, name_='dadosResumo', pretty_print=pretty_print)
        if self.totaisBrutosPorData is not None:
            self.totaisBrutosPorData.export(outfile, level, namespace_, name_='totaisBrutosPorData', pretty_print=pretty_print)
        if self.debitosCreditosPorData is not None:
            self.debitosCreditosPorData.export(outfile, level, namespace_, name_='debitosCreditosPorData', pretty_print=pretty_print)
        if self.totaisLiquidosPorData is not None:
            self.totaisLiquidosPorData.export(outfile, level, namespace_, name_='totaisLiquidosPorData', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='pagamentosPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosPagamento is not None:
            showIndent(outfile, level)
            outfile.write('dadosPagamento=model_.ct_pagamentoDados(\n')
            self.dadosPagamento.exportLiteral(outfile, level, name_='dadosPagamento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosResumo is not None:
            showIndent(outfile, level)
            outfile.write('dadosResumo=model_.dadosResumo(\n')
            self.dadosResumo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.totaisBrutosPorData is not None:
            showIndent(outfile, level)
            outfile.write('totaisBrutosPorData=model_.totaisBrutosPorData(\n')
            self.totaisBrutosPorData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.debitosCreditosPorData is not None:
            showIndent(outfile, level)
            outfile.write('debitosCreditosPorData=model_.debitosCreditosPorData(\n')
            self.debitosCreditosPorData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.totaisLiquidosPorData is not None:
            showIndent(outfile, level)
            outfile.write('totaisLiquidosPorData=model_.totaisLiquidosPorData(\n')
            self.totaisLiquidosPorData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosPagamento':
            obj_ = ct_pagamentoDados.factory()
            obj_.build(child_)
            self.dadosPagamento = obj_
            obj_.original_tagname_ = 'dadosPagamento'
        elif nodeName_ == 'dadosResumo':
            obj_ = dadosResumo.factory()
            obj_.build(child_)
            self.dadosResumo = obj_
            obj_.original_tagname_ = 'dadosResumo'
        elif nodeName_ == 'totaisBrutosPorData':
            obj_ = totaisBrutosPorData.factory()
            obj_.build(child_)
            self.totaisBrutosPorData = obj_
            obj_.original_tagname_ = 'totaisBrutosPorData'
        elif nodeName_ == 'debitosCreditosPorData':
            obj_ = debitosCreditosPorData.factory()
            obj_.build(child_)
            self.debitosCreditosPorData = obj_
            obj_.original_tagname_ = 'debitosCreditosPorData'
        elif nodeName_ == 'totaisLiquidosPorData':
            obj_ = totaisLiquidosPorData.factory()
            obj_.build(child_)
            self.totaisLiquidosPorData = obj_
            obj_.original_tagname_ = 'totaisLiquidosPorData'
# end class pagamentosPorData


class dadosResumo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, relacaoProtocolos=None):
        self.original_tagname_ = None
        if relacaoProtocolos is None:
            self.relacaoProtocolos = []
        else:
            self.relacaoProtocolos = relacaoProtocolos
    def factory(*args_, **kwargs_):
        if dadosResumo.subclass:
            return dadosResumo.subclass(*args_, **kwargs_)
        else:
            return dadosResumo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_relacaoProtocolos(self): return self.relacaoProtocolos
    def set_relacaoProtocolos(self, relacaoProtocolos): self.relacaoProtocolos = relacaoProtocolos
    def add_relacaoProtocolos(self, value): self.relacaoProtocolos.append(value)
    def insert_relacaoProtocolos_at(self, index, value): self.relacaoProtocolos.insert(index, value)
    def replace_relacaoProtocolos_at(self, index, value): self.relacaoProtocolos[index] = value
    def hasContent_(self):
        if (
            self.relacaoProtocolos
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosResumo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosResumo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosResumo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosResumo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosResumo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for relacaoProtocolos_ in self.relacaoProtocolos:
            relacaoProtocolos_.export(outfile, level, namespace_, name_='relacaoProtocolos', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='dadosResumo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('relacaoProtocolos=[\n')
        level += 1
        for relacaoProtocolos_ in self.relacaoProtocolos:
            showIndent(outfile, level)
            outfile.write('model_.ct_dadosResumoDemonstrativo(\n')
            relacaoProtocolos_.exportLiteral(outfile, level, name_='ct_dadosResumoDemonstrativo')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'relacaoProtocolos':
            obj_ = ct_dadosResumoDemonstrativo.factory()
            obj_.build(child_)
            self.relacaoProtocolos.append(obj_)
            obj_.original_tagname_ = 'relacaoProtocolos'
# end class dadosResumo


class totaisBrutosPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, totalInformadoPorData=None, totalProcessadoPorData=None, totaLiberadoPorData=None, totalGlosaPorData=None):
        self.original_tagname_ = None
        self.totalInformadoPorData = totalInformadoPorData
        self.totalProcessadoPorData = totalProcessadoPorData
        self.totaLiberadoPorData = totaLiberadoPorData
        self.totalGlosaPorData = totalGlosaPorData
    def factory(*args_, **kwargs_):
        if totaisBrutosPorData.subclass:
            return totaisBrutosPorData.subclass(*args_, **kwargs_)
        else:
            return totaisBrutosPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_totalInformadoPorData(self): return self.totalInformadoPorData
    def set_totalInformadoPorData(self, totalInformadoPorData): self.totalInformadoPorData = totalInformadoPorData
    def get_totalProcessadoPorData(self): return self.totalProcessadoPorData
    def set_totalProcessadoPorData(self, totalProcessadoPorData): self.totalProcessadoPorData = totalProcessadoPorData
    def get_totaLiberadoPorData(self): return self.totaLiberadoPorData
    def set_totaLiberadoPorData(self, totaLiberadoPorData): self.totaLiberadoPorData = totaLiberadoPorData
    def get_totalGlosaPorData(self): return self.totalGlosaPorData
    def set_totalGlosaPorData(self, totalGlosaPorData): self.totalGlosaPorData = totalGlosaPorData
    def hasContent_(self):
        if (
            self.totalInformadoPorData is not None or
            self.totalProcessadoPorData is not None or
            self.totaLiberadoPorData is not None or
            self.totalGlosaPorData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisBrutosPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisBrutosPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisBrutosPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisBrutosPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisBrutosPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.totalInformadoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalInformadoPorData>%s</%stotalInformadoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalInformadoPorData).encode(ExternalEncoding), input_name='totalInformadoPorData'), namespace_, eol_))
        if self.totalProcessadoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalProcessadoPorData>%s</%stotalProcessadoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalProcessadoPorData).encode(ExternalEncoding), input_name='totalProcessadoPorData'), namespace_, eol_))
        if self.totaLiberadoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotaLiberadoPorData>%s</%stotaLiberadoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.totaLiberadoPorData).encode(ExternalEncoding), input_name='totaLiberadoPorData'), namespace_, eol_))
        if self.totalGlosaPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalGlosaPorData>%s</%stotalGlosaPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalGlosaPorData).encode(ExternalEncoding), input_name='totalGlosaPorData'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisBrutosPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.totalInformadoPorData is not None:
            showIndent(outfile, level)
            outfile.write('totalInformadoPorData=%s,\n' % quote_python(self.totalInformadoPorData).encode(ExternalEncoding))
        if self.totalProcessadoPorData is not None:
            showIndent(outfile, level)
            outfile.write('totalProcessadoPorData=%s,\n' % quote_python(self.totalProcessadoPorData).encode(ExternalEncoding))
        if self.totaLiberadoPorData is not None:
            showIndent(outfile, level)
            outfile.write('totaLiberadoPorData=%s,\n' % quote_python(self.totaLiberadoPorData).encode(ExternalEncoding))
        if self.totalGlosaPorData is not None:
            showIndent(outfile, level)
            outfile.write('totalGlosaPorData=%s,\n' % quote_python(self.totalGlosaPorData).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'totalInformadoPorData':
            totalInformadoPorData_ = child_.text
            totalInformadoPorData_ = self.gds_validate_string(totalInformadoPorData_, node, 'totalInformadoPorData')
            self.totalInformadoPorData = totalInformadoPorData_
        elif nodeName_ == 'totalProcessadoPorData':
            totalProcessadoPorData_ = child_.text
            totalProcessadoPorData_ = self.gds_validate_string(totalProcessadoPorData_, node, 'totalProcessadoPorData')
            self.totalProcessadoPorData = totalProcessadoPorData_
        elif nodeName_ == 'totaLiberadoPorData':
            totaLiberadoPorData_ = child_.text
            totaLiberadoPorData_ = self.gds_validate_string(totaLiberadoPorData_, node, 'totaLiberadoPorData')
            self.totaLiberadoPorData = totaLiberadoPorData_
        elif nodeName_ == 'totalGlosaPorData':
            totalGlosaPorData_ = child_.text
            totalGlosaPorData_ = self.gds_validate_string(totalGlosaPorData_, node, 'totalGlosaPorData')
            self.totalGlosaPorData = totalGlosaPorData_
# end class totaisBrutosPorData


class debitosCreditosPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, debitosCreditos=None):
        self.original_tagname_ = None
        if debitosCreditos is None:
            self.debitosCreditos = []
        else:
            self.debitosCreditos = debitosCreditos
    def factory(*args_, **kwargs_):
        if debitosCreditosPorData.subclass:
            return debitosCreditosPorData.subclass(*args_, **kwargs_)
        else:
            return debitosCreditosPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_debitosCreditos(self): return self.debitosCreditos
    def set_debitosCreditos(self, debitosCreditos): self.debitosCreditos = debitosCreditos
    def add_debitosCreditos(self, value): self.debitosCreditos.append(value)
    def insert_debitosCreditos_at(self, index, value): self.debitosCreditos.insert(index, value)
    def replace_debitosCreditos_at(self, index, value): self.debitosCreditos[index] = value
    def hasContent_(self):
        if (
            self.debitosCreditos
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='debitosCreditosPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='debitosCreditosPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='debitosCreditosPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='debitosCreditosPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='debitosCreditosPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for debitosCreditos_ in self.debitosCreditos:
            debitosCreditos_.export(outfile, level, namespace_, name_='debitosCreditos', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='debitosCreditosPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('debitosCreditos=[\n')
        level += 1
        for debitosCreditos_ in self.debitosCreditos:
            showIndent(outfile, level)
            outfile.write('model_.ct_descontos(\n')
            debitosCreditos_.exportLiteral(outfile, level, name_='ct_descontos')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'debitosCreditos':
            obj_ = ct_descontos.factory()
            obj_.build(child_)
            self.debitosCreditos.append(obj_)
            obj_.original_tagname_ = 'debitosCreditos'
# end class debitosCreditosPorData


class totaisLiquidosPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, totalDebitosPorData=None, totalCreditosPorData=None, liquidoPorData=None):
        self.original_tagname_ = None
        self.totalDebitosPorData = totalDebitosPorData
        self.totalCreditosPorData = totalCreditosPorData
        self.liquidoPorData = liquidoPorData
    def factory(*args_, **kwargs_):
        if totaisLiquidosPorData.subclass:
            return totaisLiquidosPorData.subclass(*args_, **kwargs_)
        else:
            return totaisLiquidosPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_totalDebitosPorData(self): return self.totalDebitosPorData
    def set_totalDebitosPorData(self, totalDebitosPorData): self.totalDebitosPorData = totalDebitosPorData
    def get_totalCreditosPorData(self): return self.totalCreditosPorData
    def set_totalCreditosPorData(self, totalCreditosPorData): self.totalCreditosPorData = totalCreditosPorData
    def get_liquidoPorData(self): return self.liquidoPorData
    def set_liquidoPorData(self, liquidoPorData): self.liquidoPorData = liquidoPorData
    def hasContent_(self):
        if (
            self.totalDebitosPorData is not None or
            self.totalCreditosPorData is not None or
            self.liquidoPorData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisLiquidosPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisLiquidosPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisLiquidosPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisLiquidosPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisLiquidosPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.totalDebitosPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalDebitosPorData>%s</%stotalDebitosPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalDebitosPorData).encode(ExternalEncoding), input_name='totalDebitosPorData'), namespace_, eol_))
        if self.totalCreditosPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalCreditosPorData>%s</%stotalCreditosPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalCreditosPorData).encode(ExternalEncoding), input_name='totalCreditosPorData'), namespace_, eol_))
        if self.liquidoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sliquidoPorData>%s</%sliquidoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.liquidoPorData).encode(ExternalEncoding), input_name='liquidoPorData'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisLiquidosPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.totalDebitosPorData is not None:
            showIndent(outfile, level)
            outfile.write('totalDebitosPorData=%s,\n' % quote_python(self.totalDebitosPorData).encode(ExternalEncoding))
        if self.totalCreditosPorData is not None:
            showIndent(outfile, level)
            outfile.write('totalCreditosPorData=%s,\n' % quote_python(self.totalCreditosPorData).encode(ExternalEncoding))
        if self.liquidoPorData is not None:
            showIndent(outfile, level)
            outfile.write('liquidoPorData=%s,\n' % quote_python(self.liquidoPorData).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'totalDebitosPorData':
            totalDebitosPorData_ = child_.text
            totalDebitosPorData_ = self.gds_validate_string(totalDebitosPorData_, node, 'totalDebitosPorData')
            self.totalDebitosPorData = totalDebitosPorData_
        elif nodeName_ == 'totalCreditosPorData':
            totalCreditosPorData_ = child_.text
            totalCreditosPorData_ = self.gds_validate_string(totalCreditosPorData_, node, 'totalCreditosPorData')
            self.totalCreditosPorData = totalCreditosPorData_
        elif nodeName_ == 'liquidoPorData':
            liquidoPorData_ = child_.text
            liquidoPorData_ = self.gds_validate_string(liquidoPorData_, node, 'liquidoPorData')
            self.liquidoPorData = liquidoPorData_
# end class totaisLiquidosPorData


class totaisDemonstrativo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, totaisBrutosDemonstrativo=None, debitosCreditosDemonstrativo=None, totaisLiquidosDemonstrativo=None):
        self.original_tagname_ = None
        self.totaisBrutosDemonstrativo = totaisBrutosDemonstrativo
        if debitosCreditosDemonstrativo is None:
            self.debitosCreditosDemonstrativo = []
        else:
            self.debitosCreditosDemonstrativo = debitosCreditosDemonstrativo
        self.totaisLiquidosDemonstrativo = totaisLiquidosDemonstrativo
    def factory(*args_, **kwargs_):
        if totaisDemonstrativo.subclass:
            return totaisDemonstrativo.subclass(*args_, **kwargs_)
        else:
            return totaisDemonstrativo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_totaisBrutosDemonstrativo(self): return self.totaisBrutosDemonstrativo
    def set_totaisBrutosDemonstrativo(self, totaisBrutosDemonstrativo): self.totaisBrutosDemonstrativo = totaisBrutosDemonstrativo
    def get_debitosCreditosDemonstrativo(self): return self.debitosCreditosDemonstrativo
    def set_debitosCreditosDemonstrativo(self, debitosCreditosDemonstrativo): self.debitosCreditosDemonstrativo = debitosCreditosDemonstrativo
    def add_debitosCreditosDemonstrativo(self, value): self.debitosCreditosDemonstrativo.append(value)
    def insert_debitosCreditosDemonstrativo_at(self, index, value): self.debitosCreditosDemonstrativo.insert(index, value)
    def replace_debitosCreditosDemonstrativo_at(self, index, value): self.debitosCreditosDemonstrativo[index] = value
    def get_totaisLiquidosDemonstrativo(self): return self.totaisLiquidosDemonstrativo
    def set_totaisLiquidosDemonstrativo(self, totaisLiquidosDemonstrativo): self.totaisLiquidosDemonstrativo = totaisLiquidosDemonstrativo
    def hasContent_(self):
        if (
            self.totaisBrutosDemonstrativo is not None or
            self.debitosCreditosDemonstrativo or
            self.totaisLiquidosDemonstrativo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisDemonstrativo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisDemonstrativo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisDemonstrativo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisDemonstrativo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisDemonstrativo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.totaisBrutosDemonstrativo is not None:
            self.totaisBrutosDemonstrativo.export(outfile, level, namespace_, name_='totaisBrutosDemonstrativo', pretty_print=pretty_print)
        for debitosCreditosDemonstrativo_ in self.debitosCreditosDemonstrativo:
            debitosCreditosDemonstrativo_.export(outfile, level, namespace_, name_='debitosCreditosDemonstrativo', pretty_print=pretty_print)
        if self.totaisLiquidosDemonstrativo is not None:
            self.totaisLiquidosDemonstrativo.export(outfile, level, namespace_, name_='totaisLiquidosDemonstrativo', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='totaisDemonstrativo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.totaisBrutosDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totaisBrutosDemonstrativo=model_.totaisBrutosDemonstrativo(\n')
            self.totaisBrutosDemonstrativo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('debitosCreditosDemonstrativo=[\n')
        level += 1
        for debitosCreditosDemonstrativo_ in self.debitosCreditosDemonstrativo:
            showIndent(outfile, level)
            outfile.write('model_.ct_descontos(\n')
            debitosCreditosDemonstrativo_.exportLiteral(outfile, level, name_='ct_descontos')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.totaisLiquidosDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totaisLiquidosDemonstrativo=model_.totaisLiquidosDemonstrativo(\n')
            self.totaisLiquidosDemonstrativo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'totaisBrutosDemonstrativo':
            obj_ = totaisBrutosDemonstrativo.factory()
            obj_.build(child_)
            self.totaisBrutosDemonstrativo = obj_
            obj_.original_tagname_ = 'totaisBrutosDemonstrativo'
        elif nodeName_ == 'debitosCreditosDemonstrativo':
            obj_ = ct_descontos.factory()
            obj_.build(child_)
            self.debitosCreditosDemonstrativo.append(obj_)
            obj_.original_tagname_ = 'debitosCreditosDemonstrativo'
        elif nodeName_ == 'totaisLiquidosDemonstrativo':
            obj_ = totaisLiquidosDemonstrativo.factory()
            obj_.build(child_)
            self.totaisLiquidosDemonstrativo = obj_
            obj_.original_tagname_ = 'totaisLiquidosDemonstrativo'
# end class totaisDemonstrativo


class totaisBrutosDemonstrativo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorInformadoBruto=None, valorProcessadoBruto=None, valorLiberadoBruto=None, valorGlosaBruto=None):
        self.original_tagname_ = None
        self.valorInformadoBruto = valorInformadoBruto
        self.valorProcessadoBruto = valorProcessadoBruto
        self.valorLiberadoBruto = valorLiberadoBruto
        self.valorGlosaBruto = valorGlosaBruto
    def factory(*args_, **kwargs_):
        if totaisBrutosDemonstrativo.subclass:
            return totaisBrutosDemonstrativo.subclass(*args_, **kwargs_)
        else:
            return totaisBrutosDemonstrativo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorInformadoBruto(self): return self.valorInformadoBruto
    def set_valorInformadoBruto(self, valorInformadoBruto): self.valorInformadoBruto = valorInformadoBruto
    def get_valorProcessadoBruto(self): return self.valorProcessadoBruto
    def set_valorProcessadoBruto(self, valorProcessadoBruto): self.valorProcessadoBruto = valorProcessadoBruto
    def get_valorLiberadoBruto(self): return self.valorLiberadoBruto
    def set_valorLiberadoBruto(self, valorLiberadoBruto): self.valorLiberadoBruto = valorLiberadoBruto
    def get_valorGlosaBruto(self): return self.valorGlosaBruto
    def set_valorGlosaBruto(self, valorGlosaBruto): self.valorGlosaBruto = valorGlosaBruto
    def hasContent_(self):
        if (
            self.valorInformadoBruto is not None or
            self.valorProcessadoBruto is not None or
            self.valorLiberadoBruto is not None or
            self.valorGlosaBruto is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisBrutosDemonstrativo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisBrutosDemonstrativo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisBrutosDemonstrativo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisBrutosDemonstrativo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisBrutosDemonstrativo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorInformadoBruto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformadoBruto>%s</%svalorInformadoBruto>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformadoBruto).encode(ExternalEncoding), input_name='valorInformadoBruto'), namespace_, eol_))
        if self.valorProcessadoBruto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProcessadoBruto>%s</%svalorProcessadoBruto>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProcessadoBruto).encode(ExternalEncoding), input_name='valorProcessadoBruto'), namespace_, eol_))
        if self.valorLiberadoBruto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberadoBruto>%s</%svalorLiberadoBruto>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberadoBruto).encode(ExternalEncoding), input_name='valorLiberadoBruto'), namespace_, eol_))
        if self.valorGlosaBruto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorGlosaBruto>%s</%svalorGlosaBruto>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorGlosaBruto).encode(ExternalEncoding), input_name='valorGlosaBruto'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisBrutosDemonstrativo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorInformadoBruto is not None:
            showIndent(outfile, level)
            outfile.write('valorInformadoBruto=%s,\n' % quote_python(self.valorInformadoBruto).encode(ExternalEncoding))
        if self.valorProcessadoBruto is not None:
            showIndent(outfile, level)
            outfile.write('valorProcessadoBruto=%s,\n' % quote_python(self.valorProcessadoBruto).encode(ExternalEncoding))
        if self.valorLiberadoBruto is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberadoBruto=%s,\n' % quote_python(self.valorLiberadoBruto).encode(ExternalEncoding))
        if self.valorGlosaBruto is not None:
            showIndent(outfile, level)
            outfile.write('valorGlosaBruto=%s,\n' % quote_python(self.valorGlosaBruto).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorInformadoBruto':
            valorInformadoBruto_ = child_.text
            valorInformadoBruto_ = self.gds_validate_string(valorInformadoBruto_, node, 'valorInformadoBruto')
            self.valorInformadoBruto = valorInformadoBruto_
        elif nodeName_ == 'valorProcessadoBruto':
            valorProcessadoBruto_ = child_.text
            valorProcessadoBruto_ = self.gds_validate_string(valorProcessadoBruto_, node, 'valorProcessadoBruto')
            self.valorProcessadoBruto = valorProcessadoBruto_
        elif nodeName_ == 'valorLiberadoBruto':
            valorLiberadoBruto_ = child_.text
            valorLiberadoBruto_ = self.gds_validate_string(valorLiberadoBruto_, node, 'valorLiberadoBruto')
            self.valorLiberadoBruto = valorLiberadoBruto_
        elif nodeName_ == 'valorGlosaBruto':
            valorGlosaBruto_ = child_.text
            valorGlosaBruto_ = self.gds_validate_string(valorGlosaBruto_, node, 'valorGlosaBruto')
            self.valorGlosaBruto = valorGlosaBruto_
# end class totaisBrutosDemonstrativo


class totaisLiquidosDemonstrativo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, totalDebitosDemonstrativo=None, totalCreditosdemonstrativo=None, valorLiberadoDemonstrativo=None):
        self.original_tagname_ = None
        self.totalDebitosDemonstrativo = totalDebitosDemonstrativo
        self.totalCreditosdemonstrativo = totalCreditosdemonstrativo
        self.valorLiberadoDemonstrativo = valorLiberadoDemonstrativo
    def factory(*args_, **kwargs_):
        if totaisLiquidosDemonstrativo.subclass:
            return totaisLiquidosDemonstrativo.subclass(*args_, **kwargs_)
        else:
            return totaisLiquidosDemonstrativo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_totalDebitosDemonstrativo(self): return self.totalDebitosDemonstrativo
    def set_totalDebitosDemonstrativo(self, totalDebitosDemonstrativo): self.totalDebitosDemonstrativo = totalDebitosDemonstrativo
    def get_totalCreditosdemonstrativo(self): return self.totalCreditosdemonstrativo
    def set_totalCreditosdemonstrativo(self, totalCreditosdemonstrativo): self.totalCreditosdemonstrativo = totalCreditosdemonstrativo
    def get_valorLiberadoDemonstrativo(self): return self.valorLiberadoDemonstrativo
    def set_valorLiberadoDemonstrativo(self, valorLiberadoDemonstrativo): self.valorLiberadoDemonstrativo = valorLiberadoDemonstrativo
    def hasContent_(self):
        if (
            self.totalDebitosDemonstrativo is not None or
            self.totalCreditosdemonstrativo is not None or
            self.valorLiberadoDemonstrativo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisLiquidosDemonstrativo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisLiquidosDemonstrativo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisLiquidosDemonstrativo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisLiquidosDemonstrativo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisLiquidosDemonstrativo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.totalDebitosDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalDebitosDemonstrativo>%s</%stotalDebitosDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalDebitosDemonstrativo).encode(ExternalEncoding), input_name='totalDebitosDemonstrativo'), namespace_, eol_))
        if self.totalCreditosdemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalCreditosdemonstrativo>%s</%stotalCreditosdemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalCreditosdemonstrativo).encode(ExternalEncoding), input_name='totalCreditosdemonstrativo'), namespace_, eol_))
        if self.valorLiberadoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberadoDemonstrativo>%s</%svalorLiberadoDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberadoDemonstrativo).encode(ExternalEncoding), input_name='valorLiberadoDemonstrativo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisLiquidosDemonstrativo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.totalDebitosDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totalDebitosDemonstrativo=%s,\n' % quote_python(self.totalDebitosDemonstrativo).encode(ExternalEncoding))
        if self.totalCreditosdemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totalCreditosdemonstrativo=%s,\n' % quote_python(self.totalCreditosdemonstrativo).encode(ExternalEncoding))
        if self.valorLiberadoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberadoDemonstrativo=%s,\n' % quote_python(self.valorLiberadoDemonstrativo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'totalDebitosDemonstrativo':
            totalDebitosDemonstrativo_ = child_.text
            totalDebitosDemonstrativo_ = self.gds_validate_string(totalDebitosDemonstrativo_, node, 'totalDebitosDemonstrativo')
            self.totalDebitosDemonstrativo = totalDebitosDemonstrativo_
        elif nodeName_ == 'totalCreditosdemonstrativo':
            totalCreditosdemonstrativo_ = child_.text
            totalCreditosdemonstrativo_ = self.gds_validate_string(totalCreditosdemonstrativo_, node, 'totalCreditosdemonstrativo')
            self.totalCreditosdemonstrativo = totalCreditosdemonstrativo_
        elif nodeName_ == 'valorLiberadoDemonstrativo':
            valorLiberadoDemonstrativo_ = child_.text
            valorLiberadoDemonstrativo_ = self.gds_validate_string(valorLiberadoDemonstrativo_, node, 'valorLiberadoDemonstrativo')
            self.valorLiberadoDemonstrativo = valorLiberadoDemonstrativo_
# end class totaisLiquidosDemonstrativo


class ctm_guiaLote(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroLote=None, guiasTISS=None):
        self.original_tagname_ = None
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.guiasTISS = guiasTISS
    def factory(*args_, **kwargs_):
        if ctm_guiaLote.subclass:
            return ctm_guiaLote.subclass(*args_, **kwargs_)
        else:
            return ctm_guiaLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_guiasTISS(self): return self.guiasTISS
    def set_guiasTISS(self, guiasTISS): self.guiasTISS = guiasTISS
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroLote is not None or
            self.guiasTISS is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_guiaLote', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_guiaLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_guiaLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_guiaLote'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_guiaLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.guiasTISS is not None:
            self.guiasTISS.export(outfile, level, namespace_, name_='guiasTISS', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_guiaLote'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.guiasTISS is not None:
            showIndent(outfile, level)
            outfile.write('guiasTISS=model_.guiasTISS(\n')
            self.guiasTISS.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'guiasTISS':
            obj_ = guiasTISS.factory()
            obj_.build(child_)
            self.guiasTISS = obj_
            obj_.original_tagname_ = 'guiasTISS'
# end class ctm_guiaLote


class ctm_honorarioIndividualGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoGuia=None, guiaSolicInternacao=None, senha=None, numeroGuiaOperadora=None, beneficiario=None, localContratado=None, dadosContratadoExecutante=None, dadosInternacao=None, procedimentosRealizados=None, observacao=None, valorTotalHonorarios=None, dataEmissaoGuia=None, assinaturaDigitalGuia=None):
        self.original_tagname_ = None
        self.cabecalhoGuia = cabecalhoGuia
        self.guiaSolicInternacao = guiaSolicInternacao
        self.validate_st_texto20(self.guiaSolicInternacao)
        self.senha = senha
        self.validate_st_texto20(self.senha)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.beneficiario = beneficiario
        self.localContratado = localContratado
        self.dadosContratadoExecutante = dadosContratadoExecutante
        self.dadosInternacao = dadosInternacao
        self.procedimentosRealizados = procedimentosRealizados
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.valorTotalHonorarios = valorTotalHonorarios
        if isinstance(dataEmissaoGuia, basestring):
            initvalue_ = datetime_.datetime.strptime(dataEmissaoGuia, '%Y-%m-%d').date()
        else:
            initvalue_ = dataEmissaoGuia
        self.dataEmissaoGuia = initvalue_
        self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def factory(*args_, **kwargs_):
        if ctm_honorarioIndividualGuia.subclass:
            return ctm_honorarioIndividualGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_honorarioIndividualGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoGuia(self): return self.cabecalhoGuia
    def set_cabecalhoGuia(self, cabecalhoGuia): self.cabecalhoGuia = cabecalhoGuia
    def get_guiaSolicInternacao(self): return self.guiaSolicInternacao
    def set_guiaSolicInternacao(self, guiaSolicInternacao): self.guiaSolicInternacao = guiaSolicInternacao
    def get_senha(self): return self.senha
    def set_senha(self, senha): self.senha = senha
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_beneficiario(self): return self.beneficiario
    def set_beneficiario(self, beneficiario): self.beneficiario = beneficiario
    def get_localContratado(self): return self.localContratado
    def set_localContratado(self, localContratado): self.localContratado = localContratado
    def get_dadosContratadoExecutante(self): return self.dadosContratadoExecutante
    def set_dadosContratadoExecutante(self, dadosContratadoExecutante): self.dadosContratadoExecutante = dadosContratadoExecutante
    def get_dadosInternacao(self): return self.dadosInternacao
    def set_dadosInternacao(self, dadosInternacao): self.dadosInternacao = dadosInternacao
    def get_procedimentosRealizados(self): return self.procedimentosRealizados
    def set_procedimentosRealizados(self, procedimentosRealizados): self.procedimentosRealizados = procedimentosRealizados
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_valorTotalHonorarios(self): return self.valorTotalHonorarios
    def set_valorTotalHonorarios(self, valorTotalHonorarios): self.valorTotalHonorarios = valorTotalHonorarios
    def get_dataEmissaoGuia(self): return self.dataEmissaoGuia
    def set_dataEmissaoGuia(self, dataEmissaoGuia): self.dataEmissaoGuia = dataEmissaoGuia
    def get_assinaturaDigitalGuia(self): return self.assinaturaDigitalGuia
    def set_assinaturaDigitalGuia(self, assinaturaDigitalGuia): self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.cabecalhoGuia is not None or
            self.guiaSolicInternacao is not None or
            self.senha is not None or
            self.numeroGuiaOperadora is not None or
            self.beneficiario is not None or
            self.localContratado is not None or
            self.dadosContratadoExecutante is not None or
            self.dadosInternacao is not None or
            self.procedimentosRealizados is not None or
            self.observacao is not None or
            self.valorTotalHonorarios is not None or
            self.dataEmissaoGuia is not None or
            self.assinaturaDigitalGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_honorarioIndividualGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_honorarioIndividualGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_honorarioIndividualGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_honorarioIndividualGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_honorarioIndividualGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoGuia is not None:
            self.cabecalhoGuia.export(outfile, level, namespace_, name_='cabecalhoGuia', pretty_print=pretty_print)
        if self.guiaSolicInternacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sguiaSolicInternacao>%s</%sguiaSolicInternacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.guiaSolicInternacao).encode(ExternalEncoding), input_name='guiaSolicInternacao'), namespace_, eol_))
        if self.senha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenha>%s</%ssenha>%s' % (namespace_, self.gds_format_string(quote_xml(self.senha).encode(ExternalEncoding), input_name='senha'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.beneficiario is not None:
            self.beneficiario.export(outfile, level, namespace_, name_='beneficiario', pretty_print=pretty_print)
        if self.localContratado is not None:
            self.localContratado.export(outfile, level, namespace_, name_='localContratado', pretty_print=pretty_print)
        if self.dadosContratadoExecutante is not None:
            self.dadosContratadoExecutante.export(outfile, level, namespace_, name_='dadosContratadoExecutante', pretty_print=pretty_print)
        if self.dadosInternacao is not None:
            self.dadosInternacao.export(outfile, level, namespace_, name_='dadosInternacao', pretty_print=pretty_print)
        if self.procedimentosRealizados is not None:
            self.procedimentosRealizados.export(outfile, level, namespace_, name_='procedimentosRealizados', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.valorTotalHonorarios is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalHonorarios>%s</%svalorTotalHonorarios>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalHonorarios).encode(ExternalEncoding), input_name='valorTotalHonorarios'), namespace_, eol_))
        if self.dataEmissaoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataEmissaoGuia>%s</%sdataEmissaoGuia>%s' % (namespace_, self.gds_format_date(self.dataEmissaoGuia, input_name='dataEmissaoGuia'), namespace_, eol_))
        if self.assinaturaDigitalGuia is not None:
            self.assinaturaDigitalGuia.export(outfile, level, namespace_, name_='assinaturaDigitalGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_honorarioIndividualGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoGuia is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoGuia=model_.ct_guiaCabecalho(\n')
            self.cabecalhoGuia.exportLiteral(outfile, level, name_='cabecalhoGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.guiaSolicInternacao is not None:
            showIndent(outfile, level)
            outfile.write('guiaSolicInternacao=%s,\n' % quote_python(self.guiaSolicInternacao).encode(ExternalEncoding))
        if self.senha is not None:
            showIndent(outfile, level)
            outfile.write('senha=%s,\n' % quote_python(self.senha).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.beneficiario is not None:
            showIndent(outfile, level)
            outfile.write('beneficiario=model_.beneficiario(\n')
            self.beneficiario.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.localContratado is not None:
            showIndent(outfile, level)
            outfile.write('localContratado=model_.localContratado(\n')
            self.localContratado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosContratadoExecutante is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratadoExecutante=model_.dadosContratadoExecutante(\n')
            self.dadosContratadoExecutante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosInternacao=model_.dadosInternacao(\n')
            self.dadosInternacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosRealizados is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosRealizados=model_.procedimentosRealizados(\n')
            self.procedimentosRealizados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.valorTotalHonorarios is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalHonorarios=%s,\n' % quote_python(self.valorTotalHonorarios).encode(ExternalEncoding))
        if self.dataEmissaoGuia is not None:
            showIndent(outfile, level)
            outfile.write('dataEmissaoGuia=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataEmissaoGuia, input_name='dataEmissaoGuia'))
        if self.assinaturaDigitalGuia is not None:
            showIndent(outfile, level)
            outfile.write('assinaturaDigitalGuia=model_.assinaturaDigital(\n')
            self.assinaturaDigitalGuia.exportLiteral(outfile, level, name_='assinaturaDigitalGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoGuia':
            class_obj_ = self.get_class_obj_(child_, ct_guiaCabecalho)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.cabecalhoGuia = obj_
            obj_.original_tagname_ = 'cabecalhoGuia'
        elif nodeName_ == 'guiaSolicInternacao':
            guiaSolicInternacao_ = child_.text
            guiaSolicInternacao_ = self.gds_validate_string(guiaSolicInternacao_, node, 'guiaSolicInternacao')
            self.guiaSolicInternacao = guiaSolicInternacao_
            # validate type st_texto20
            self.validate_st_texto20(self.guiaSolicInternacao)
        elif nodeName_ == 'senha':
            senha_ = child_.text
            senha_ = self.gds_validate_string(senha_, node, 'senha')
            self.senha = senha_
            # validate type st_texto20
            self.validate_st_texto20(self.senha)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'beneficiario':
            obj_ = beneficiario.factory()
            obj_.build(child_)
            self.beneficiario = obj_
            obj_.original_tagname_ = 'beneficiario'
        elif nodeName_ == 'localContratado':
            obj_ = localContratado.factory()
            obj_.build(child_)
            self.localContratado = obj_
            obj_.original_tagname_ = 'localContratado'
        elif nodeName_ == 'dadosContratadoExecutante':
            obj_ = dadosContratadoExecutante.factory()
            obj_.build(child_)
            self.dadosContratadoExecutante = obj_
            obj_.original_tagname_ = 'dadosContratadoExecutante'
        elif nodeName_ == 'dadosInternacao':
            obj_ = dadosInternacao.factory()
            obj_.build(child_)
            self.dadosInternacao = obj_
            obj_.original_tagname_ = 'dadosInternacao'
        elif nodeName_ == 'procedimentosRealizados':
            obj_ = procedimentosRealizados.factory()
            obj_.build(child_)
            self.procedimentosRealizados = obj_
            obj_.original_tagname_ = 'procedimentosRealizados'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'valorTotalHonorarios':
            valorTotalHonorarios_ = child_.text
            valorTotalHonorarios_ = self.gds_validate_string(valorTotalHonorarios_, node, 'valorTotalHonorarios')
            self.valorTotalHonorarios = valorTotalHonorarios_
        elif nodeName_ == 'dataEmissaoGuia':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataEmissaoGuia = dval_
            # validate type st_data
            self.validate_st_data(self.dataEmissaoGuia)
        elif nodeName_ == 'assinaturaDigitalGuia':
            obj_ = assinaturaDigital.factory()
            obj_.build(child_)
            self.assinaturaDigitalGuia = obj_
            obj_.original_tagname_ = 'assinaturaDigitalGuia'
# end class ctm_honorarioIndividualGuia


class beneficiario(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroCarteira=None, nomeBeneficiario=None, atendimentoRN=None):
        self.original_tagname_ = None
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.atendimentoRN = atendimentoRN
        self.validate_dm_simNao(self.atendimentoRN)
    def factory(*args_, **kwargs_):
        if beneficiario.subclass:
            return beneficiario.subclass(*args_, **kwargs_)
        else:
            return beneficiario(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_atendimentoRN(self): return self.atendimentoRN
    def set_atendimentoRN(self, atendimentoRN): self.atendimentoRN = atendimentoRN
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroCarteira is not None or
            self.nomeBeneficiario is not None or
            self.atendimentoRN is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='beneficiario', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='beneficiario')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='beneficiario', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='beneficiario'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='beneficiario', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.atendimentoRN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%satendimentoRN>%s</%satendimentoRN>%s' % (namespace_, self.gds_format_string(quote_xml(self.atendimentoRN).encode(ExternalEncoding), input_name='atendimentoRN'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='beneficiario'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.atendimentoRN is not None:
            showIndent(outfile, level)
            outfile.write('atendimentoRN=%s,\n' % quote_python(self.atendimentoRN).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'atendimentoRN':
            atendimentoRN_ = child_.text
            atendimentoRN_ = self.gds_validate_string(atendimentoRN_, node, 'atendimentoRN')
            self.atendimentoRN = atendimentoRN_
            # validate type dm_simNao
            self.validate_dm_simNao(self.atendimentoRN)
# end class beneficiario


class localContratado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoContratado=None, nomeContratado=None, cnes=None):
        self.original_tagname_ = None
        self.codigoContratado = codigoContratado
        self.nomeContratado = nomeContratado
        self.validate_st_texto70(self.nomeContratado)
        self.cnes = cnes
        self.validate_st_texto7(self.cnes)
    def factory(*args_, **kwargs_):
        if localContratado.subclass:
            return localContratado.subclass(*args_, **kwargs_)
        else:
            return localContratado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoContratado(self): return self.codigoContratado
    def set_codigoContratado(self, codigoContratado): self.codigoContratado = codigoContratado
    def get_nomeContratado(self): return self.nomeContratado
    def set_nomeContratado(self, nomeContratado): self.nomeContratado = nomeContratado
    def get_cnes(self): return self.cnes
    def set_cnes(self, cnes): self.cnes = cnes
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigoContratado is not None or
            self.nomeContratado is not None or
            self.cnes is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='localContratado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='localContratado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='localContratado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='localContratado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='localContratado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoContratado is not None:
            self.codigoContratado.export(outfile, level, namespace_, name_='codigoContratado', pretty_print=pretty_print)
        if self.nomeContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeContratado>%s</%snomeContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeContratado).encode(ExternalEncoding), input_name='nomeContratado'), namespace_, eol_))
        if self.cnes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnes>%s</%scnes>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnes).encode(ExternalEncoding), input_name='cnes'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='localContratado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoContratado is not None:
            showIndent(outfile, level)
            outfile.write('codigoContratado=model_.codigoContratado(\n')
            self.codigoContratado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.nomeContratado is not None:
            showIndent(outfile, level)
            outfile.write('nomeContratado=%s,\n' % quote_python(self.nomeContratado).encode(ExternalEncoding))
        if self.cnes is not None:
            showIndent(outfile, level)
            outfile.write('cnes=%s,\n' % quote_python(self.cnes).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoContratado':
            obj_ = codigoContratado.factory()
            obj_.build(child_)
            self.codigoContratado = obj_
            obj_.original_tagname_ = 'codigoContratado'
        elif nodeName_ == 'nomeContratado':
            nomeContratado_ = child_.text
            nomeContratado_ = self.gds_validate_string(nomeContratado_, node, 'nomeContratado')
            self.nomeContratado = nomeContratado_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeContratado)
        elif nodeName_ == 'cnes':
            cnes_ = child_.text
            cnes_ = self.gds_validate_string(cnes_, node, 'cnes')
            self.cnes = cnes_
            # validate type st_texto7
            self.validate_st_texto7(self.cnes)
# end class localContratado


class codigoContratado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoNaOperadora=None, cnpjLocalExecutante=None):
        self.original_tagname_ = None
        self.codigoNaOperadora = codigoNaOperadora
        self.validate_st_texto14(self.codigoNaOperadora)
        self.cnpjLocalExecutante = cnpjLocalExecutante
        self.validate_st_CNPJ(self.cnpjLocalExecutante)
    def factory(*args_, **kwargs_):
        if codigoContratado.subclass:
            return codigoContratado.subclass(*args_, **kwargs_)
        else:
            return codigoContratado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoNaOperadora(self): return self.codigoNaOperadora
    def set_codigoNaOperadora(self, codigoNaOperadora): self.codigoNaOperadora = codigoNaOperadora
    def get_cnpjLocalExecutante(self): return self.cnpjLocalExecutante
    def set_cnpjLocalExecutante(self, cnpjLocalExecutante): self.cnpjLocalExecutante = cnpjLocalExecutante
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def hasContent_(self):
        if (
            self.codigoNaOperadora is not None or
            self.cnpjLocalExecutante is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='codigoContratado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='codigoContratado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='codigoContratado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='codigoContratado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='codigoContratado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoNaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoNaOperadora>%s</%scodigoNaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoNaOperadora).encode(ExternalEncoding), input_name='codigoNaOperadora'), namespace_, eol_))
        if self.cnpjLocalExecutante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnpjLocalExecutante>%s</%scnpjLocalExecutante>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnpjLocalExecutante).encode(ExternalEncoding), input_name='cnpjLocalExecutante'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='codigoContratado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoNaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('codigoNaOperadora=%s,\n' % quote_python(self.codigoNaOperadora).encode(ExternalEncoding))
        if self.cnpjLocalExecutante is not None:
            showIndent(outfile, level)
            outfile.write('cnpjLocalExecutante=%s,\n' % quote_python(self.cnpjLocalExecutante).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoNaOperadora':
            codigoNaOperadora_ = child_.text
            codigoNaOperadora_ = self.gds_validate_string(codigoNaOperadora_, node, 'codigoNaOperadora')
            self.codigoNaOperadora = codigoNaOperadora_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoNaOperadora)
        elif nodeName_ == 'cnpjLocalExecutante':
            cnpjLocalExecutante_ = child_.text
            cnpjLocalExecutante_ = self.gds_validate_string(cnpjLocalExecutante_, node, 'cnpjLocalExecutante')
            self.cnpjLocalExecutante = cnpjLocalExecutante_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.cnpjLocalExecutante)
# end class codigoContratado


class dadosContratadoExecutante(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigonaOperadora=None, nomeContratadoExecutante=None, cnesContratadoExecutante=None):
        self.original_tagname_ = None
        self.codigonaOperadora = codigonaOperadora
        self.validate_st_texto14(self.codigonaOperadora)
        self.nomeContratadoExecutante = nomeContratadoExecutante
        self.validate_st_texto70(self.nomeContratadoExecutante)
        self.cnesContratadoExecutante = cnesContratadoExecutante
        self.validate_st_texto7(self.cnesContratadoExecutante)
    def factory(*args_, **kwargs_):
        if dadosContratadoExecutante.subclass:
            return dadosContratadoExecutante.subclass(*args_, **kwargs_)
        else:
            return dadosContratadoExecutante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigonaOperadora(self): return self.codigonaOperadora
    def set_codigonaOperadora(self, codigonaOperadora): self.codigonaOperadora = codigonaOperadora
    def get_nomeContratadoExecutante(self): return self.nomeContratadoExecutante
    def set_nomeContratadoExecutante(self, nomeContratadoExecutante): self.nomeContratadoExecutante = nomeContratadoExecutante
    def get_cnesContratadoExecutante(self): return self.cnesContratadoExecutante
    def set_cnesContratadoExecutante(self, cnesContratadoExecutante): self.cnesContratadoExecutante = cnesContratadoExecutante
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codigonaOperadora is not None or
            self.nomeContratadoExecutante is not None or
            self.cnesContratadoExecutante is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosContratadoExecutante', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosContratadoExecutante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosContratadoExecutante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosContratadoExecutante'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosContratadoExecutante', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigonaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigonaOperadora>%s</%scodigonaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigonaOperadora).encode(ExternalEncoding), input_name='codigonaOperadora'), namespace_, eol_))
        if self.nomeContratadoExecutante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeContratadoExecutante>%s</%snomeContratadoExecutante>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeContratadoExecutante).encode(ExternalEncoding), input_name='nomeContratadoExecutante'), namespace_, eol_))
        if self.cnesContratadoExecutante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnesContratadoExecutante>%s</%scnesContratadoExecutante>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnesContratadoExecutante).encode(ExternalEncoding), input_name='cnesContratadoExecutante'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosContratadoExecutante'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigonaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('codigonaOperadora=%s,\n' % quote_python(self.codigonaOperadora).encode(ExternalEncoding))
        if self.nomeContratadoExecutante is not None:
            showIndent(outfile, level)
            outfile.write('nomeContratadoExecutante=%s,\n' % quote_python(self.nomeContratadoExecutante).encode(ExternalEncoding))
        if self.cnesContratadoExecutante is not None:
            showIndent(outfile, level)
            outfile.write('cnesContratadoExecutante=%s,\n' % quote_python(self.cnesContratadoExecutante).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigonaOperadora':
            codigonaOperadora_ = child_.text
            codigonaOperadora_ = self.gds_validate_string(codigonaOperadora_, node, 'codigonaOperadora')
            self.codigonaOperadora = codigonaOperadora_
            # validate type st_texto14
            self.validate_st_texto14(self.codigonaOperadora)
        elif nodeName_ == 'nomeContratadoExecutante':
            nomeContratadoExecutante_ = child_.text
            nomeContratadoExecutante_ = self.gds_validate_string(nomeContratadoExecutante_, node, 'nomeContratadoExecutante')
            self.nomeContratadoExecutante = nomeContratadoExecutante_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeContratadoExecutante)
        elif nodeName_ == 'cnesContratadoExecutante':
            cnesContratadoExecutante_ = child_.text
            cnesContratadoExecutante_ = self.gds_validate_string(cnesContratadoExecutante_, node, 'cnesContratadoExecutante')
            self.cnesContratadoExecutante = cnesContratadoExecutante_
            # validate type st_texto7
            self.validate_st_texto7(self.cnesContratadoExecutante)
# end class dadosContratadoExecutante


class ctm_internacaoDados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, caraterAtendimento=None, tipoFaturamento=None, dataInicioFaturamento=None, horaInicioFaturamento=None, dataFinalFaturamento=None, horaFinalFaturamento=None, tipoInternacao=None, regimeInternacao=None, declaracoes=None):
        self.original_tagname_ = None
        self.caraterAtendimento = caraterAtendimento
        self.validate_dm_caraterAtendimento(self.caraterAtendimento)
        self.tipoFaturamento = tipoFaturamento
        self.validate_dm_tipoFaturamento(self.tipoFaturamento)
        if isinstance(dataInicioFaturamento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataInicioFaturamento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataInicioFaturamento
        self.dataInicioFaturamento = initvalue_
        if isinstance(horaInicioFaturamento, basestring):
            initvalue_ = datetime_.datetime.strptime(horaInicioFaturamento, '%H:%M:%S').time()
        else:
            initvalue_ = horaInicioFaturamento
        self.horaInicioFaturamento = initvalue_
        if isinstance(dataFinalFaturamento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataFinalFaturamento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataFinalFaturamento
        self.dataFinalFaturamento = initvalue_
        if isinstance(horaFinalFaturamento, basestring):
            initvalue_ = datetime_.datetime.strptime(horaFinalFaturamento, '%H:%M:%S').time()
        else:
            initvalue_ = horaFinalFaturamento
        self.horaFinalFaturamento = initvalue_
        self.tipoInternacao = tipoInternacao
        self.validate_dm_tipoInternacao(self.tipoInternacao)
        self.regimeInternacao = regimeInternacao
        self.validate_dm_regimeInternacao(self.regimeInternacao)
        if declaracoes is None:
            self.declaracoes = []
        else:
            self.declaracoes = declaracoes
    def factory(*args_, **kwargs_):
        if ctm_internacaoDados.subclass:
            return ctm_internacaoDados.subclass(*args_, **kwargs_)
        else:
            return ctm_internacaoDados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_caraterAtendimento(self): return self.caraterAtendimento
    def set_caraterAtendimento(self, caraterAtendimento): self.caraterAtendimento = caraterAtendimento
    def get_tipoFaturamento(self): return self.tipoFaturamento
    def set_tipoFaturamento(self, tipoFaturamento): self.tipoFaturamento = tipoFaturamento
    def get_dataInicioFaturamento(self): return self.dataInicioFaturamento
    def set_dataInicioFaturamento(self, dataInicioFaturamento): self.dataInicioFaturamento = dataInicioFaturamento
    def get_horaInicioFaturamento(self): return self.horaInicioFaturamento
    def set_horaInicioFaturamento(self, horaInicioFaturamento): self.horaInicioFaturamento = horaInicioFaturamento
    def get_dataFinalFaturamento(self): return self.dataFinalFaturamento
    def set_dataFinalFaturamento(self, dataFinalFaturamento): self.dataFinalFaturamento = dataFinalFaturamento
    def get_horaFinalFaturamento(self): return self.horaFinalFaturamento
    def set_horaFinalFaturamento(self, horaFinalFaturamento): self.horaFinalFaturamento = horaFinalFaturamento
    def get_tipoInternacao(self): return self.tipoInternacao
    def set_tipoInternacao(self, tipoInternacao): self.tipoInternacao = tipoInternacao
    def get_regimeInternacao(self): return self.regimeInternacao
    def set_regimeInternacao(self, regimeInternacao): self.regimeInternacao = regimeInternacao
    def get_declaracoes(self): return self.declaracoes
    def set_declaracoes(self, declaracoes): self.declaracoes = declaracoes
    def add_declaracoes(self, value): self.declaracoes.append(value)
    def insert_declaracoes_at(self, index, value): self.declaracoes.insert(index, value)
    def replace_declaracoes_at(self, index, value): self.declaracoes[index] = value
    def validate_dm_caraterAtendimento(self, value):
        # Validate type dm_caraterAtendimento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_caraterAtendimento' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoFaturamento(self, value):
        # Validate type dm_tipoFaturamento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoFaturamento' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_hora(self, value):
        # Validate type st_hora, a restriction on time.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tipoInternacao(self, value):
        # Validate type dm_tipoInternacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoInternacao' % {"value" : value.encode("utf-8")} )
    def validate_dm_regimeInternacao(self, value):
        # Validate type dm_regimeInternacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_regimeInternacao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.caraterAtendimento is not None or
            self.tipoFaturamento is not None or
            self.dataInicioFaturamento is not None or
            self.horaInicioFaturamento is not None or
            self.dataFinalFaturamento is not None or
            self.horaFinalFaturamento is not None or
            self.tipoInternacao is not None or
            self.regimeInternacao is not None or
            self.declaracoes
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_internacaoDados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_internacaoDados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_internacaoDados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_internacaoDados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_internacaoDados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.caraterAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scaraterAtendimento>%s</%scaraterAtendimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.caraterAtendimento).encode(ExternalEncoding), input_name='caraterAtendimento'), namespace_, eol_))
        if self.tipoFaturamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoFaturamento>%s</%stipoFaturamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoFaturamento).encode(ExternalEncoding), input_name='tipoFaturamento'), namespace_, eol_))
        if self.dataInicioFaturamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataInicioFaturamento>%s</%sdataInicioFaturamento>%s' % (namespace_, self.gds_format_date(self.dataInicioFaturamento, input_name='dataInicioFaturamento'), namespace_, eol_))
        if self.horaInicioFaturamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraInicioFaturamento>%s</%shoraInicioFaturamento>%s' % (namespace_, self.gds_format_time(self.horaInicioFaturamento, input_name='horaInicioFaturamento'), namespace_, eol_))
        if self.dataFinalFaturamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataFinalFaturamento>%s</%sdataFinalFaturamento>%s' % (namespace_, self.gds_format_date(self.dataFinalFaturamento, input_name='dataFinalFaturamento'), namespace_, eol_))
        if self.horaFinalFaturamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shoraFinalFaturamento>%s</%shoraFinalFaturamento>%s' % (namespace_, self.gds_format_time(self.horaFinalFaturamento, input_name='horaFinalFaturamento'), namespace_, eol_))
        if self.tipoInternacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoInternacao>%s</%stipoInternacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoInternacao).encode(ExternalEncoding), input_name='tipoInternacao'), namespace_, eol_))
        if self.regimeInternacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregimeInternacao>%s</%sregimeInternacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.regimeInternacao).encode(ExternalEncoding), input_name='regimeInternacao'), namespace_, eol_))
        for declaracoes_ in self.declaracoes:
            declaracoes_.export(outfile, level, namespace_, name_='declaracoes', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_internacaoDados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.caraterAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('caraterAtendimento=%s,\n' % quote_python(self.caraterAtendimento).encode(ExternalEncoding))
        if self.tipoFaturamento is not None:
            showIndent(outfile, level)
            outfile.write('tipoFaturamento=%s,\n' % quote_python(self.tipoFaturamento).encode(ExternalEncoding))
        if self.dataInicioFaturamento is not None:
            showIndent(outfile, level)
            outfile.write('dataInicioFaturamento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataInicioFaturamento, input_name='dataInicioFaturamento'))
        if self.horaInicioFaturamento is not None:
            showIndent(outfile, level)
            outfile.write('horaInicioFaturamento=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaInicioFaturamento, input_name='horaInicioFaturamento'))
        if self.dataFinalFaturamento is not None:
            showIndent(outfile, level)
            outfile.write('dataFinalFaturamento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataFinalFaturamento, input_name='dataFinalFaturamento'))
        if self.horaFinalFaturamento is not None:
            showIndent(outfile, level)
            outfile.write('horaFinalFaturamento=model_.GeneratedsSuper.gds_parse_time("%s"),\n' % self.gds_format_time(self.horaFinalFaturamento, input_name='horaFinalFaturamento'))
        if self.tipoInternacao is not None:
            showIndent(outfile, level)
            outfile.write('tipoInternacao=%s,\n' % quote_python(self.tipoInternacao).encode(ExternalEncoding))
        if self.regimeInternacao is not None:
            showIndent(outfile, level)
            outfile.write('regimeInternacao=%s,\n' % quote_python(self.regimeInternacao).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('declaracoes=[\n')
        level += 1
        for declaracoes_ in self.declaracoes:
            showIndent(outfile, level)
            outfile.write('model_.declaracoes(\n')
            declaracoes_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'caraterAtendimento':
            caraterAtendimento_ = child_.text
            caraterAtendimento_ = self.gds_validate_string(caraterAtendimento_, node, 'caraterAtendimento')
            self.caraterAtendimento = caraterAtendimento_
            # validate type dm_caraterAtendimento
            self.validate_dm_caraterAtendimento(self.caraterAtendimento)
        elif nodeName_ == 'tipoFaturamento':
            tipoFaturamento_ = child_.text
            tipoFaturamento_ = self.gds_validate_string(tipoFaturamento_, node, 'tipoFaturamento')
            self.tipoFaturamento = tipoFaturamento_
            # validate type dm_tipoFaturamento
            self.validate_dm_tipoFaturamento(self.tipoFaturamento)
        elif nodeName_ == 'dataInicioFaturamento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataInicioFaturamento = dval_
            # validate type st_data
            self.validate_st_data(self.dataInicioFaturamento)
        elif nodeName_ == 'horaInicioFaturamento':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaInicioFaturamento = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaInicioFaturamento)
        elif nodeName_ == 'dataFinalFaturamento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataFinalFaturamento = dval_
            # validate type st_data
            self.validate_st_data(self.dataFinalFaturamento)
        elif nodeName_ == 'horaFinalFaturamento':
            sval_ = child_.text
            dval_ = self.gds_parse_time(sval_)
            self.horaFinalFaturamento = dval_
            # validate type st_hora
            self.validate_st_hora(self.horaFinalFaturamento)
        elif nodeName_ == 'tipoInternacao':
            tipoInternacao_ = child_.text
            tipoInternacao_ = self.gds_validate_string(tipoInternacao_, node, 'tipoInternacao')
            self.tipoInternacao = tipoInternacao_
            # validate type dm_tipoInternacao
            self.validate_dm_tipoInternacao(self.tipoInternacao)
        elif nodeName_ == 'regimeInternacao':
            regimeInternacao_ = child_.text
            regimeInternacao_ = self.gds_validate_string(regimeInternacao_, node, 'regimeInternacao')
            self.regimeInternacao = regimeInternacao_
            # validate type dm_regimeInternacao
            self.validate_dm_regimeInternacao(self.regimeInternacao)
        elif nodeName_ == 'declaracoes':
            obj_ = declaracoes.factory()
            obj_.build(child_)
            self.declaracoes.append(obj_)
            obj_.original_tagname_ = 'declaracoes'
# end class ctm_internacaoDados


class declaracoes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, declaracaoNascido=None, diagnosticoObito=None, declaracaoObito=None, indicadorDORN=None):
        self.original_tagname_ = None
        self.declaracaoNascido = declaracaoNascido
        self.validate_st_texto11(self.declaracaoNascido)
        self.diagnosticoObito = diagnosticoObito
        self.validate_st_texto4(self.diagnosticoObito)
        self.declaracaoObito = declaracaoObito
        self.validate_st_texto11(self.declaracaoObito)
        self.indicadorDORN = indicadorDORN
        self.validate_dm_simNao(self.indicadorDORN)
    def factory(*args_, **kwargs_):
        if declaracoes.subclass:
            return declaracoes.subclass(*args_, **kwargs_)
        else:
            return declaracoes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_declaracaoNascido(self): return self.declaracaoNascido
    def set_declaracaoNascido(self, declaracaoNascido): self.declaracaoNascido = declaracaoNascido
    def get_diagnosticoObito(self): return self.diagnosticoObito
    def set_diagnosticoObito(self, diagnosticoObito): self.diagnosticoObito = diagnosticoObito
    def get_declaracaoObito(self): return self.declaracaoObito
    def set_declaracaoObito(self, declaracaoObito): self.declaracaoObito = declaracaoObito
    def get_indicadorDORN(self): return self.indicadorDORN
    def set_indicadorDORN(self, indicadorDORN): self.indicadorDORN = indicadorDORN
    def validate_st_texto11(self, value):
        # Validate type st_texto11, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto11' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto11' % {"value" : value.encode("utf-8")} )
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.declaracaoNascido is not None or
            self.diagnosticoObito is not None or
            self.declaracaoObito is not None or
            self.indicadorDORN is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='declaracoes', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='declaracoes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='declaracoes', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='declaracoes'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='declaracoes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.declaracaoNascido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeclaracaoNascido>%s</%sdeclaracaoNascido>%s' % (namespace_, self.gds_format_string(quote_xml(self.declaracaoNascido).encode(ExternalEncoding), input_name='declaracaoNascido'), namespace_, eol_))
        if self.diagnosticoObito is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiagnosticoObito>%s</%sdiagnosticoObito>%s' % (namespace_, self.gds_format_string(quote_xml(self.diagnosticoObito).encode(ExternalEncoding), input_name='diagnosticoObito'), namespace_, eol_))
        if self.declaracaoObito is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdeclaracaoObito>%s</%sdeclaracaoObito>%s' % (namespace_, self.gds_format_string(quote_xml(self.declaracaoObito).encode(ExternalEncoding), input_name='declaracaoObito'), namespace_, eol_))
        if self.indicadorDORN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicadorDORN>%s</%sindicadorDORN>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicadorDORN).encode(ExternalEncoding), input_name='indicadorDORN'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='declaracoes'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.declaracaoNascido is not None:
            showIndent(outfile, level)
            outfile.write('declaracaoNascido=%s,\n' % quote_python(self.declaracaoNascido).encode(ExternalEncoding))
        if self.diagnosticoObito is not None:
            showIndent(outfile, level)
            outfile.write('diagnosticoObito=%s,\n' % quote_python(self.diagnosticoObito).encode(ExternalEncoding))
        if self.declaracaoObito is not None:
            showIndent(outfile, level)
            outfile.write('declaracaoObito=%s,\n' % quote_python(self.declaracaoObito).encode(ExternalEncoding))
        if self.indicadorDORN is not None:
            showIndent(outfile, level)
            outfile.write('indicadorDORN=%s,\n' % quote_python(self.indicadorDORN).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'declaracaoNascido':
            declaracaoNascido_ = child_.text
            declaracaoNascido_ = self.gds_validate_string(declaracaoNascido_, node, 'declaracaoNascido')
            self.declaracaoNascido = declaracaoNascido_
            # validate type st_texto11
            self.validate_st_texto11(self.declaracaoNascido)
        elif nodeName_ == 'diagnosticoObito':
            diagnosticoObito_ = child_.text
            diagnosticoObito_ = self.gds_validate_string(diagnosticoObito_, node, 'diagnosticoObito')
            self.diagnosticoObito = diagnosticoObito_
            # validate type st_texto4
            self.validate_st_texto4(self.diagnosticoObito)
        elif nodeName_ == 'declaracaoObito':
            declaracaoObito_ = child_.text
            declaracaoObito_ = self.gds_validate_string(declaracaoObito_, node, 'declaracaoObito')
            self.declaracaoObito = declaracaoObito_
            # validate type st_texto11
            self.validate_st_texto11(self.declaracaoObito)
        elif nodeName_ == 'indicadorDORN':
            indicadorDORN_ = child_.text
            indicadorDORN_ = self.gds_validate_string(indicadorDORN_, node, 'indicadorDORN')
            self.indicadorDORN = indicadorDORN_
            # validate type dm_simNao
            self.validate_dm_simNao(self.indicadorDORN)
# end class declaracoes


class ctm_internacaoDadosSaida(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, diagnostico=None, indicadorAcidente=None, motivoEncerramento=None):
        self.original_tagname_ = None
        if diagnostico is None:
            self.diagnostico = []
        else:
            self.diagnostico = diagnostico
        self.indicadorAcidente = indicadorAcidente
        self.validate_dm_indicadorAcidente(self.indicadorAcidente)
        self.motivoEncerramento = motivoEncerramento
        self.validate_dm_motivoSaida(self.motivoEncerramento)
    def factory(*args_, **kwargs_):
        if ctm_internacaoDadosSaida.subclass:
            return ctm_internacaoDadosSaida.subclass(*args_, **kwargs_)
        else:
            return ctm_internacaoDadosSaida(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_diagnostico(self): return self.diagnostico
    def set_diagnostico(self, diagnostico): self.diagnostico = diagnostico
    def add_diagnostico(self, value): self.diagnostico.append(value)
    def insert_diagnostico_at(self, index, value): self.diagnostico.insert(index, value)
    def replace_diagnostico_at(self, index, value): self.diagnostico[index] = value
    def get_indicadorAcidente(self): return self.indicadorAcidente
    def set_indicadorAcidente(self, indicadorAcidente): self.indicadorAcidente = indicadorAcidente
    def get_motivoEncerramento(self): return self.motivoEncerramento
    def set_motivoEncerramento(self, motivoEncerramento): self.motivoEncerramento = motivoEncerramento
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_dm_indicadorAcidente(self, value):
        # Validate type dm_indicadorAcidente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '9']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_indicadorAcidente' % {"value" : value.encode("utf-8")} )
    def validate_dm_motivoSaida(self, value):
        # Validate type dm_motivoSaida, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '14', '15', '16', '18', '19', '21', '22', '23', '24', '25', '26', '27', '28', '31', '32', '41', '42', '43', '51', '61', '62', '63', '64', '65', '66', '67']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_motivoSaida' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.diagnostico or
            self.indicadorAcidente is not None or
            self.motivoEncerramento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_internacaoDadosSaida', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_internacaoDadosSaida')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_internacaoDadosSaida', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_internacaoDadosSaida'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_internacaoDadosSaida', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for diagnostico_ in self.diagnostico:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiagnostico>%s</%sdiagnostico>%s' % (namespace_, self.gds_format_string(quote_xml(diagnostico_).encode(ExternalEncoding), input_name='diagnostico'), namespace_, eol_))
        if self.indicadorAcidente is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicadorAcidente>%s</%sindicadorAcidente>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicadorAcidente).encode(ExternalEncoding), input_name='indicadorAcidente'), namespace_, eol_))
        if self.motivoEncerramento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smotivoEncerramento>%s</%smotivoEncerramento>%s' % (namespace_, self.gds_format_string(quote_xml(self.motivoEncerramento).encode(ExternalEncoding), input_name='motivoEncerramento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_internacaoDadosSaida'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('diagnostico=[\n')
        level += 1
        for diagnostico_ in self.diagnostico:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(diagnostico_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.indicadorAcidente is not None:
            showIndent(outfile, level)
            outfile.write('indicadorAcidente=%s,\n' % quote_python(self.indicadorAcidente).encode(ExternalEncoding))
        if self.motivoEncerramento is not None:
            showIndent(outfile, level)
            outfile.write('motivoEncerramento=%s,\n' % quote_python(self.motivoEncerramento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'diagnostico':
            diagnostico_ = child_.text
            diagnostico_ = self.gds_validate_string(diagnostico_, node, 'diagnostico')
            self.diagnostico.append(diagnostico_)
            # validate type st_texto4
            self.validate_st_texto4(self.diagnostico[-1])
        elif nodeName_ == 'indicadorAcidente':
            indicadorAcidente_ = child_.text
            indicadorAcidente_ = self.gds_validate_string(indicadorAcidente_, node, 'indicadorAcidente')
            self.indicadorAcidente = indicadorAcidente_
            # validate type dm_indicadorAcidente
            self.validate_dm_indicadorAcidente(self.indicadorAcidente)
        elif nodeName_ == 'motivoEncerramento':
            motivoEncerramento_ = child_.text
            motivoEncerramento_ = self.gds_validate_string(motivoEncerramento_, node, 'motivoEncerramento')
            self.motivoEncerramento = motivoEncerramento_
            # validate type dm_motivoSaida
            self.validate_dm_motivoSaida(self.motivoEncerramento)
# end class ctm_internacaoDadosSaida


class ctm_internacaoResumoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoGuia=None, numeroGuiaSolicitacaoInternacao=None, dadosAutorizacao=None, dadosBeneficiario=None, dadosExecutante=None, dadosInternacao=None, dadosSaidaInternacao=None, procedimentosExecutados=None, valorTotal=None, outrasDespesas=None, observacao=None, assinaturaDigitalGuia=None):
        self.original_tagname_ = None
        self.cabecalhoGuia = cabecalhoGuia
        self.numeroGuiaSolicitacaoInternacao = numeroGuiaSolicitacaoInternacao
        self.validate_st_texto20(self.numeroGuiaSolicitacaoInternacao)
        self.dadosAutorizacao = dadosAutorizacao
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosExecutante = dadosExecutante
        self.dadosInternacao = dadosInternacao
        self.dadosSaidaInternacao = dadosSaidaInternacao
        self.procedimentosExecutados = procedimentosExecutados
        self.valorTotal = valorTotal
        self.outrasDespesas = outrasDespesas
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def factory(*args_, **kwargs_):
        if ctm_internacaoResumoGuia.subclass:
            return ctm_internacaoResumoGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_internacaoResumoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoGuia(self): return self.cabecalhoGuia
    def set_cabecalhoGuia(self, cabecalhoGuia): self.cabecalhoGuia = cabecalhoGuia
    def get_numeroGuiaSolicitacaoInternacao(self): return self.numeroGuiaSolicitacaoInternacao
    def set_numeroGuiaSolicitacaoInternacao(self, numeroGuiaSolicitacaoInternacao): self.numeroGuiaSolicitacaoInternacao = numeroGuiaSolicitacaoInternacao
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosExecutante(self): return self.dadosExecutante
    def set_dadosExecutante(self, dadosExecutante): self.dadosExecutante = dadosExecutante
    def get_dadosInternacao(self): return self.dadosInternacao
    def set_dadosInternacao(self, dadosInternacao): self.dadosInternacao = dadosInternacao
    def get_dadosSaidaInternacao(self): return self.dadosSaidaInternacao
    def set_dadosSaidaInternacao(self, dadosSaidaInternacao): self.dadosSaidaInternacao = dadosSaidaInternacao
    def get_procedimentosExecutados(self): return self.procedimentosExecutados
    def set_procedimentosExecutados(self, procedimentosExecutados): self.procedimentosExecutados = procedimentosExecutados
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_outrasDespesas(self): return self.outrasDespesas
    def set_outrasDespesas(self, outrasDespesas): self.outrasDespesas = outrasDespesas
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_assinaturaDigitalGuia(self): return self.assinaturaDigitalGuia
    def set_assinaturaDigitalGuia(self, assinaturaDigitalGuia): self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoGuia is not None or
            self.numeroGuiaSolicitacaoInternacao is not None or
            self.dadosAutorizacao is not None or
            self.dadosBeneficiario is not None or
            self.dadosExecutante is not None or
            self.dadosInternacao is not None or
            self.dadosSaidaInternacao is not None or
            self.procedimentosExecutados is not None or
            self.valorTotal is not None or
            self.outrasDespesas is not None or
            self.observacao is not None or
            self.assinaturaDigitalGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_internacaoResumoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_internacaoResumoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_internacaoResumoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_internacaoResumoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_internacaoResumoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoGuia is not None:
            self.cabecalhoGuia.export(outfile, level, namespace_, name_='cabecalhoGuia', pretty_print=pretty_print)
        if self.numeroGuiaSolicitacaoInternacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaSolicitacaoInternacao>%s</%snumeroGuiaSolicitacaoInternacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaSolicitacaoInternacao).encode(ExternalEncoding), input_name='numeroGuiaSolicitacaoInternacao'), namespace_, eol_))
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosExecutante is not None:
            self.dadosExecutante.export(outfile, level, namespace_, name_='dadosExecutante', pretty_print=pretty_print)
        if self.dadosInternacao is not None:
            self.dadosInternacao.export(outfile, level, namespace_, name_='dadosInternacao', pretty_print=pretty_print)
        if self.dadosSaidaInternacao is not None:
            self.dadosSaidaInternacao.export(outfile, level, namespace_, name_='dadosSaidaInternacao', pretty_print=pretty_print)
        if self.procedimentosExecutados is not None:
            self.procedimentosExecutados.export(outfile, level, namespace_, name_='procedimentosExecutados', pretty_print=pretty_print)
        if self.valorTotal is not None:
            self.valorTotal.export(outfile, level, namespace_, name_='valorTotal', pretty_print=pretty_print)
        if self.outrasDespesas is not None:
            self.outrasDespesas.export(outfile, level, namespace_, name_='outrasDespesas', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.assinaturaDigitalGuia is not None:
            self.assinaturaDigitalGuia.export(outfile, level, namespace_, name_='assinaturaDigitalGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_internacaoResumoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoGuia is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoGuia=model_.ct_guiaCabecalho(\n')
            self.cabecalhoGuia.exportLiteral(outfile, level, name_='cabecalhoGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroGuiaSolicitacaoInternacao is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaSolicitacaoInternacao=%s,\n' % quote_python(self.numeroGuiaSolicitacaoInternacao).encode(ExternalEncoding))
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoInternacao(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosExecutante is not None:
            showIndent(outfile, level)
            outfile.write('dadosExecutante=model_.dadosExecutante(\n')
            self.dadosExecutante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosInternacao=model_.ctm_internacaoDados(\n')
            self.dadosInternacao.exportLiteral(outfile, level, name_='dadosInternacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosSaidaInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosSaidaInternacao=model_.ctm_internacaoDadosSaida(\n')
            self.dadosSaidaInternacao.exportLiteral(outfile, level, name_='dadosSaidaInternacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosExecutados is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosExecutados=model_.procedimentosExecutados(\n')
            self.procedimentosExecutados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=model_.ct_guiaValorTotal(\n')
            self.valorTotal.exportLiteral(outfile, level, name_='valorTotal')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.outrasDespesas is not None:
            showIndent(outfile, level)
            outfile.write('outrasDespesas=model_.ct_outrasDespesas(\n')
            self.outrasDespesas.exportLiteral(outfile, level, name_='outrasDespesas')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.assinaturaDigitalGuia is not None:
            showIndent(outfile, level)
            outfile.write('assinaturaDigitalGuia=model_.assinaturaDigital(\n')
            self.assinaturaDigitalGuia.exportLiteral(outfile, level, name_='assinaturaDigitalGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoGuia':
            class_obj_ = self.get_class_obj_(child_, ct_guiaCabecalho)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.cabecalhoGuia = obj_
            obj_.original_tagname_ = 'cabecalhoGuia'
        elif nodeName_ == 'numeroGuiaSolicitacaoInternacao':
            numeroGuiaSolicitacaoInternacao_ = child_.text
            numeroGuiaSolicitacaoInternacao_ = self.gds_validate_string(numeroGuiaSolicitacaoInternacao_, node, 'numeroGuiaSolicitacaoInternacao')
            self.numeroGuiaSolicitacaoInternacao = numeroGuiaSolicitacaoInternacao_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaSolicitacaoInternacao)
        elif nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoInternacao.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosExecutante':
            obj_ = dadosExecutante.factory()
            obj_.build(child_)
            self.dadosExecutante = obj_
            obj_.original_tagname_ = 'dadosExecutante'
        elif nodeName_ == 'dadosInternacao':
            obj_ = ctm_internacaoDados.factory()
            obj_.build(child_)
            self.dadosInternacao = obj_
            obj_.original_tagname_ = 'dadosInternacao'
        elif nodeName_ == 'dadosSaidaInternacao':
            obj_ = ctm_internacaoDadosSaida.factory()
            obj_.build(child_)
            self.dadosSaidaInternacao = obj_
            obj_.original_tagname_ = 'dadosSaidaInternacao'
        elif nodeName_ == 'procedimentosExecutados':
            obj_ = procedimentosExecutados.factory()
            obj_.build(child_)
            self.procedimentosExecutados = obj_
            obj_.original_tagname_ = 'procedimentosExecutados'
        elif nodeName_ == 'valorTotal':
            obj_ = ct_guiaValorTotal.factory()
            obj_.build(child_)
            self.valorTotal = obj_
            obj_.original_tagname_ = 'valorTotal'
        elif nodeName_ == 'outrasDespesas':
            obj_ = ct_outrasDespesas.factory()
            obj_.build(child_)
            self.outrasDespesas = obj_
            obj_.original_tagname_ = 'outrasDespesas'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'assinaturaDigitalGuia':
            obj_ = assinaturaDigital.factory()
            obj_.build(child_)
            self.assinaturaDigitalGuia = obj_
            obj_.original_tagname_ = 'assinaturaDigitalGuia'
# end class ctm_internacaoResumoGuia


class dadosExecutante(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, contratadoExecutante=None, CNES=None):
        self.original_tagname_ = None
        self.contratadoExecutante = contratadoExecutante
        self.CNES = CNES
        self.validate_st_texto7(self.CNES)
    def factory(*args_, **kwargs_):
        if dadosExecutante.subclass:
            return dadosExecutante.subclass(*args_, **kwargs_)
        else:
            return dadosExecutante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contratadoExecutante(self): return self.contratadoExecutante
    def set_contratadoExecutante(self, contratadoExecutante): self.contratadoExecutante = contratadoExecutante
    def get_CNES(self): return self.CNES
    def set_CNES(self, CNES): self.CNES = CNES
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.contratadoExecutante is not None or
            self.CNES is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosExecutante', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosExecutante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosExecutante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosExecutante'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosExecutante', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contratadoExecutante is not None:
            self.contratadoExecutante.export(outfile, level, namespace_, name_='contratadoExecutante', pretty_print=pretty_print)
        if self.CNES is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCNES>%s</%sCNES>%s' % (namespace_, self.gds_format_string(quote_xml(self.CNES).encode(ExternalEncoding), input_name='CNES'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosExecutante'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.contratadoExecutante is not None:
            showIndent(outfile, level)
            outfile.write('contratadoExecutante=model_.ct_contratadoDados(\n')
            self.contratadoExecutante.exportLiteral(outfile, level, name_='contratadoExecutante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CNES is not None:
            showIndent(outfile, level)
            outfile.write('CNES=%s,\n' % quote_python(self.CNES).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contratadoExecutante':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.contratadoExecutante = obj_
            obj_.original_tagname_ = 'contratadoExecutante'
        elif nodeName_ == 'CNES':
            CNES_ = child_.text
            CNES_ = self.gds_validate_string(CNES_, node, 'CNES')
            self.CNES = CNES_
            # validate type st_texto7
            self.validate_st_texto7(self.CNES)
# end class dadosExecutante


class procedimentosExecutados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimentoExecutado=None):
        self.original_tagname_ = None
        if procedimentoExecutado is None:
            self.procedimentoExecutado = []
        else:
            self.procedimentoExecutado = procedimentoExecutado
    def factory(*args_, **kwargs_):
        if procedimentosExecutados.subclass:
            return procedimentosExecutados.subclass(*args_, **kwargs_)
        else:
            return procedimentosExecutados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimentoExecutado(self): return self.procedimentoExecutado
    def set_procedimentoExecutado(self, procedimentoExecutado): self.procedimentoExecutado = procedimentoExecutado
    def add_procedimentoExecutado(self, value): self.procedimentoExecutado.append(value)
    def insert_procedimentoExecutado_at(self, index, value): self.procedimentoExecutado.insert(index, value)
    def replace_procedimentoExecutado_at(self, index, value): self.procedimentoExecutado[index] = value
    def hasContent_(self):
        if (
            self.procedimentoExecutado
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentosExecutados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentosExecutados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentosExecutados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentosExecutados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentosExecutados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for procedimentoExecutado_ in self.procedimentoExecutado:
            procedimentoExecutado_.export(outfile, level, namespace_, name_='procedimentoExecutado', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='procedimentosExecutados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('procedimentoExecutado=[\n')
        level += 1
        for procedimentoExecutado_ in self.procedimentoExecutado:
            showIndent(outfile, level)
            outfile.write('model_.ct_procedimentoExecutadoInt(\n')
            procedimentoExecutado_.exportLiteral(outfile, level, name_='ct_procedimentoExecutadoInt')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimentoExecutado':
            obj_ = ct_procedimentoExecutadoInt.factory()
            obj_.build(child_)
            self.procedimentoExecutado.append(obj_)
            obj_.original_tagname_ = 'procedimentoExecutado'
# end class procedimentosExecutados


class ctm_internacaoSolicitacaoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaPrestador=None, dadosBeneficiario=None, identificacaoSolicitante=None, dadosHospitalSolicitado=None, dadosInternacao=None, hipotesesDiagnosticas=None, procedimentosSolicitados=None, dataSolicitacao=None, observacao=None, anexoClinico=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.dadosBeneficiario = dadosBeneficiario
        self.identificacaoSolicitante = identificacaoSolicitante
        self.dadosHospitalSolicitado = dadosHospitalSolicitado
        self.dadosInternacao = dadosInternacao
        self.hipotesesDiagnosticas = hipotesesDiagnosticas
        if procedimentosSolicitados is None:
            self.procedimentosSolicitados = []
        else:
            self.procedimentosSolicitados = procedimentosSolicitados
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
        self.observacao = observacao
        self.validate_st_texto1000(self.observacao)
        self.anexoClinico = anexoClinico
    def factory(*args_, **kwargs_):
        if ctm_internacaoSolicitacaoGuia.subclass:
            return ctm_internacaoSolicitacaoGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_internacaoSolicitacaoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_identificacaoSolicitante(self): return self.identificacaoSolicitante
    def set_identificacaoSolicitante(self, identificacaoSolicitante): self.identificacaoSolicitante = identificacaoSolicitante
    def get_dadosHospitalSolicitado(self): return self.dadosHospitalSolicitado
    def set_dadosHospitalSolicitado(self, dadosHospitalSolicitado): self.dadosHospitalSolicitado = dadosHospitalSolicitado
    def get_dadosInternacao(self): return self.dadosInternacao
    def set_dadosInternacao(self, dadosInternacao): self.dadosInternacao = dadosInternacao
    def get_hipotesesDiagnosticas(self): return self.hipotesesDiagnosticas
    def set_hipotesesDiagnosticas(self, hipotesesDiagnosticas): self.hipotesesDiagnosticas = hipotesesDiagnosticas
    def get_procedimentosSolicitados(self): return self.procedimentosSolicitados
    def set_procedimentosSolicitados(self, procedimentosSolicitados): self.procedimentosSolicitados = procedimentosSolicitados
    def add_procedimentosSolicitados(self, value): self.procedimentosSolicitados.append(value)
    def insert_procedimentosSolicitados_at(self, index, value): self.procedimentosSolicitados.insert(index, value)
    def replace_procedimentosSolicitados_at(self, index, value): self.procedimentosSolicitados[index] = value
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_anexoClinico(self): return self.anexoClinico
    def set_anexoClinico(self, anexoClinico): self.anexoClinico = anexoClinico
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto1000(self, value):
        # Validate type st_texto1000, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 1000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto1000' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaPrestador is not None or
            self.dadosBeneficiario is not None or
            self.identificacaoSolicitante is not None or
            self.dadosHospitalSolicitado is not None or
            self.dadosInternacao is not None or
            self.hipotesesDiagnosticas is not None or
            self.procedimentosSolicitados or
            self.dataSolicitacao is not None or
            self.observacao is not None or
            self.anexoClinico is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_internacaoSolicitacaoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_internacaoSolicitacaoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_internacaoSolicitacaoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_internacaoSolicitacaoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_internacaoSolicitacaoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.identificacaoSolicitante is not None:
            self.identificacaoSolicitante.export(outfile, level, namespace_, name_='identificacaoSolicitante', pretty_print=pretty_print)
        if self.dadosHospitalSolicitado is not None:
            self.dadosHospitalSolicitado.export(outfile, level, namespace_, name_='dadosHospitalSolicitado', pretty_print=pretty_print)
        if self.dadosInternacao is not None:
            self.dadosInternacao.export(outfile, level, namespace_, name_='dadosInternacao', pretty_print=pretty_print)
        if self.hipotesesDiagnosticas is not None:
            self.hipotesesDiagnosticas.export(outfile, level, namespace_, name_='hipotesesDiagnosticas', pretty_print=pretty_print)
        for procedimentosSolicitados_ in self.procedimentosSolicitados:
            procedimentosSolicitados_.export(outfile, level, namespace_, name_='procedimentosSolicitados', pretty_print=pretty_print)
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.anexoClinico is not None:
            self.anexoClinico.export(outfile, level, namespace_, name_='anexoClinico', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_internacaoSolicitacaoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.identificacaoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('identificacaoSolicitante=model_.identificacaoSolicitante(\n')
            self.identificacaoSolicitante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosHospitalSolicitado is not None:
            showIndent(outfile, level)
            outfile.write('dadosHospitalSolicitado=model_.dadosHospitalSolicitado(\n')
            self.dadosHospitalSolicitado.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosInternacao=model_.dadosInternacao(\n')
            self.dadosInternacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.hipotesesDiagnosticas is not None:
            showIndent(outfile, level)
            outfile.write('hipotesesDiagnosticas=model_.hipotesesDiagnosticas(\n')
            self.hipotesesDiagnosticas.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('procedimentosSolicitados=[\n')
        level += 1
        for procedimentosSolicitados_ in self.procedimentosSolicitados:
            showIndent(outfile, level)
            outfile.write('model_.procedimentosSolicitados(\n')
            procedimentosSolicitados_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.anexoClinico is not None:
            showIndent(outfile, level)
            outfile.write('anexoClinico=model_.anexoClinico(\n')
            self.anexoClinico.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'identificacaoSolicitante':
            obj_ = identificacaoSolicitante.factory()
            obj_.build(child_)
            self.identificacaoSolicitante = obj_
            obj_.original_tagname_ = 'identificacaoSolicitante'
        elif nodeName_ == 'dadosHospitalSolicitado':
            obj_ = dadosHospitalSolicitado.factory()
            obj_.build(child_)
            self.dadosHospitalSolicitado = obj_
            obj_.original_tagname_ = 'dadosHospitalSolicitado'
        elif nodeName_ == 'dadosInternacao':
            obj_ = dadosInternacao.factory()
            obj_.build(child_)
            self.dadosInternacao = obj_
            obj_.original_tagname_ = 'dadosInternacao'
        elif nodeName_ == 'hipotesesDiagnosticas':
            obj_ = hipotesesDiagnosticas.factory()
            obj_.build(child_)
            self.hipotesesDiagnosticas = obj_
            obj_.original_tagname_ = 'hipotesesDiagnosticas'
        elif nodeName_ == 'procedimentosSolicitados':
            obj_ = procedimentosSolicitados.factory()
            obj_.build(child_)
            self.procedimentosSolicitados.append(obj_)
            obj_.original_tagname_ = 'procedimentosSolicitados'
        elif nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto1000
            self.validate_st_texto1000(self.observacao)
        elif nodeName_ == 'anexoClinico':
            obj_ = anexoClinico.factory()
            obj_.build(child_)
            self.anexoClinico = obj_
            obj_.original_tagname_ = 'anexoClinico'
# end class ctm_internacaoSolicitacaoGuia


class identificacaoSolicitante(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosDoContratado=None, dadosProfissionalContratado=None):
        self.original_tagname_ = None
        self.dadosDoContratado = dadosDoContratado
        self.dadosProfissionalContratado = dadosProfissionalContratado
    def factory(*args_, **kwargs_):
        if identificacaoSolicitante.subclass:
            return identificacaoSolicitante.subclass(*args_, **kwargs_)
        else:
            return identificacaoSolicitante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosDoContratado(self): return self.dadosDoContratado
    def set_dadosDoContratado(self, dadosDoContratado): self.dadosDoContratado = dadosDoContratado
    def get_dadosProfissionalContratado(self): return self.dadosProfissionalContratado
    def set_dadosProfissionalContratado(self, dadosProfissionalContratado): self.dadosProfissionalContratado = dadosProfissionalContratado
    def hasContent_(self):
        if (
            self.dadosDoContratado is not None or
            self.dadosProfissionalContratado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='identificacaoSolicitante', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identificacaoSolicitante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='identificacaoSolicitante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='identificacaoSolicitante'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='identificacaoSolicitante', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosDoContratado is not None:
            self.dadosDoContratado.export(outfile, level, namespace_, name_='dadosDoContratado', pretty_print=pretty_print)
        if self.dadosProfissionalContratado is not None:
            self.dadosProfissionalContratado.export(outfile, level, namespace_, name_='dadosProfissionalContratado', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='identificacaoSolicitante'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosDoContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosDoContratado=model_.ct_contratadoDados(\n')
            self.dadosDoContratado.exportLiteral(outfile, level, name_='dadosDoContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosProfissionalContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosProfissionalContratado=model_.ct_contratadoProfissionalDados(\n')
            self.dadosProfissionalContratado.exportLiteral(outfile, level, name_='dadosProfissionalContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosDoContratado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosDoContratado = obj_
            obj_.original_tagname_ = 'dadosDoContratado'
        elif nodeName_ == 'dadosProfissionalContratado':
            obj_ = ct_contratadoProfissionalDados.factory()
            obj_.build(child_)
            self.dadosProfissionalContratado = obj_
            obj_.original_tagname_ = 'dadosProfissionalContratado'
# end class identificacaoSolicitante


class dadosHospitalSolicitado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codigoIndicadonaOperadora=None, nomeContratadoIndicado=None, dataSugeridaInternacao=None):
        self.original_tagname_ = None
        self.codigoIndicadonaOperadora = codigoIndicadonaOperadora
        self.validate_st_texto14(self.codigoIndicadonaOperadora)
        self.nomeContratadoIndicado = nomeContratadoIndicado
        self.validate_st_texto70(self.nomeContratadoIndicado)
        if isinstance(dataSugeridaInternacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSugeridaInternacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSugeridaInternacao
        self.dataSugeridaInternacao = initvalue_
    def factory(*args_, **kwargs_):
        if dadosHospitalSolicitado.subclass:
            return dadosHospitalSolicitado.subclass(*args_, **kwargs_)
        else:
            return dadosHospitalSolicitado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codigoIndicadonaOperadora(self): return self.codigoIndicadonaOperadora
    def set_codigoIndicadonaOperadora(self, codigoIndicadonaOperadora): self.codigoIndicadonaOperadora = codigoIndicadonaOperadora
    def get_nomeContratadoIndicado(self): return self.nomeContratadoIndicado
    def set_nomeContratadoIndicado(self, nomeContratadoIndicado): self.nomeContratadoIndicado = nomeContratadoIndicado
    def get_dataSugeridaInternacao(self): return self.dataSugeridaInternacao
    def set_dataSugeridaInternacao(self, dataSugeridaInternacao): self.dataSugeridaInternacao = dataSugeridaInternacao
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.codigoIndicadonaOperadora is not None or
            self.nomeContratadoIndicado is not None or
            self.dataSugeridaInternacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosHospitalSolicitado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosHospitalSolicitado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosHospitalSolicitado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosHospitalSolicitado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosHospitalSolicitado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codigoIndicadonaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoIndicadonaOperadora>%s</%scodigoIndicadonaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoIndicadonaOperadora).encode(ExternalEncoding), input_name='codigoIndicadonaOperadora'), namespace_, eol_))
        if self.nomeContratadoIndicado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeContratadoIndicado>%s</%snomeContratadoIndicado>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeContratadoIndicado).encode(ExternalEncoding), input_name='nomeContratadoIndicado'), namespace_, eol_))
        if self.dataSugeridaInternacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSugeridaInternacao>%s</%sdataSugeridaInternacao>%s' % (namespace_, self.gds_format_date(self.dataSugeridaInternacao, input_name='dataSugeridaInternacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosHospitalSolicitado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codigoIndicadonaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('codigoIndicadonaOperadora=%s,\n' % quote_python(self.codigoIndicadonaOperadora).encode(ExternalEncoding))
        if self.nomeContratadoIndicado is not None:
            showIndent(outfile, level)
            outfile.write('nomeContratadoIndicado=%s,\n' % quote_python(self.nomeContratadoIndicado).encode(ExternalEncoding))
        if self.dataSugeridaInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSugeridaInternacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSugeridaInternacao, input_name='dataSugeridaInternacao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codigoIndicadonaOperadora':
            codigoIndicadonaOperadora_ = child_.text
            codigoIndicadonaOperadora_ = self.gds_validate_string(codigoIndicadonaOperadora_, node, 'codigoIndicadonaOperadora')
            self.codigoIndicadonaOperadora = codigoIndicadonaOperadora_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoIndicadonaOperadora)
        elif nodeName_ == 'nomeContratadoIndicado':
            nomeContratadoIndicado_ = child_.text
            nomeContratadoIndicado_ = self.gds_validate_string(nomeContratadoIndicado_, node, 'nomeContratadoIndicado')
            self.nomeContratadoIndicado = nomeContratadoIndicado_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeContratadoIndicado)
        elif nodeName_ == 'dataSugeridaInternacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSugeridaInternacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSugeridaInternacao)
# end class dadosHospitalSolicitado


class hipotesesDiagnosticas(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, diagnosticoCID=None, indicadorAcidente=None):
        self.original_tagname_ = None
        if diagnosticoCID is None:
            self.diagnosticoCID = []
        else:
            self.diagnosticoCID = diagnosticoCID
        self.indicadorAcidente = indicadorAcidente
        self.validate_dm_indicadorAcidente(self.indicadorAcidente)
    def factory(*args_, **kwargs_):
        if hipotesesDiagnosticas.subclass:
            return hipotesesDiagnosticas.subclass(*args_, **kwargs_)
        else:
            return hipotesesDiagnosticas(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_diagnosticoCID(self): return self.diagnosticoCID
    def set_diagnosticoCID(self, diagnosticoCID): self.diagnosticoCID = diagnosticoCID
    def add_diagnosticoCID(self, value): self.diagnosticoCID.append(value)
    def insert_diagnosticoCID_at(self, index, value): self.diagnosticoCID.insert(index, value)
    def replace_diagnosticoCID_at(self, index, value): self.diagnosticoCID[index] = value
    def get_indicadorAcidente(self): return self.indicadorAcidente
    def set_indicadorAcidente(self, indicadorAcidente): self.indicadorAcidente = indicadorAcidente
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_dm_indicadorAcidente(self, value):
        # Validate type dm_indicadorAcidente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '9']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_indicadorAcidente' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.diagnosticoCID or
            self.indicadorAcidente is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='hipotesesDiagnosticas', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='hipotesesDiagnosticas')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='hipotesesDiagnosticas', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='hipotesesDiagnosticas'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='hipotesesDiagnosticas', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for diagnosticoCID_ in self.diagnosticoCID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiagnosticoCID>%s</%sdiagnosticoCID>%s' % (namespace_, self.gds_format_string(quote_xml(diagnosticoCID_).encode(ExternalEncoding), input_name='diagnosticoCID'), namespace_, eol_))
        if self.indicadorAcidente is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicadorAcidente>%s</%sindicadorAcidente>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicadorAcidente).encode(ExternalEncoding), input_name='indicadorAcidente'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='hipotesesDiagnosticas'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('diagnosticoCID=[\n')
        level += 1
        for diagnosticoCID_ in self.diagnosticoCID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(diagnosticoCID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.indicadorAcidente is not None:
            showIndent(outfile, level)
            outfile.write('indicadorAcidente=%s,\n' % quote_python(self.indicadorAcidente).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'diagnosticoCID':
            diagnosticoCID_ = child_.text
            diagnosticoCID_ = self.gds_validate_string(diagnosticoCID_, node, 'diagnosticoCID')
            self.diagnosticoCID.append(diagnosticoCID_)
            # validate type st_texto4
            self.validate_st_texto4(self.diagnosticoCID[-1])
        elif nodeName_ == 'indicadorAcidente':
            indicadorAcidente_ = child_.text
            indicadorAcidente_ = self.gds_validate_string(indicadorAcidente_, node, 'indicadorAcidente')
            self.indicadorAcidente = indicadorAcidente_
            # validate type dm_indicadorAcidente
            self.validate_dm_indicadorAcidente(self.indicadorAcidente)
# end class hipotesesDiagnosticas


class anexoClinico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, solicitacaoQuimioterapia=None, solicitacaoRadioterapia=None, solicitacaoOPME=None):
        self.original_tagname_ = None
        self.solicitacaoQuimioterapia = solicitacaoQuimioterapia
        self.solicitacaoRadioterapia = solicitacaoRadioterapia
        self.solicitacaoOPME = solicitacaoOPME
    def factory(*args_, **kwargs_):
        if anexoClinico.subclass:
            return anexoClinico.subclass(*args_, **kwargs_)
        else:
            return anexoClinico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_solicitacaoQuimioterapia(self): return self.solicitacaoQuimioterapia
    def set_solicitacaoQuimioterapia(self, solicitacaoQuimioterapia): self.solicitacaoQuimioterapia = solicitacaoQuimioterapia
    def get_solicitacaoRadioterapia(self): return self.solicitacaoRadioterapia
    def set_solicitacaoRadioterapia(self, solicitacaoRadioterapia): self.solicitacaoRadioterapia = solicitacaoRadioterapia
    def get_solicitacaoOPME(self): return self.solicitacaoOPME
    def set_solicitacaoOPME(self, solicitacaoOPME): self.solicitacaoOPME = solicitacaoOPME
    def hasContent_(self):
        if (
            self.solicitacaoQuimioterapia is not None or
            self.solicitacaoRadioterapia is not None or
            self.solicitacaoOPME is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='anexoClinico', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='anexoClinico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='anexoClinico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='anexoClinico'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='anexoClinico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.solicitacaoQuimioterapia is not None:
            self.solicitacaoQuimioterapia.export(outfile, level, namespace_, name_='solicitacaoQuimioterapia', pretty_print=pretty_print)
        if self.solicitacaoRadioterapia is not None:
            self.solicitacaoRadioterapia.export(outfile, level, namespace_, name_='solicitacaoRadioterapia', pretty_print=pretty_print)
        if self.solicitacaoOPME is not None:
            self.solicitacaoOPME.export(outfile, level, namespace_, name_='solicitacaoOPME', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='anexoClinico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.solicitacaoQuimioterapia is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoQuimioterapia=model_.ctm_anexoSolicitacaoQuimio(\n')
            self.solicitacaoQuimioterapia.exportLiteral(outfile, level, name_='solicitacaoQuimioterapia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoRadioterapia is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoRadioterapia=model_.ctm_anexoSolicitacaoRadio(\n')
            self.solicitacaoRadioterapia.exportLiteral(outfile, level, name_='solicitacaoRadioterapia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoOPME is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoOPME=model_.ctm_anexoSolicitacaoOPME(\n')
            self.solicitacaoOPME.exportLiteral(outfile, level, name_='solicitacaoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'solicitacaoQuimioterapia':
            obj_ = ctm_anexoSolicitacaoQuimio.factory()
            obj_.build(child_)
            self.solicitacaoQuimioterapia = obj_
            obj_.original_tagname_ = 'solicitacaoQuimioterapia'
        elif nodeName_ == 'solicitacaoRadioterapia':
            obj_ = ctm_anexoSolicitacaoRadio.factory()
            obj_.build(child_)
            self.solicitacaoRadioterapia = obj_
            obj_.original_tagname_ = 'solicitacaoRadioterapia'
        elif nodeName_ == 'solicitacaoOPME':
            obj_ = ctm_anexoSolicitacaoOPME.factory()
            obj_.build(child_)
            self.solicitacaoOPME = obj_
            obj_.original_tagname_ = 'solicitacaoOPME'
# end class anexoClinico


class ctm_prorrogacaoSolicitacaoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaPrestador=None, nrGuiaReferenciada=None, dadosBeneficiario=None, dadosContratadoSolicitante=None, dadosProfissionalSolicitante=None, dadosInternacao=None, procedimentosAdicionais=None, anexoClinicoProrrogacao=None, observacao=None, dataSolicitacao=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.nrGuiaReferenciada = nrGuiaReferenciada
        self.validate_st_texto20(self.nrGuiaReferenciada)
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosContratadoSolicitante = dadosContratadoSolicitante
        self.dadosProfissionalSolicitante = dadosProfissionalSolicitante
        self.dadosInternacao = dadosInternacao
        if procedimentosAdicionais is None:
            self.procedimentosAdicionais = []
        else:
            self.procedimentosAdicionais = procedimentosAdicionais
        self.anexoClinicoProrrogacao = anexoClinicoProrrogacao
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
    def factory(*args_, **kwargs_):
        if ctm_prorrogacaoSolicitacaoGuia.subclass:
            return ctm_prorrogacaoSolicitacaoGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_prorrogacaoSolicitacaoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_nrGuiaReferenciada(self): return self.nrGuiaReferenciada
    def set_nrGuiaReferenciada(self, nrGuiaReferenciada): self.nrGuiaReferenciada = nrGuiaReferenciada
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosContratadoSolicitante(self): return self.dadosContratadoSolicitante
    def set_dadosContratadoSolicitante(self, dadosContratadoSolicitante): self.dadosContratadoSolicitante = dadosContratadoSolicitante
    def get_dadosProfissionalSolicitante(self): return self.dadosProfissionalSolicitante
    def set_dadosProfissionalSolicitante(self, dadosProfissionalSolicitante): self.dadosProfissionalSolicitante = dadosProfissionalSolicitante
    def get_dadosInternacao(self): return self.dadosInternacao
    def set_dadosInternacao(self, dadosInternacao): self.dadosInternacao = dadosInternacao
    def get_procedimentosAdicionais(self): return self.procedimentosAdicionais
    def set_procedimentosAdicionais(self, procedimentosAdicionais): self.procedimentosAdicionais = procedimentosAdicionais
    def add_procedimentosAdicionais(self, value): self.procedimentosAdicionais.append(value)
    def insert_procedimentosAdicionais_at(self, index, value): self.procedimentosAdicionais.insert(index, value)
    def replace_procedimentosAdicionais_at(self, index, value): self.procedimentosAdicionais[index] = value
    def get_anexoClinicoProrrogacao(self): return self.anexoClinicoProrrogacao
    def set_anexoClinicoProrrogacao(self, anexoClinicoProrrogacao): self.anexoClinicoProrrogacao = anexoClinicoProrrogacao
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaPrestador is not None or
            self.nrGuiaReferenciada is not None or
            self.dadosBeneficiario is not None or
            self.dadosContratadoSolicitante is not None or
            self.dadosProfissionalSolicitante is not None or
            self.dadosInternacao is not None or
            self.procedimentosAdicionais or
            self.anexoClinicoProrrogacao is not None or
            self.observacao is not None or
            self.dataSolicitacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_prorrogacaoSolicitacaoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_prorrogacaoSolicitacaoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_prorrogacaoSolicitacaoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_prorrogacaoSolicitacaoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_prorrogacaoSolicitacaoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.nrGuiaReferenciada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snrGuiaReferenciada>%s</%snrGuiaReferenciada>%s' % (namespace_, self.gds_format_string(quote_xml(self.nrGuiaReferenciada).encode(ExternalEncoding), input_name='nrGuiaReferenciada'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosContratadoSolicitante is not None:
            self.dadosContratadoSolicitante.export(outfile, level, namespace_, name_='dadosContratadoSolicitante', pretty_print=pretty_print)
        if self.dadosProfissionalSolicitante is not None:
            self.dadosProfissionalSolicitante.export(outfile, level, namespace_, name_='dadosProfissionalSolicitante', pretty_print=pretty_print)
        if self.dadosInternacao is not None:
            self.dadosInternacao.export(outfile, level, namespace_, name_='dadosInternacao', pretty_print=pretty_print)
        for procedimentosAdicionais_ in self.procedimentosAdicionais:
            procedimentosAdicionais_.export(outfile, level, namespace_, name_='procedimentosAdicionais', pretty_print=pretty_print)
        if self.anexoClinicoProrrogacao is not None:
            self.anexoClinicoProrrogacao.export(outfile, level, namespace_, name_='anexoClinicoProrrogacao', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_prorrogacaoSolicitacaoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.nrGuiaReferenciada is not None:
            showIndent(outfile, level)
            outfile.write('nrGuiaReferenciada=%s,\n' % quote_python(self.nrGuiaReferenciada).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.dadosBeneficiario(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosContratadoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratadoSolicitante=model_.ct_contratadoDados(\n')
            self.dadosContratadoSolicitante.exportLiteral(outfile, level, name_='dadosContratadoSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosProfissionalSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('dadosProfissionalSolicitante=model_.ct_contratadoProfissionalDados(\n')
            self.dadosProfissionalSolicitante.exportLiteral(outfile, level, name_='dadosProfissionalSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosInternacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosInternacao=model_.dadosInternacao(\n')
            self.dadosInternacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('procedimentosAdicionais=[\n')
        level += 1
        for procedimentosAdicionais_ in self.procedimentosAdicionais:
            showIndent(outfile, level)
            outfile.write('model_.procedimentosAdicionais(\n')
            procedimentosAdicionais_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.anexoClinicoProrrogacao is not None:
            showIndent(outfile, level)
            outfile.write('anexoClinicoProrrogacao=model_.anexoClinicoProrrogacao(\n')
            self.anexoClinicoProrrogacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'nrGuiaReferenciada':
            nrGuiaReferenciada_ = child_.text
            nrGuiaReferenciada_ = self.gds_validate_string(nrGuiaReferenciada_, node, 'nrGuiaReferenciada')
            self.nrGuiaReferenciada = nrGuiaReferenciada_
            # validate type st_texto20
            self.validate_st_texto20(self.nrGuiaReferenciada)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = dadosBeneficiario.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosContratadoSolicitante':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosContratadoSolicitante = obj_
            obj_.original_tagname_ = 'dadosContratadoSolicitante'
        elif nodeName_ == 'dadosProfissionalSolicitante':
            obj_ = ct_contratadoProfissionalDados.factory()
            obj_.build(child_)
            self.dadosProfissionalSolicitante = obj_
            obj_.original_tagname_ = 'dadosProfissionalSolicitante'
        elif nodeName_ == 'dadosInternacao':
            obj_ = dadosInternacao.factory()
            obj_.build(child_)
            self.dadosInternacao = obj_
            obj_.original_tagname_ = 'dadosInternacao'
        elif nodeName_ == 'procedimentosAdicionais':
            obj_ = procedimentosAdicionais.factory()
            obj_.build(child_)
            self.procedimentosAdicionais.append(obj_)
            obj_.original_tagname_ = 'procedimentosAdicionais'
        elif nodeName_ == 'anexoClinicoProrrogacao':
            obj_ = anexoClinicoProrrogacao.factory()
            obj_.build(child_)
            self.anexoClinicoProrrogacao = obj_
            obj_.original_tagname_ = 'anexoClinicoProrrogacao'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
# end class ctm_prorrogacaoSolicitacaoGuia


class dadosBeneficiario(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroCarteira=None, nomeBeneficiario=None, identificadorBeneficiario=None):
        self.original_tagname_ = None
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.identificadorBeneficiario = identificadorBeneficiario
    def factory(*args_, **kwargs_):
        if dadosBeneficiario.subclass:
            return dadosBeneficiario.subclass(*args_, **kwargs_)
        else:
            return dadosBeneficiario(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroCarteira is not None or
            self.nomeBeneficiario is not None or
            self.identificadorBeneficiario is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosBeneficiario', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosBeneficiario')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosBeneficiario', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosBeneficiario'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosBeneficiario', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosBeneficiario'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
# end class dadosBeneficiario


class procedimentosAdicionais(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procedimento=None, quantidadeSolicitada=None):
        self.original_tagname_ = None
        self.procedimento = procedimento
        self.quantidadeSolicitada = quantidadeSolicitada
        self.validate_st_numerico3(self.quantidadeSolicitada)
    def factory(*args_, **kwargs_):
        if procedimentosAdicionais.subclass:
            return procedimentosAdicionais.subclass(*args_, **kwargs_)
        else:
            return procedimentosAdicionais(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procedimento(self): return self.procedimento
    def set_procedimento(self, procedimento): self.procedimento = procedimento
    def get_quantidadeSolicitada(self): return self.quantidadeSolicitada
    def set_quantidadeSolicitada(self, quantidadeSolicitada): self.quantidadeSolicitada = quantidadeSolicitada
    def validate_st_numerico3(self, value):
        # Validate type st_numerico3, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 3:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico3' % {"value" : value} )
    def hasContent_(self):
        if (
            self.procedimento is not None or
            self.quantidadeSolicitada is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentosAdicionais', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentosAdicionais')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentosAdicionais', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentosAdicionais'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentosAdicionais', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.procedimento is not None:
            self.procedimento.export(outfile, level, namespace_, name_='procedimento', pretty_print=pretty_print)
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantidadeSolicitada>%s</%squantidadeSolicitada>%s' % (namespace_, self.gds_format_integer(self.quantidadeSolicitada, input_name='quantidadeSolicitada'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='procedimentosAdicionais'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.procedimento is not None:
            showIndent(outfile, level)
            outfile.write('procedimento=model_.ct_procedimentoDados(\n')
            self.procedimento.exportLiteral(outfile, level, name_='procedimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.quantidadeSolicitada is not None:
            showIndent(outfile, level)
            outfile.write('quantidadeSolicitada=%d,\n' % self.quantidadeSolicitada)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procedimento':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procedimento = obj_
            obj_.original_tagname_ = 'procedimento'
        elif nodeName_ == 'quantidadeSolicitada':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'quantidadeSolicitada')
            self.quantidadeSolicitada = ival_
            # validate type st_numerico3
            self.validate_st_numerico3(self.quantidadeSolicitada)
# end class procedimentosAdicionais


class anexoClinicoProrrogacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, solicitacaoQuimioterapia=None, solicitacaoRadioterapia=None, solicitacaoOPME=None):
        self.original_tagname_ = None
        self.solicitacaoQuimioterapia = solicitacaoQuimioterapia
        self.solicitacaoRadioterapia = solicitacaoRadioterapia
        self.solicitacaoOPME = solicitacaoOPME
    def factory(*args_, **kwargs_):
        if anexoClinicoProrrogacao.subclass:
            return anexoClinicoProrrogacao.subclass(*args_, **kwargs_)
        else:
            return anexoClinicoProrrogacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_solicitacaoQuimioterapia(self): return self.solicitacaoQuimioterapia
    def set_solicitacaoQuimioterapia(self, solicitacaoQuimioterapia): self.solicitacaoQuimioterapia = solicitacaoQuimioterapia
    def get_solicitacaoRadioterapia(self): return self.solicitacaoRadioterapia
    def set_solicitacaoRadioterapia(self, solicitacaoRadioterapia): self.solicitacaoRadioterapia = solicitacaoRadioterapia
    def get_solicitacaoOPME(self): return self.solicitacaoOPME
    def set_solicitacaoOPME(self, solicitacaoOPME): self.solicitacaoOPME = solicitacaoOPME
    def hasContent_(self):
        if (
            self.solicitacaoQuimioterapia is not None or
            self.solicitacaoRadioterapia is not None or
            self.solicitacaoOPME is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='anexoClinicoProrrogacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='anexoClinicoProrrogacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='anexoClinicoProrrogacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='anexoClinicoProrrogacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='anexoClinicoProrrogacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.solicitacaoQuimioterapia is not None:
            self.solicitacaoQuimioterapia.export(outfile, level, namespace_, name_='solicitacaoQuimioterapia', pretty_print=pretty_print)
        if self.solicitacaoRadioterapia is not None:
            self.solicitacaoRadioterapia.export(outfile, level, namespace_, name_='solicitacaoRadioterapia', pretty_print=pretty_print)
        if self.solicitacaoOPME is not None:
            self.solicitacaoOPME.export(outfile, level, namespace_, name_='solicitacaoOPME', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='anexoClinicoProrrogacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.solicitacaoQuimioterapia is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoQuimioterapia=model_.ctm_anexoSolicitacaoQuimio(\n')
            self.solicitacaoQuimioterapia.exportLiteral(outfile, level, name_='solicitacaoQuimioterapia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoRadioterapia is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoRadioterapia=model_.ctm_anexoSolicitacaoRadio(\n')
            self.solicitacaoRadioterapia.exportLiteral(outfile, level, name_='solicitacaoRadioterapia')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoOPME is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoOPME=model_.ctm_anexoSolicitacaoOPME(\n')
            self.solicitacaoOPME.exportLiteral(outfile, level, name_='solicitacaoOPME')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'solicitacaoQuimioterapia':
            obj_ = ctm_anexoSolicitacaoQuimio.factory()
            obj_.build(child_)
            self.solicitacaoQuimioterapia = obj_
            obj_.original_tagname_ = 'solicitacaoQuimioterapia'
        elif nodeName_ == 'solicitacaoRadioterapia':
            obj_ = ctm_anexoSolicitacaoRadio.factory()
            obj_.build(child_)
            self.solicitacaoRadioterapia = obj_
            obj_.original_tagname_ = 'solicitacaoRadioterapia'
        elif nodeName_ == 'solicitacaoOPME':
            obj_ = ctm_anexoSolicitacaoOPME.factory()
            obj_.build(child_)
            self.solicitacaoOPME = obj_
            obj_.original_tagname_ = 'solicitacaoOPME'
# end class anexoClinicoProrrogacao


class ctm_sp_sadtAtendimento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tipoAtendimento=None, indicacaoAcidente=None, tipoConsulta=None, motivoEncerramento=None):
        self.original_tagname_ = None
        self.tipoAtendimento = tipoAtendimento
        self.validate_dm_tipoAtendimento(self.tipoAtendimento)
        self.indicacaoAcidente = indicacaoAcidente
        self.validate_dm_indicadorAcidente(self.indicacaoAcidente)
        self.tipoConsulta = tipoConsulta
        self.validate_dm_tipoConsulta(self.tipoConsulta)
        self.motivoEncerramento = motivoEncerramento
        self.validate_dm_motivoSaidaObito(self.motivoEncerramento)
    def factory(*args_, **kwargs_):
        if ctm_sp_sadtAtendimento.subclass:
            return ctm_sp_sadtAtendimento.subclass(*args_, **kwargs_)
        else:
            return ctm_sp_sadtAtendimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tipoAtendimento(self): return self.tipoAtendimento
    def set_tipoAtendimento(self, tipoAtendimento): self.tipoAtendimento = tipoAtendimento
    def get_indicacaoAcidente(self): return self.indicacaoAcidente
    def set_indicacaoAcidente(self, indicacaoAcidente): self.indicacaoAcidente = indicacaoAcidente
    def get_tipoConsulta(self): return self.tipoConsulta
    def set_tipoConsulta(self, tipoConsulta): self.tipoConsulta = tipoConsulta
    def get_motivoEncerramento(self): return self.motivoEncerramento
    def set_motivoEncerramento(self, motivoEncerramento): self.motivoEncerramento = motivoEncerramento
    def validate_dm_tipoAtendimento(self, value):
        # Validate type dm_tipoAtendimento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '13', '14', '15', '16', '17', '18', '19', '20', '21']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoAtendimento' % {"value" : value.encode("utf-8")} )
    def validate_dm_indicadorAcidente(self, value):
        # Validate type dm_indicadorAcidente, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['0', '1', '2', '9']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_indicadorAcidente' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoConsulta(self, value):
        # Validate type dm_tipoConsulta, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoConsulta' % {"value" : value.encode("utf-8")} )
    def validate_dm_motivoSaidaObito(self, value):
        # Validate type dm_motivoSaidaObito, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['41', '42', '43']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_motivoSaidaObito' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tipoAtendimento is not None or
            self.indicacaoAcidente is not None or
            self.tipoConsulta is not None or
            self.motivoEncerramento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_sp-sadtAtendimento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_sp-sadtAtendimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_sp-sadtAtendimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_sp-sadtAtendimento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_sp-sadtAtendimento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tipoAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoAtendimento>%s</%stipoAtendimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoAtendimento).encode(ExternalEncoding), input_name='tipoAtendimento'), namespace_, eol_))
        if self.indicacaoAcidente is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicacaoAcidente>%s</%sindicacaoAcidente>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicacaoAcidente).encode(ExternalEncoding), input_name='indicacaoAcidente'), namespace_, eol_))
        if self.tipoConsulta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoConsulta>%s</%stipoConsulta>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoConsulta).encode(ExternalEncoding), input_name='tipoConsulta'), namespace_, eol_))
        if self.motivoEncerramento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smotivoEncerramento>%s</%smotivoEncerramento>%s' % (namespace_, self.gds_format_string(quote_xml(self.motivoEncerramento).encode(ExternalEncoding), input_name='motivoEncerramento'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_sp-sadtAtendimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.tipoAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('tipoAtendimento=%s,\n' % quote_python(self.tipoAtendimento).encode(ExternalEncoding))
        if self.indicacaoAcidente is not None:
            showIndent(outfile, level)
            outfile.write('indicacaoAcidente=%s,\n' % quote_python(self.indicacaoAcidente).encode(ExternalEncoding))
        if self.tipoConsulta is not None:
            showIndent(outfile, level)
            outfile.write('tipoConsulta=%s,\n' % quote_python(self.tipoConsulta).encode(ExternalEncoding))
        if self.motivoEncerramento is not None:
            showIndent(outfile, level)
            outfile.write('motivoEncerramento=%s,\n' % quote_python(self.motivoEncerramento).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tipoAtendimento':
            tipoAtendimento_ = child_.text
            tipoAtendimento_ = self.gds_validate_string(tipoAtendimento_, node, 'tipoAtendimento')
            self.tipoAtendimento = tipoAtendimento_
            # validate type dm_tipoAtendimento
            self.validate_dm_tipoAtendimento(self.tipoAtendimento)
        elif nodeName_ == 'indicacaoAcidente':
            indicacaoAcidente_ = child_.text
            indicacaoAcidente_ = self.gds_validate_string(indicacaoAcidente_, node, 'indicacaoAcidente')
            self.indicacaoAcidente = indicacaoAcidente_
            # validate type dm_indicadorAcidente
            self.validate_dm_indicadorAcidente(self.indicacaoAcidente)
        elif nodeName_ == 'tipoConsulta':
            tipoConsulta_ = child_.text
            tipoConsulta_ = self.gds_validate_string(tipoConsulta_, node, 'tipoConsulta')
            self.tipoConsulta = tipoConsulta_
            # validate type dm_tipoConsulta
            self.validate_dm_tipoConsulta(self.tipoConsulta)
        elif nodeName_ == 'motivoEncerramento':
            motivoEncerramento_ = child_.text
            motivoEncerramento_ = self.gds_validate_string(motivoEncerramento_, node, 'motivoEncerramento')
            self.motivoEncerramento = motivoEncerramento_
            # validate type dm_motivoSaidaObito
            self.validate_dm_motivoSaidaObito(self.motivoEncerramento)
# end class ctm_sp_sadtAtendimento


class ctm_solicitacaoLote(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, solicitacaoSP_SADT=None, solicitacaoInternacao=None, solicitacaoProrrogacao=None, solicitacaoOdontologia=None, extensiontype_=None):
        self.original_tagname_ = None
        self.solicitacaoSP_SADT = solicitacaoSP_SADT
        self.solicitacaoInternacao = solicitacaoInternacao
        self.solicitacaoProrrogacao = solicitacaoProrrogacao
        self.solicitacaoOdontologia = solicitacaoOdontologia
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if ctm_solicitacaoLote.subclass:
            return ctm_solicitacaoLote.subclass(*args_, **kwargs_)
        else:
            return ctm_solicitacaoLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_solicitacaoSP_SADT(self): return self.solicitacaoSP_SADT
    def set_solicitacaoSP_SADT(self, solicitacaoSP_SADT): self.solicitacaoSP_SADT = solicitacaoSP_SADT
    def get_solicitacaoInternacao(self): return self.solicitacaoInternacao
    def set_solicitacaoInternacao(self, solicitacaoInternacao): self.solicitacaoInternacao = solicitacaoInternacao
    def get_solicitacaoProrrogacao(self): return self.solicitacaoProrrogacao
    def set_solicitacaoProrrogacao(self, solicitacaoProrrogacao): self.solicitacaoProrrogacao = solicitacaoProrrogacao
    def get_solicitacaoOdontologia(self): return self.solicitacaoOdontologia
    def set_solicitacaoOdontologia(self, solicitacaoOdontologia): self.solicitacaoOdontologia = solicitacaoOdontologia
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            self.solicitacaoSP_SADT is not None or
            self.solicitacaoInternacao is not None or
            self.solicitacaoProrrogacao is not None or
            self.solicitacaoOdontologia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_solicitacaoLote', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_solicitacaoLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_solicitacaoLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_solicitacaoLote'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_solicitacaoLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.solicitacaoSP_SADT is not None:
            self.solicitacaoSP_SADT.export(outfile, level, namespace_, name_='solicitacaoSP-SADT', pretty_print=pretty_print)
        if self.solicitacaoInternacao is not None:
            self.solicitacaoInternacao.export(outfile, level, namespace_, name_='solicitacaoInternacao', pretty_print=pretty_print)
        if self.solicitacaoProrrogacao is not None:
            self.solicitacaoProrrogacao.export(outfile, level, namespace_, name_='solicitacaoProrrogacao', pretty_print=pretty_print)
        if self.solicitacaoOdontologia is not None:
            self.solicitacaoOdontologia.export(outfile, level, namespace_, name_='solicitacaoOdontologia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_solicitacaoLote'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.solicitacaoSP_SADT is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoSP_SADT=model_.ctm_sp_sadtSolicitacaoGuia(\n')
            self.solicitacaoSP_SADT.exportLiteral(outfile, level, name_='solicitacaoSP_SADT')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoInternacao is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoInternacao=model_.ctm_internacaoSolicitacaoGuia(\n')
            self.solicitacaoInternacao.exportLiteral(outfile, level, name_='solicitacaoInternacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoProrrogacao is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoProrrogacao=model_.ctm_prorrogacaoSolicitacaoGuia(\n')
            self.solicitacaoProrrogacao.exportLiteral(outfile, level, name_='solicitacaoProrrogacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.solicitacaoOdontologia is not None:
            showIndent(outfile, level)
            outfile.write('solicitacaoOdontologia=model_.cto_odontoSolicitacaoGuia(\n')
            self.solicitacaoOdontologia.exportLiteral(outfile, level, name_='solicitacaoOdontologia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'solicitacaoSP-SADT':
            obj_ = ctm_sp_sadtSolicitacaoGuia.factory()
            obj_.build(child_)
            self.solicitacaoSP_SADT = obj_
            obj_.original_tagname_ = 'solicitacaoSP-SADT'
        elif nodeName_ == 'solicitacaoInternacao':
            obj_ = ctm_internacaoSolicitacaoGuia.factory()
            obj_.build(child_)
            self.solicitacaoInternacao = obj_
            obj_.original_tagname_ = 'solicitacaoInternacao'
        elif nodeName_ == 'solicitacaoProrrogacao':
            obj_ = ctm_prorrogacaoSolicitacaoGuia.factory()
            obj_.build(child_)
            self.solicitacaoProrrogacao = obj_
            obj_.original_tagname_ = 'solicitacaoProrrogacao'
        elif nodeName_ == 'solicitacaoOdontologia':
            obj_ = cto_odontoSolicitacaoGuia.factory()
            obj_.build(child_)
            self.solicitacaoOdontologia = obj_
            obj_.original_tagname_ = 'solicitacaoOdontologia'
# end class ctm_solicitacaoLote


class ctm_sp_sadtGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoGuia=None, dadosAutorizacao=None, dadosBeneficiario=None, dadosSolicitante=None, dadosSolicitacao=None, dadosExecutante=None, dadosAtendimento=None, procedimentosExecutados=None, outrasDespesas=None, observacao=None, valorTotal=None, assinaturaDigitalGuia=None):
        self.original_tagname_ = None
        self.cabecalhoGuia = cabecalhoGuia
        self.dadosAutorizacao = dadosAutorizacao
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosSolicitante = dadosSolicitante
        self.dadosSolicitacao = dadosSolicitacao
        self.dadosExecutante = dadosExecutante
        self.dadosAtendimento = dadosAtendimento
        self.procedimentosExecutados = procedimentosExecutados
        self.outrasDespesas = outrasDespesas
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.valorTotal = valorTotal
        self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def factory(*args_, **kwargs_):
        if ctm_sp_sadtGuia.subclass:
            return ctm_sp_sadtGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_sp_sadtGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoGuia(self): return self.cabecalhoGuia
    def set_cabecalhoGuia(self, cabecalhoGuia): self.cabecalhoGuia = cabecalhoGuia
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosSolicitante(self): return self.dadosSolicitante
    def set_dadosSolicitante(self, dadosSolicitante): self.dadosSolicitante = dadosSolicitante
    def get_dadosSolicitacao(self): return self.dadosSolicitacao
    def set_dadosSolicitacao(self, dadosSolicitacao): self.dadosSolicitacao = dadosSolicitacao
    def get_dadosExecutante(self): return self.dadosExecutante
    def set_dadosExecutante(self, dadosExecutante): self.dadosExecutante = dadosExecutante
    def get_dadosAtendimento(self): return self.dadosAtendimento
    def set_dadosAtendimento(self, dadosAtendimento): self.dadosAtendimento = dadosAtendimento
    def get_procedimentosExecutados(self): return self.procedimentosExecutados
    def set_procedimentosExecutados(self, procedimentosExecutados): self.procedimentosExecutados = procedimentosExecutados
    def get_outrasDespesas(self): return self.outrasDespesas
    def set_outrasDespesas(self, outrasDespesas): self.outrasDespesas = outrasDespesas
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_valorTotal(self): return self.valorTotal
    def set_valorTotal(self, valorTotal): self.valorTotal = valorTotal
    def get_assinaturaDigitalGuia(self): return self.assinaturaDigitalGuia
    def set_assinaturaDigitalGuia(self, assinaturaDigitalGuia): self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoGuia is not None or
            self.dadosAutorizacao is not None or
            self.dadosBeneficiario is not None or
            self.dadosSolicitante is not None or
            self.dadosSolicitacao is not None or
            self.dadosExecutante is not None or
            self.dadosAtendimento is not None or
            self.procedimentosExecutados is not None or
            self.outrasDespesas is not None or
            self.observacao is not None or
            self.valorTotal is not None or
            self.assinaturaDigitalGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_sp-sadtGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_sp-sadtGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_sp-sadtGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_sp-sadtGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_sp-sadtGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoGuia is not None:
            self.cabecalhoGuia.export(outfile, level, namespace_, name_='cabecalhoGuia', pretty_print=pretty_print)
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosSolicitante is not None:
            self.dadosSolicitante.export(outfile, level, namespace_, name_='dadosSolicitante', pretty_print=pretty_print)
        if self.dadosSolicitacao is not None:
            self.dadosSolicitacao.export(outfile, level, namespace_, name_='dadosSolicitacao', pretty_print=pretty_print)
        if self.dadosExecutante is not None:
            self.dadosExecutante.export(outfile, level, namespace_, name_='dadosExecutante', pretty_print=pretty_print)
        if self.dadosAtendimento is not None:
            self.dadosAtendimento.export(outfile, level, namespace_, name_='dadosAtendimento', pretty_print=pretty_print)
        if self.procedimentosExecutados is not None:
            self.procedimentosExecutados.export(outfile, level, namespace_, name_='procedimentosExecutados', pretty_print=pretty_print)
        if self.outrasDespesas is not None:
            self.outrasDespesas.export(outfile, level, namespace_, name_='outrasDespesas', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.valorTotal is not None:
            self.valorTotal.export(outfile, level, namespace_, name_='valorTotal', pretty_print=pretty_print)
        if self.assinaturaDigitalGuia is not None:
            self.assinaturaDigitalGuia.export(outfile, level, namespace_, name_='assinaturaDigitalGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ctm_sp-sadtGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoGuia is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoGuia=model_.cabecalhoGuia(\n')
            self.cabecalhoGuia.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoSADT(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('dadosSolicitante=model_.dadosSolicitante(\n')
            self.dadosSolicitante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosSolicitacao=model_.dadosSolicitacao(\n')
            self.dadosSolicitacao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosExecutante is not None:
            showIndent(outfile, level)
            outfile.write('dadosExecutante=model_.dadosExecutante(\n')
            self.dadosExecutante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('dadosAtendimento=model_.ctm_sp_sadtAtendimento(\n')
            self.dadosAtendimento.exportLiteral(outfile, level, name_='dadosAtendimento')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.procedimentosExecutados is not None:
            showIndent(outfile, level)
            outfile.write('procedimentosExecutados=model_.procedimentosExecutados(\n')
            self.procedimentosExecutados.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.outrasDespesas is not None:
            showIndent(outfile, level)
            outfile.write('outrasDespesas=model_.ct_outrasDespesas(\n')
            self.outrasDespesas.exportLiteral(outfile, level, name_='outrasDespesas')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.valorTotal is not None:
            showIndent(outfile, level)
            outfile.write('valorTotal=model_.ct_guiaValorTotal(\n')
            self.valorTotal.exportLiteral(outfile, level, name_='valorTotal')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.assinaturaDigitalGuia is not None:
            showIndent(outfile, level)
            outfile.write('assinaturaDigitalGuia=model_.assinaturaDigital(\n')
            self.assinaturaDigitalGuia.exportLiteral(outfile, level, name_='assinaturaDigitalGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoGuia':
            obj_ = cabecalhoGuia.factory()
            obj_.build(child_)
            self.cabecalhoGuia = obj_
            obj_.original_tagname_ = 'cabecalhoGuia'
        elif nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoSADT.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosSolicitante':
            obj_ = dadosSolicitante.factory()
            obj_.build(child_)
            self.dadosSolicitante = obj_
            obj_.original_tagname_ = 'dadosSolicitante'
        elif nodeName_ == 'dadosSolicitacao':
            obj_ = dadosSolicitacao.factory()
            obj_.build(child_)
            self.dadosSolicitacao = obj_
            obj_.original_tagname_ = 'dadosSolicitacao'
        elif nodeName_ == 'dadosExecutante':
            obj_ = dadosExecutante.factory()
            obj_.build(child_)
            self.dadosExecutante = obj_
            obj_.original_tagname_ = 'dadosExecutante'
        elif nodeName_ == 'dadosAtendimento':
            obj_ = ctm_sp_sadtAtendimento.factory()
            obj_.build(child_)
            self.dadosAtendimento = obj_
            obj_.original_tagname_ = 'dadosAtendimento'
        elif nodeName_ == 'procedimentosExecutados':
            obj_ = procedimentosExecutados.factory()
            obj_.build(child_)
            self.procedimentosExecutados = obj_
            obj_.original_tagname_ = 'procedimentosExecutados'
        elif nodeName_ == 'outrasDespesas':
            obj_ = ct_outrasDespesas.factory()
            obj_.build(child_)
            self.outrasDespesas = obj_
            obj_.original_tagname_ = 'outrasDespesas'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'valorTotal':
            obj_ = ct_guiaValorTotal.factory()
            obj_.build(child_)
            self.valorTotal = obj_
            obj_.original_tagname_ = 'valorTotal'
        elif nodeName_ == 'assinaturaDigitalGuia':
            obj_ = assinaturaDigital.factory()
            obj_.build(child_)
            self.assinaturaDigitalGuia = obj_
            obj_.original_tagname_ = 'assinaturaDigitalGuia'
# end class ctm_sp_sadtGuia


class cabecalhoGuia(ct_guiaCabecalho):
    subclass = None
    superclass = ct_guiaCabecalho
    def __init__(self, registroANS=None, numeroGuiaPrestador=None, guiaPrincipal=None):
        self.original_tagname_ = None
        super(cabecalhoGuia, self).__init__(registroANS, numeroGuiaPrestador, )
        self.guiaPrincipal = guiaPrincipal
        self.validate_st_texto20(self.guiaPrincipal)
    def factory(*args_, **kwargs_):
        if cabecalhoGuia.subclass:
            return cabecalhoGuia.subclass(*args_, **kwargs_)
        else:
            return cabecalhoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_guiaPrincipal(self): return self.guiaPrincipal
    def set_guiaPrincipal(self, guiaPrincipal): self.guiaPrincipal = guiaPrincipal
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.guiaPrincipal is not None or
            super(cabecalhoGuia, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cabecalhoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cabecalhoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cabecalhoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cabecalhoGuia'):
        super(cabecalhoGuia, self).exportAttributes(outfile, level, already_processed, namespace_, name_='cabecalhoGuia')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cabecalhoGuia', fromsubclass_=False, pretty_print=True):
        super(cabecalhoGuia, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.guiaPrincipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sguiaPrincipal>%s</%sguiaPrincipal>%s' % (namespace_, self.gds_format_string(quote_xml(self.guiaPrincipal).encode(ExternalEncoding), input_name='guiaPrincipal'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='cabecalhoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(cabecalhoGuia, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(cabecalhoGuia, self).exportLiteralChildren(outfile, level, name_)
        if self.guiaPrincipal is not None:
            showIndent(outfile, level)
            outfile.write('guiaPrincipal=%s,\n' % quote_python(self.guiaPrincipal).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(cabecalhoGuia, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'guiaPrincipal':
            guiaPrincipal_ = child_.text
            guiaPrincipal_ = self.gds_validate_string(guiaPrincipal_, node, 'guiaPrincipal')
            self.guiaPrincipal = guiaPrincipal_
            # validate type st_texto20
            self.validate_st_texto20(self.guiaPrincipal)
        super(cabecalhoGuia, self).buildChildren(child_, node, nodeName_, True)
# end class cabecalhoGuia


class dadosSolicitante(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, contratadoSolicitante=None, profissionalSolicitante=None):
        self.original_tagname_ = None
        self.contratadoSolicitante = contratadoSolicitante
        self.profissionalSolicitante = profissionalSolicitante
    def factory(*args_, **kwargs_):
        if dadosSolicitante.subclass:
            return dadosSolicitante.subclass(*args_, **kwargs_)
        else:
            return dadosSolicitante(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_contratadoSolicitante(self): return self.contratadoSolicitante
    def set_contratadoSolicitante(self, contratadoSolicitante): self.contratadoSolicitante = contratadoSolicitante
    def get_profissionalSolicitante(self): return self.profissionalSolicitante
    def set_profissionalSolicitante(self, profissionalSolicitante): self.profissionalSolicitante = profissionalSolicitante
    def hasContent_(self):
        if (
            self.contratadoSolicitante is not None or
            self.profissionalSolicitante is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosSolicitante', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosSolicitante')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosSolicitante', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosSolicitante'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosSolicitante', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contratadoSolicitante is not None:
            self.contratadoSolicitante.export(outfile, level, namespace_, name_='contratadoSolicitante', pretty_print=pretty_print)
        if self.profissionalSolicitante is not None:
            self.profissionalSolicitante.export(outfile, level, namespace_, name_='profissionalSolicitante', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='dadosSolicitante'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.contratadoSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('contratadoSolicitante=model_.ct_contratadoDados(\n')
            self.contratadoSolicitante.exportLiteral(outfile, level, name_='contratadoSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.profissionalSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('profissionalSolicitante=model_.ct_contratadoProfissionalDados(\n')
            self.profissionalSolicitante.exportLiteral(outfile, level, name_='profissionalSolicitante')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'contratadoSolicitante':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.contratadoSolicitante = obj_
            obj_.original_tagname_ = 'contratadoSolicitante'
        elif nodeName_ == 'profissionalSolicitante':
            obj_ = ct_contratadoProfissionalDados.factory()
            obj_.build(child_)
            self.profissionalSolicitante = obj_
            obj_.original_tagname_ = 'profissionalSolicitante'
# end class dadosSolicitante


class dadosSolicitacao(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataSolicitacao=None, caraterAtendimento=None, indicacaoClinica=None):
        self.original_tagname_ = None
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
        self.caraterAtendimento = caraterAtendimento
        self.validate_dm_caraterAtendimento(self.caraterAtendimento)
        self.indicacaoClinica = indicacaoClinica
        self.validate_st_texto500(self.indicacaoClinica)
    def factory(*args_, **kwargs_):
        if dadosSolicitacao.subclass:
            return dadosSolicitacao.subclass(*args_, **kwargs_)
        else:
            return dadosSolicitacao(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def get_caraterAtendimento(self): return self.caraterAtendimento
    def set_caraterAtendimento(self, caraterAtendimento): self.caraterAtendimento = caraterAtendimento
    def get_indicacaoClinica(self): return self.indicacaoClinica
    def set_indicacaoClinica(self, indicacaoClinica): self.indicacaoClinica = indicacaoClinica
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_caraterAtendimento(self, value):
        # Validate type dm_caraterAtendimento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_caraterAtendimento' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataSolicitacao is not None or
            self.caraterAtendimento is not None or
            self.indicacaoClinica is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosSolicitacao', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosSolicitacao')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosSolicitacao', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosSolicitacao'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosSolicitacao', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
        if self.caraterAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scaraterAtendimento>%s</%scaraterAtendimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.caraterAtendimento).encode(ExternalEncoding), input_name='caraterAtendimento'), namespace_, eol_))
        if self.indicacaoClinica is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicacaoClinica>%s</%sindicacaoClinica>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicacaoClinica).encode(ExternalEncoding), input_name='indicacaoClinica'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosSolicitacao'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
        if self.caraterAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('caraterAtendimento=%s,\n' % quote_python(self.caraterAtendimento).encode(ExternalEncoding))
        if self.indicacaoClinica is not None:
            showIndent(outfile, level)
            outfile.write('indicacaoClinica=%s,\n' % quote_python(self.indicacaoClinica).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
        elif nodeName_ == 'caraterAtendimento':
            caraterAtendimento_ = child_.text
            caraterAtendimento_ = self.gds_validate_string(caraterAtendimento_, node, 'caraterAtendimento')
            self.caraterAtendimento = caraterAtendimento_
            # validate type dm_caraterAtendimento
            self.validate_dm_caraterAtendimento(self.caraterAtendimento)
        elif nodeName_ == 'indicacaoClinica':
            indicacaoClinica_ = child_.text
            indicacaoClinica_ = self.gds_validate_string(indicacaoClinica_, node, 'indicacaoClinica')
            self.indicacaoClinica = indicacaoClinica_
            # validate type st_texto500
            self.validate_st_texto500(self.indicacaoClinica)
# end class dadosSolicitacao


class ctm_sp_sadtSolicitacaoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoSolicitacao=None, numeroGuiaPrincipal=None, dadosBeneficiario=None, dadosSolicitante=None, caraterAtendimento=None, dataSolicitacao=None, indicacaoClinica=None, procedimentosSolicitados=None, dadosExecutante=None, anexoClinico=None, observacao=None):
        self.original_tagname_ = None
        self.cabecalhoSolicitacao = cabecalhoSolicitacao
        self.numeroGuiaPrincipal = numeroGuiaPrincipal
        self.validate_st_texto20(self.numeroGuiaPrincipal)
        self.dadosBeneficiario = dadosBeneficiario
        self.dadosSolicitante = dadosSolicitante
        self.caraterAtendimento = caraterAtendimento
        self.validate_dm_caraterAtendimento(self.caraterAtendimento)
        if isinstance(dataSolicitacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataSolicitacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataSolicitacao
        self.dataSolicitacao = initvalue_
        self.indicacaoClinica = indicacaoClinica
        self.validate_st_texto500(self.indicacaoClinica)
        if procedimentosSolicitados is None:
            self.procedimentosSolicitados = []
        else:
            self.procedimentosSolicitados = procedimentosSolicitados
        self.dadosExecutante = dadosExecutante
        self.anexoClinico = anexoClinico
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if ctm_sp_sadtSolicitacaoGuia.subclass:
            return ctm_sp_sadtSolicitacaoGuia.subclass(*args_, **kwargs_)
        else:
            return ctm_sp_sadtSolicitacaoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoSolicitacao(self): return self.cabecalhoSolicitacao
    def set_cabecalhoSolicitacao(self, cabecalhoSolicitacao): self.cabecalhoSolicitacao = cabecalhoSolicitacao
    def get_numeroGuiaPrincipal(self): return self.numeroGuiaPrincipal
    def set_numeroGuiaPrincipal(self, numeroGuiaPrincipal): self.numeroGuiaPrincipal = numeroGuiaPrincipal
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_dadosSolicitante(self): return self.dadosSolicitante
    def set_dadosSolicitante(self, dadosSolicitante): self.dadosSolicitante = dadosSolicitante
    def get_caraterAtendimento(self): return self.caraterAtendimento
    def set_caraterAtendimento(self, caraterAtendimento): self.caraterAtendimento = caraterAtendimento
    def get_dataSolicitacao(self): return self.dataSolicitacao
    def set_dataSolicitacao(self, dataSolicitacao): self.dataSolicitacao = dataSolicitacao
    def get_indicacaoClinica(self): return self.indicacaoClinica
    def set_indicacaoClinica(self, indicacaoClinica): self.indicacaoClinica = indicacaoClinica
    def get_procedimentosSolicitados(self): return self.procedimentosSolicitados
    def set_procedimentosSolicitados(self, procedimentosSolicitados): self.procedimentosSolicitados = procedimentosSolicitados
    def add_procedimentosSolicitados(self, value): self.procedimentosSolicitados.append(value)
    def insert_procedimentosSolicitados_at(self, index, value): self.procedimentosSolicitados.insert(index, value)
    def replace_procedimentosSolicitados_at(self, index, value): self.procedimentosSolicitados[index] = value
    def get_dadosExecutante(self): return self.dadosExecutante
    def set_dadosExecutante(self, dadosExecutante): self.dadosExecutante = dadosExecutante
    def get_anexoClinico(self): return self.anexoClinico
    def set_anexoClinico(self, anexoClinico): self.anexoClinico = anexoClinico
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_caraterAtendimento(self, value):
        # Validate type dm_caraterAtendimento, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_caraterAtendimento' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoSolicitacao is not None or
            self.numeroGuiaPrincipal is not None or
            self.dadosBeneficiario is not None or
            self.dadosSolicitante is not None or
            self.caraterAtendimento is not None or
            self.dataSolicitacao is not None or
            self.indicacaoClinica is not None or
            self.procedimentosSolicitados or
            self.dadosExecutante is not None or
            self.anexoClinico is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_sp-sadtSolicitacaoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_sp-sadtSolicitacaoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_sp-sadtSolicitacaoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_sp-sadtSolicitacaoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_sp-sadtSolicitacaoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoSolicitacao is not None:
            self.cabecalhoSolicitacao.export(outfile, level, namespace_, name_='cabecalhoSolicitacao', pretty_print=pretty_print)
        if self.numeroGuiaPrincipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrincipal>%s</%snumeroGuiaPrincipal>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrincipal).encode(ExternalEncoding), input_name='numeroGuiaPrincipal'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.dadosSolicitante is not None:
            self.dadosSolicitante.export(outfile, level, namespace_, name_='dadosSolicitante', pretty_print=pretty_print)
        if self.caraterAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scaraterAtendimento>%s</%scaraterAtendimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.caraterAtendimento).encode(ExternalEncoding), input_name='caraterAtendimento'), namespace_, eol_))
        if self.dataSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataSolicitacao>%s</%sdataSolicitacao>%s' % (namespace_, self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'), namespace_, eol_))
        if self.indicacaoClinica is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sindicacaoClinica>%s</%sindicacaoClinica>%s' % (namespace_, self.gds_format_string(quote_xml(self.indicacaoClinica).encode(ExternalEncoding), input_name='indicacaoClinica'), namespace_, eol_))
        for procedimentosSolicitados_ in self.procedimentosSolicitados:
            procedimentosSolicitados_.export(outfile, level, namespace_, name_='procedimentosSolicitados', pretty_print=pretty_print)
        if self.dadosExecutante is not None:
            self.dadosExecutante.export(outfile, level, namespace_, name_='dadosExecutante', pretty_print=pretty_print)
        if self.anexoClinico is not None:
            self.anexoClinico.export(outfile, level, namespace_, name_='anexoClinico', pretty_print=pretty_print)
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_sp-sadtSolicitacaoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoSolicitacao=model_.ct_guiaCabecalho(\n')
            self.cabecalhoSolicitacao.exportLiteral(outfile, level, name_='cabecalhoSolicitacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroGuiaPrincipal is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrincipal=%s,\n' % quote_python(self.numeroGuiaPrincipal).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosSolicitante is not None:
            showIndent(outfile, level)
            outfile.write('dadosSolicitante=model_.dadosSolicitante(\n')
            self.dadosSolicitante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.caraterAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('caraterAtendimento=%s,\n' % quote_python(self.caraterAtendimento).encode(ExternalEncoding))
        if self.dataSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('dataSolicitacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataSolicitacao, input_name='dataSolicitacao'))
        if self.indicacaoClinica is not None:
            showIndent(outfile, level)
            outfile.write('indicacaoClinica=%s,\n' % quote_python(self.indicacaoClinica).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('procedimentosSolicitados=[\n')
        level += 1
        for procedimentosSolicitados_ in self.procedimentosSolicitados:
            showIndent(outfile, level)
            outfile.write('model_.procedimentosSolicitados(\n')
            procedimentosSolicitados_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.dadosExecutante is not None:
            showIndent(outfile, level)
            outfile.write('dadosExecutante=model_.dadosExecutante(\n')
            self.dadosExecutante.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.anexoClinico is not None:
            showIndent(outfile, level)
            outfile.write('anexoClinico=model_.anexoClinico(\n')
            self.anexoClinico.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoSolicitacao':
            class_obj_ = self.get_class_obj_(child_, ct_guiaCabecalho)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.cabecalhoSolicitacao = obj_
            obj_.original_tagname_ = 'cabecalhoSolicitacao'
        elif nodeName_ == 'numeroGuiaPrincipal':
            numeroGuiaPrincipal_ = child_.text
            numeroGuiaPrincipal_ = self.gds_validate_string(numeroGuiaPrincipal_, node, 'numeroGuiaPrincipal')
            self.numeroGuiaPrincipal = numeroGuiaPrincipal_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrincipal)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'dadosSolicitante':
            obj_ = dadosSolicitante.factory()
            obj_.build(child_)
            self.dadosSolicitante = obj_
            obj_.original_tagname_ = 'dadosSolicitante'
        elif nodeName_ == 'caraterAtendimento':
            caraterAtendimento_ = child_.text
            caraterAtendimento_ = self.gds_validate_string(caraterAtendimento_, node, 'caraterAtendimento')
            self.caraterAtendimento = caraterAtendimento_
            # validate type dm_caraterAtendimento
            self.validate_dm_caraterAtendimento(self.caraterAtendimento)
        elif nodeName_ == 'dataSolicitacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataSolicitacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataSolicitacao)
        elif nodeName_ == 'indicacaoClinica':
            indicacaoClinica_ = child_.text
            indicacaoClinica_ = self.gds_validate_string(indicacaoClinica_, node, 'indicacaoClinica')
            self.indicacaoClinica = indicacaoClinica_
            # validate type st_texto500
            self.validate_st_texto500(self.indicacaoClinica)
        elif nodeName_ == 'procedimentosSolicitados':
            obj_ = procedimentosSolicitados.factory()
            obj_.build(child_)
            self.procedimentosSolicitados.append(obj_)
            obj_.original_tagname_ = 'procedimentosSolicitados'
        elif nodeName_ == 'dadosExecutante':
            obj_ = dadosExecutante.factory()
            obj_.build(child_)
            self.dadosExecutante = obj_
            obj_.original_tagname_ = 'dadosExecutante'
        elif nodeName_ == 'anexoClinico':
            obj_ = anexoClinico.factory()
            obj_.build(child_)
            self.anexoClinico = obj_
            obj_.original_tagname_ = 'anexoClinico'
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class ctm_sp_sadtSolicitacaoGuia


class ctm_recursoGlosa(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaRecGlosaPrestador=None, nomeOperadora=None, objetoRecurso=None, numeroGuiaRecGlosaOperadora=None, dadosContratado=None, numeroLote=None, numeroProtocolo=None, opcaoRecurso=None, valorTotalRecursado=None, dataRecurso=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
        self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        self.nomeOperadora = nomeOperadora
        self.validate_st_texto70(self.nomeOperadora)
        self.objetoRecurso = objetoRecurso
        self.validate_dm_objetoRecurso(self.objetoRecurso)
        self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
        self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        self.dadosContratado = dadosContratado
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_numerico12(self.numeroProtocolo)
        self.opcaoRecurso = opcaoRecurso
        self.valorTotalRecursado = valorTotalRecursado
        if isinstance(dataRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRecurso
        self.dataRecurso = initvalue_
    def factory(*args_, **kwargs_):
        if ctm_recursoGlosa.subclass:
            return ctm_recursoGlosa.subclass(*args_, **kwargs_)
        else:
            return ctm_recursoGlosa(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaRecGlosaPrestador(self): return self.numeroGuiaRecGlosaPrestador
    def set_numeroGuiaRecGlosaPrestador(self, numeroGuiaRecGlosaPrestador): self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
    def get_nomeOperadora(self): return self.nomeOperadora
    def set_nomeOperadora(self, nomeOperadora): self.nomeOperadora = nomeOperadora
    def get_objetoRecurso(self): return self.objetoRecurso
    def set_objetoRecurso(self, objetoRecurso): self.objetoRecurso = objetoRecurso
    def get_numeroGuiaRecGlosaOperadora(self): return self.numeroGuiaRecGlosaOperadora
    def set_numeroGuiaRecGlosaOperadora(self, numeroGuiaRecGlosaOperadora): self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_opcaoRecurso(self): return self.opcaoRecurso
    def set_opcaoRecurso(self, opcaoRecurso): self.opcaoRecurso = opcaoRecurso
    def get_valorTotalRecursado(self): return self.valorTotalRecursado
    def set_valorTotalRecursado(self, valorTotalRecursado): self.valorTotalRecursado = valorTotalRecursado
    def get_dataRecurso(self): return self.dataRecurso
    def set_dataRecurso(self, dataRecurso): self.dataRecurso = dataRecurso
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_objetoRecurso(self, value):
        # Validate type dm_objetoRecurso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_objetoRecurso' % {"value" : value.encode("utf-8")} )
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico12(self, value):
        # Validate type st_numerico12, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico12' % {"value" : value} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaRecGlosaPrestador is not None or
            self.nomeOperadora is not None or
            self.objetoRecurso is not None or
            self.numeroGuiaRecGlosaOperadora is not None or
            self.dadosContratado is not None or
            self.numeroLote is not None or
            self.numeroProtocolo is not None or
            self.opcaoRecurso is not None or
            self.valorTotalRecursado is not None or
            self.dataRecurso is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ctm_recursoGlosa', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ctm_recursoGlosa')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ctm_recursoGlosa', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ctm_recursoGlosa'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ctm_recursoGlosa', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaPrestador>%s</%snumeroGuiaRecGlosaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaPrestador'), namespace_, eol_))
        if self.nomeOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeOperadora>%s</%snomeOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeOperadora).encode(ExternalEncoding), input_name='nomeOperadora'), namespace_, eol_))
        if self.objetoRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjetoRecurso>%s</%sobjetoRecurso>%s' % (namespace_, self.gds_format_string(quote_xml(self.objetoRecurso).encode(ExternalEncoding), input_name='objetoRecurso'), namespace_, eol_))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaOperadora>%s</%snumeroGuiaRecGlosaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaOperadora'), namespace_, eol_))
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_integer(self.numeroProtocolo, input_name='numeroProtocolo'), namespace_, eol_))
        if self.opcaoRecurso is not None:
            self.opcaoRecurso.export(outfile, level, namespace_, name_='opcaoRecurso', pretty_print=pretty_print)
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalRecursado>%s</%svalorTotalRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalRecursado).encode(ExternalEncoding), input_name='valorTotalRecursado'), namespace_, eol_))
        if self.dataRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRecurso>%s</%sdataRecurso>%s' % (namespace_, self.gds_format_date(self.dataRecurso, input_name='dataRecurso'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ctm_recursoGlosa'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaPrestador=%s,\n' % quote_python(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding))
        if self.nomeOperadora is not None:
            showIndent(outfile, level)
            outfile.write('nomeOperadora=%s,\n' % quote_python(self.nomeOperadora).encode(ExternalEncoding))
        if self.objetoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('objetoRecurso=%s,\n' % quote_python(self.objetoRecurso).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaOperadora=%s,\n' % quote_python(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding))
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.ct_contratadoDados(\n')
            self.dadosContratado.exportLiteral(outfile, level, name_='dadosContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%d,\n' % self.numeroProtocolo)
        if self.opcaoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('opcaoRecurso=model_.opcaoRecurso(\n')
            self.opcaoRecurso.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalRecursado=%s,\n' % quote_python(self.valorTotalRecursado).encode(ExternalEncoding))
        if self.dataRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRecurso, input_name='dataRecurso'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaRecGlosaPrestador':
            numeroGuiaRecGlosaPrestador_ = child_.text
            numeroGuiaRecGlosaPrestador_ = self.gds_validate_string(numeroGuiaRecGlosaPrestador_, node, 'numeroGuiaRecGlosaPrestador')
            self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        elif nodeName_ == 'nomeOperadora':
            nomeOperadora_ = child_.text
            nomeOperadora_ = self.gds_validate_string(nomeOperadora_, node, 'nomeOperadora')
            self.nomeOperadora = nomeOperadora_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeOperadora)
        elif nodeName_ == 'objetoRecurso':
            objetoRecurso_ = child_.text
            objetoRecurso_ = self.gds_validate_string(objetoRecurso_, node, 'objetoRecurso')
            self.objetoRecurso = objetoRecurso_
            # validate type dm_objetoRecurso
            self.validate_dm_objetoRecurso(self.objetoRecurso)
        elif nodeName_ == 'numeroGuiaRecGlosaOperadora':
            numeroGuiaRecGlosaOperadora_ = child_.text
            numeroGuiaRecGlosaOperadora_ = self.gds_validate_string(numeroGuiaRecGlosaOperadora_, node, 'numeroGuiaRecGlosaOperadora')
            self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        elif nodeName_ == 'dadosContratado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'numeroProtocolo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroProtocolo')
            self.numeroProtocolo = ival_
            # validate type st_numerico12
            self.validate_st_numerico12(self.numeroProtocolo)
        elif nodeName_ == 'opcaoRecurso':
            obj_ = opcaoRecurso.factory()
            obj_.build(child_)
            self.opcaoRecurso = obj_
            obj_.original_tagname_ = 'opcaoRecurso'
        elif nodeName_ == 'valorTotalRecursado':
            valorTotalRecursado_ = child_.text
            valorTotalRecursado_ = self.gds_validate_string(valorTotalRecursado_, node, 'valorTotalRecursado')
            self.valorTotalRecursado = valorTotalRecursado_
        elif nodeName_ == 'dataRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataRecurso)
# end class ctm_recursoGlosa


class recursoGuiaCompleta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, codGlosaGuia=None, justificativaGuia=None):
        self.original_tagname_ = None
        self.codGlosaGuia = codGlosaGuia
        self.validate_dm_tipoGlosa(self.codGlosaGuia)
        self.justificativaGuia = justificativaGuia
        self.validate_st_texto150(self.justificativaGuia)
    def factory(*args_, **kwargs_):
        if recursoGuiaCompleta.subclass:
            return recursoGuiaCompleta.subclass(*args_, **kwargs_)
        else:
            return recursoGuiaCompleta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_codGlosaGuia(self): return self.codGlosaGuia
    def set_codGlosaGuia(self, codGlosaGuia): self.codGlosaGuia = codGlosaGuia
    def get_justificativaGuia(self): return self.justificativaGuia
    def set_justificativaGuia(self, justificativaGuia): self.justificativaGuia = justificativaGuia
    def validate_dm_tipoGlosa(self, value):
        # Validate type dm_tipoGlosa, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1001', '1002', '1003', '1004', '1005', '1006', '1007', '1008', '1009', '1010', '1011', '1012', '1013', '1014', '1015', '1016', '1017', '1018', '1019', '1020', '1021', '1022', '1023', '1024', '1025', '1101', '1102', '1103', '1104', '1201', '1202', '1203', '1204', '1205', '1206', '1207', '1208', '1209', '1210', '1211', '1212', '1213', '1214', '1215', '1216', '1217', '1218', '1301', '1302', '1303', '1304', '1305', '1306', '1307', '1308', '1309', '1310', '1311', '1312', '1313', '1314', '1315', '1316', '1317', '1318', '1319', '1320', '1321', '1322', '1323', '1401', '1402', '1403', '1404', '1405', '1406', '1407', '1408', '1409', '1410', '1411', '1412', '1413', '1414', '1415', '1416', '1417', '1418', '1419', '1420', '1421', '1422', '1423', '1424', '1425', '1426', '1427', '1428', '1429', '1430', '1431', '1432', '1433', '1434', '1435', '1436', '1437', '1438', '1501', '1502', '1503', '1504', '1505', '1506', '1507', '1508', '1509', '1601', '1602', '1603', '1604', '1605', '1606', '1607', '1608', '1609', '1610', '1611', '1612', '1613', '1614', '1615', '1701', '1702', '1703', '1704', '1705', '1706', '1707', '1708', '1709', '1710', '1711', '1712', '1713', '1714', '1715', '1716', '1717', '1718', '1719', '1720', '1721', '1722', '1723', '1724', '1725', '1726', '1727', '1728', '1729', '1730', '1731', '1732', '1733', '1734', '1735', '1736', '1737', '1738', '1739', '1740', '1741', '1742', '1743', '1744', '1745', '1746', '1747', '1748', '1749', '1801', '1802', '1803', '1804', '1805', '1806', '1807', '1808', '1809', '1810', '1811', '1812', '1813', '1814', '1815', '1816', '1817', '1818', '1819', '1820', '1821', '1822', '1823', '1824', '1825', '1826', '1827', '1828', '1829', '1830', '1831', '1832', '1833', '1834', '1835', '1836', '1837', '1838', '1839', '1840', '1901', '1902', '1903', '1904', '1905', '1906', '1907', '1908', '1909', '1910', '1911', '1912', '1913', '1914', '1915', '1916', '1917', '1918', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2101', '2102', '2103', '2104', '2105', '2106', '2107', '2108', '2109', '2110', '2111', '2112', '2113', '2114', '2115', '2201', '2202', '2203', '2204', '2205', '2206', '2207', '2208', '2209', '2210', '2211', '2212', '2213', '2301', '2302', '2303', '2304', '2305', '2306', '2307', '2308', '2309', '2310', '2401', '2402', '2403', '2404', '2405', '2406', '2407', '2408', '2409', '2410', '2411', '2412', '2413', '2414', '2415', '2416', '2417', '2418', '2419', '2420', '2421', '2422', '2423', '2424', '2501', '2502', '2503', '2504', '2505', '2506', '2507', '2508', '2509', '2510', '2511', '2512', '2513', '2514', '2515', '2516', '2601', '2602', '2603', '2604', '2605', '2606', '2607', '2608', '2609', '2610', '2611', '2612', '2613', '2614', '2701', '2702', '2703', '2704', '2705', '2706', '2707', '2708', '2709', '2710', '2711', '2712', '2713', '2714', '2715', '2716', '2717', '2718', '2801', '2802', '2803', '2804', '2805', '2806', '2807', '2808', '2809', '2810', '2811', '2812', '2813', '2814', '2815', '2816', '2817', '2818', '2819', '2820', '2821', '2822', '2901', '2902', '2903', '2904', '2905', '2906', '2907', '2908', '2909', '3001', '3002', '3003', '3004', '3005', '3006', '3007', '3008', '3009', '3010', '3011', '3012', '3013', '3014', '3015', '3016', '3017', '3018', '3019', '3020', '3021', '3022', '3023', '3024', '3025', '3026', '3027', '3028', '3029', '3030', '3031', '3032', '3033', '3034', '3035', '3036', '3037', '3038', '3039', '3040', '3041', '3042', '3043', '3044', '3045', '3046', '3047', '3048', '3049', '3050', '3051', '3052', '3053', '3054', '3055', '3056', '3057', '3058', '3059', '3060', '3061', '3062', '3063', '3064', '3065', '3066', '3067', '3068', '3069', '3070', '3071', '3072', '3073', '3074', '3075', '3076', '3077', '3078', '3079', '3080', '3081', '3082', '3083', '3084', '3085', '3086', '5001', '5002', '5003', '5004', '5005', '5006', '5007', '5008', '5009', '5010', '5011', '5012', '5013', '5014', '5015', '5016', '5017', '5018', '5019', '5020', '5021', '5022', '5023', '5024', '5025', '5026', '5027', '5028', '5029', '5030', '5031', '5032', '5033', '5034', '5035', '5036', '5037', '5038', '5039', '5040', '5041', '5042', '5043', '5044', '5045', '5046']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dm_tipoGlosa' % {"value" : value.encode("utf-8")} )
    def validate_st_texto150(self, value):
        # Validate type st_texto150, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 150:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto150' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.codGlosaGuia is not None or
            self.justificativaGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='recursoGuiaCompleta', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='recursoGuiaCompleta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='recursoGuiaCompleta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='recursoGuiaCompleta'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='recursoGuiaCompleta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codGlosaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodGlosaGuia>%s</%scodGlosaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.codGlosaGuia).encode(ExternalEncoding), input_name='codGlosaGuia'), namespace_, eol_))
        if self.justificativaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sjustificativaGuia>%s</%sjustificativaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.justificativaGuia).encode(ExternalEncoding), input_name='justificativaGuia'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='recursoGuiaCompleta'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.codGlosaGuia is not None:
            showIndent(outfile, level)
            outfile.write('codGlosaGuia=%s,\n' % quote_python(self.codGlosaGuia).encode(ExternalEncoding))
        if self.justificativaGuia is not None:
            showIndent(outfile, level)
            outfile.write('justificativaGuia=%s,\n' % quote_python(self.justificativaGuia).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'codGlosaGuia':
            codGlosaGuia_ = child_.text
            codGlosaGuia_ = self.gds_validate_string(codGlosaGuia_, node, 'codGlosaGuia')
            self.codGlosaGuia = codGlosaGuia_
            # validate type dm_tipoGlosa
            self.validate_dm_tipoGlosa(self.codGlosaGuia)
        elif nodeName_ == 'justificativaGuia':
            justificativaGuia_ = child_.text
            justificativaGuia_ = self.gds_validate_string(justificativaGuia_, node, 'justificativaGuia')
            self.justificativaGuia = justificativaGuia_
            # validate type st_texto150
            self.validate_st_texto150(self.justificativaGuia)
# end class recursoGuiaCompleta


class cto_autorizacaoServico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosAutorizacao=None, numeroCarteira=None, nomeBeneficiario=None, numeroCNS=None, identificadorBeneficiario=None, statusSolicitacao=None, prestadorAutorizado=None, procedimentosAutorizados=None, motivosNegativa=None):
        self.original_tagname_ = None
        self.dadosAutorizacao = dadosAutorizacao
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.identificadorBeneficiario = identificadorBeneficiario
        self.statusSolicitacao = statusSolicitacao
        self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        self.prestadorAutorizado = prestadorAutorizado
        if procedimentosAutorizados is None:
            self.procedimentosAutorizados = []
        else:
            self.procedimentosAutorizados = procedimentosAutorizados
        self.motivosNegativa = motivosNegativa
    def factory(*args_, **kwargs_):
        if cto_autorizacaoServico.subclass:
            return cto_autorizacaoServico.subclass(*args_, **kwargs_)
        else:
            return cto_autorizacaoServico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosAutorizacao(self): return self.dadosAutorizacao
    def set_dadosAutorizacao(self, dadosAutorizacao): self.dadosAutorizacao = dadosAutorizacao
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def get_statusSolicitacao(self): return self.statusSolicitacao
    def set_statusSolicitacao(self, statusSolicitacao): self.statusSolicitacao = statusSolicitacao
    def get_prestadorAutorizado(self): return self.prestadorAutorizado
    def set_prestadorAutorizado(self, prestadorAutorizado): self.prestadorAutorizado = prestadorAutorizado
    def get_procedimentosAutorizados(self): return self.procedimentosAutorizados
    def set_procedimentosAutorizados(self, procedimentosAutorizados): self.procedimentosAutorizados = procedimentosAutorizados
    def add_procedimentosAutorizados(self, value): self.procedimentosAutorizados.append(value)
    def insert_procedimentosAutorizados_at(self, index, value): self.procedimentosAutorizados.insert(index, value)
    def replace_procedimentosAutorizados_at(self, index, value): self.procedimentosAutorizados[index] = value
    def get_motivosNegativa(self): return self.motivosNegativa
    def set_motivosNegativa(self, motivosNegativa): self.motivosNegativa = motivosNegativa
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_statusSolicitacao(self, value):
        # Validate type dm_statusSolicitacao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5', '6', '7']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_statusSolicitacao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dadosAutorizacao is not None or
            self.numeroCarteira is not None or
            self.nomeBeneficiario is not None or
            self.numeroCNS is not None or
            self.identificadorBeneficiario is not None or
            self.statusSolicitacao is not None or
            self.prestadorAutorizado is not None or
            self.procedimentosAutorizados or
            self.motivosNegativa is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_autorizacaoServico', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_autorizacaoServico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_autorizacaoServico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_autorizacaoServico'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_autorizacaoServico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosAutorizacao is not None:
            self.dadosAutorizacao.export(outfile, level, namespace_, name_='dadosAutorizacao', pretty_print=pretty_print)
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
        if self.statusSolicitacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sstatusSolicitacao>%s</%sstatusSolicitacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.statusSolicitacao).encode(ExternalEncoding), input_name='statusSolicitacao'), namespace_, eol_))
        if self.prestadorAutorizado is not None:
            self.prestadorAutorizado.export(outfile, level, namespace_, name_='prestadorAutorizado', pretty_print=pretty_print)
        for procedimentosAutorizados_ in self.procedimentosAutorizados:
            procedimentosAutorizados_.export(outfile, level, namespace_, name_='procedimentosAutorizados', pretty_print=pretty_print)
        if self.motivosNegativa is not None:
            self.motivosNegativa.export(outfile, level, namespace_, name_='motivosNegativa', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cto_autorizacaoServico'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dadosAutorizacao=model_.ct_autorizacaoDados(\n')
            self.dadosAutorizacao.exportLiteral(outfile, level, name_='dadosAutorizacao')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.statusSolicitacao is not None:
            showIndent(outfile, level)
            outfile.write('statusSolicitacao=%s,\n' % quote_python(self.statusSolicitacao).encode(ExternalEncoding))
        if self.prestadorAutorizado is not None:
            showIndent(outfile, level)
            outfile.write('prestadorAutorizado=model_.ct_contratadoDados(\n')
            self.prestadorAutorizado.exportLiteral(outfile, level, name_='prestadorAutorizado')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('procedimentosAutorizados=[\n')
        level += 1
        for procedimentosAutorizados_ in self.procedimentosAutorizados:
            showIndent(outfile, level)
            outfile.write('model_.procedimentosAutorizados(\n')
            procedimentosAutorizados_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.motivosNegativa is not None:
            showIndent(outfile, level)
            outfile.write('motivosNegativa=model_.motivosNegativa(\n')
            self.motivosNegativa.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosAutorizacao':
            obj_ = ct_autorizacaoDados.factory()
            obj_.build(child_)
            self.dadosAutorizacao = obj_
            obj_.original_tagname_ = 'dadosAutorizacao'
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
        elif nodeName_ == 'statusSolicitacao':
            statusSolicitacao_ = child_.text
            statusSolicitacao_ = self.gds_validate_string(statusSolicitacao_, node, 'statusSolicitacao')
            self.statusSolicitacao = statusSolicitacao_
            # validate type dm_statusSolicitacao
            self.validate_dm_statusSolicitacao(self.statusSolicitacao)
        elif nodeName_ == 'prestadorAutorizado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.prestadorAutorizado = obj_
            obj_.original_tagname_ = 'prestadorAutorizado'
        elif nodeName_ == 'procedimentosAutorizados':
            obj_ = procedimentosAutorizados.factory()
            obj_.build(child_)
            self.procedimentosAutorizados.append(obj_)
            obj_.original_tagname_ = 'procedimentosAutorizados'
        elif nodeName_ == 'motivosNegativa':
            obj_ = motivosNegativa.factory()
            obj_.build(child_)
            self.motivosNegativa = obj_
            obj_.original_tagname_ = 'motivosNegativa'
# end class cto_autorizacaoServico


class procedimentosAutorizados(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, procSolic=None, denteRegiao=None, denteFace=None, qtdProc=None, qtdUS=None, valorProc=None, valorFranquia=None, aut=None):
        self.original_tagname_ = None
        self.procSolic = procSolic
        self.denteRegiao = denteRegiao
        self.denteFace = denteFace
        self.validate_st_texto5(self.denteFace)
        self.qtdProc = qtdProc
        self.validate_st_numerico2(self.qtdProc)
        self.qtdUS = qtdUS
        self.valorProc = valorProc
        self.valorFranquia = valorFranquia
        self.aut = aut
        self.validate_dm_simNao(self.aut)
    def factory(*args_, **kwargs_):
        if procedimentosAutorizados.subclass:
            return procedimentosAutorizados.subclass(*args_, **kwargs_)
        else:
            return procedimentosAutorizados(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_procSolic(self): return self.procSolic
    def set_procSolic(self, procSolic): self.procSolic = procSolic
    def get_denteRegiao(self): return self.denteRegiao
    def set_denteRegiao(self, denteRegiao): self.denteRegiao = denteRegiao
    def get_denteFace(self): return self.denteFace
    def set_denteFace(self, denteFace): self.denteFace = denteFace
    def get_qtdProc(self): return self.qtdProc
    def set_qtdProc(self, qtdProc): self.qtdProc = qtdProc
    def get_qtdUS(self): return self.qtdUS
    def set_qtdUS(self, qtdUS): self.qtdUS = qtdUS
    def get_valorProc(self): return self.valorProc
    def set_valorProc(self, valorProc): self.valorProc = valorProc
    def get_valorFranquia(self): return self.valorFranquia
    def set_valorFranquia(self, valorFranquia): self.valorFranquia = valorFranquia
    def get_aut(self): return self.aut
    def set_aut(self, aut): self.aut = aut
    def validate_st_texto5(self, value):
        # Validate type st_texto5, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto5' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto5' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico2(self, value):
        # Validate type st_numerico2, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 2:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico2' % {"value" : value} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.procSolic is not None or
            self.denteRegiao is not None or
            self.denteFace is not None or
            self.qtdProc is not None or
            self.qtdUS is not None or
            self.valorProc is not None or
            self.valorFranquia is not None or
            self.aut is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentosAutorizados', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentosAutorizados')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentosAutorizados', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentosAutorizados'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentosAutorizados', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.procSolic is not None:
            self.procSolic.export(outfile, level, namespace_, name_='procSolic', pretty_print=pretty_print)
        if self.denteRegiao is not None:
            self.denteRegiao.export(outfile, level, namespace_, name_='denteRegiao', pretty_print=pretty_print)
        if self.denteFace is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdenteFace>%s</%sdenteFace>%s' % (namespace_, self.gds_format_string(quote_xml(self.denteFace).encode(ExternalEncoding), input_name='denteFace'), namespace_, eol_))
        if self.qtdProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdProc>%s</%sqtdProc>%s' % (namespace_, self.gds_format_integer(self.qtdProc, input_name='qtdProc'), namespace_, eol_))
        if self.qtdUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdUS>%s</%sqtdUS>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdUS).encode(ExternalEncoding), input_name='qtdUS'), namespace_, eol_))
        if self.valorProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorProc>%s</%svalorProc>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorProc).encode(ExternalEncoding), input_name='valorProc'), namespace_, eol_))
        if self.valorFranquia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorFranquia>%s</%svalorFranquia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorFranquia).encode(ExternalEncoding), input_name='valorFranquia'), namespace_, eol_))
        if self.aut is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saut>%s</%saut>%s' % (namespace_, self.gds_format_string(quote_xml(self.aut).encode(ExternalEncoding), input_name='aut'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='procedimentosAutorizados'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.procSolic is not None:
            showIndent(outfile, level)
            outfile.write('procSolic=model_.ct_procedimentoDados(\n')
            self.procSolic.exportLiteral(outfile, level, name_='procSolic')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteRegiao is not None:
            showIndent(outfile, level)
            outfile.write('denteRegiao=model_.denteRegiao(\n')
            self.denteRegiao.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.denteFace is not None:
            showIndent(outfile, level)
            outfile.write('denteFace=%s,\n' % quote_python(self.denteFace).encode(ExternalEncoding))
        if self.qtdProc is not None:
            showIndent(outfile, level)
            outfile.write('qtdProc=%d,\n' % self.qtdProc)
        if self.qtdUS is not None:
            showIndent(outfile, level)
            outfile.write('qtdUS=%s,\n' % quote_python(self.qtdUS).encode(ExternalEncoding))
        if self.valorProc is not None:
            showIndent(outfile, level)
            outfile.write('valorProc=%s,\n' % quote_python(self.valorProc).encode(ExternalEncoding))
        if self.valorFranquia is not None:
            showIndent(outfile, level)
            outfile.write('valorFranquia=%s,\n' % quote_python(self.valorFranquia).encode(ExternalEncoding))
        if self.aut is not None:
            showIndent(outfile, level)
            outfile.write('aut=%s,\n' % quote_python(self.aut).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'procSolic':
            obj_ = ct_procedimentoDados.factory()
            obj_.build(child_)
            self.procSolic = obj_
            obj_.original_tagname_ = 'procSolic'
        elif nodeName_ == 'denteRegiao':
            obj_ = denteRegiao.factory()
            obj_.build(child_)
            self.denteRegiao = obj_
            obj_.original_tagname_ = 'denteRegiao'
        elif nodeName_ == 'denteFace':
            denteFace_ = child_.text
            denteFace_ = self.gds_validate_string(denteFace_, node, 'denteFace')
            self.denteFace = denteFace_
            # validate type st_texto5
            self.validate_st_texto5(self.denteFace)
        elif nodeName_ == 'qtdProc':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'qtdProc')
            self.qtdProc = ival_
            # validate type st_numerico2
            self.validate_st_numerico2(self.qtdProc)
        elif nodeName_ == 'qtdUS':
            qtdUS_ = child_.text
            qtdUS_ = self.gds_validate_string(qtdUS_, node, 'qtdUS')
            self.qtdUS = qtdUS_
        elif nodeName_ == 'valorProc':
            valorProc_ = child_.text
            valorProc_ = self.gds_validate_string(valorProc_, node, 'valorProc')
            self.valorProc = valorProc_
        elif nodeName_ == 'valorFranquia':
            valorFranquia_ = child_.text
            valorFranquia_ = self.gds_validate_string(valorFranquia_, node, 'valorFranquia')
            self.valorFranquia = valorFranquia_
        elif nodeName_ == 'aut':
            aut_ = child_.text
            aut_ = self.gds_validate_string(aut_, node, 'aut')
            self.aut = aut_
            # validate type dm_simNao
            self.validate_dm_simNao(self.aut)
# end class procedimentosAutorizados


class cto_anexoSituacaoInicial(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaAnexo=None, numeroGuiaReferenciada=None, numeroGuiaOperadora=None, nomeBeneficiario=None, numeroCarteira=None, ct_situacaoInicial=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaAnexo = numeroGuiaAnexo
        self.validate_st_texto20(self.numeroGuiaAnexo)
        self.numeroGuiaReferenciada = numeroGuiaReferenciada
        self.validate_st_texto20(self.numeroGuiaReferenciada)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.ct_situacaoInicial = ct_situacaoInicial
    def factory(*args_, **kwargs_):
        if cto_anexoSituacaoInicial.subclass:
            return cto_anexoSituacaoInicial.subclass(*args_, **kwargs_)
        else:
            return cto_anexoSituacaoInicial(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaAnexo(self): return self.numeroGuiaAnexo
    def set_numeroGuiaAnexo(self, numeroGuiaAnexo): self.numeroGuiaAnexo = numeroGuiaAnexo
    def get_numeroGuiaReferenciada(self): return self.numeroGuiaReferenciada
    def set_numeroGuiaReferenciada(self, numeroGuiaReferenciada): self.numeroGuiaReferenciada = numeroGuiaReferenciada
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_ct_situacaoInicial(self): return self.ct_situacaoInicial
    def set_ct_situacaoInicial(self, ct_situacaoInicial): self.ct_situacaoInicial = ct_situacaoInicial
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaAnexo is not None or
            self.numeroGuiaReferenciada is not None or
            self.numeroGuiaOperadora is not None or
            self.nomeBeneficiario is not None or
            self.numeroCarteira is not None or
            self.ct_situacaoInicial is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_anexoSituacaoInicial', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_anexoSituacaoInicial')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_anexoSituacaoInicial', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_anexoSituacaoInicial'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_anexoSituacaoInicial', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaAnexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaAnexo>%s</%snumeroGuiaAnexo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaAnexo).encode(ExternalEncoding), input_name='numeroGuiaAnexo'), namespace_, eol_))
        if self.numeroGuiaReferenciada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaReferenciada>%s</%snumeroGuiaReferenciada>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaReferenciada).encode(ExternalEncoding), input_name='numeroGuiaReferenciada'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.ct_situacaoInicial is not None:
            self.ct_situacaoInicial.export(outfile, level, namespace_, name_='ct_situacaoInicial', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cto_anexoSituacaoInicial'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaAnexo is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaAnexo=%s,\n' % quote_python(self.numeroGuiaAnexo).encode(ExternalEncoding))
        if self.numeroGuiaReferenciada is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaReferenciada=%s,\n' % quote_python(self.numeroGuiaReferenciada).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.ct_situacaoInicial is not None:
            showIndent(outfile, level)
            outfile.write('ct_situacaoInicial=model_.ct_situacaoInicial(\n')
            self.ct_situacaoInicial.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaAnexo':
            numeroGuiaAnexo_ = child_.text
            numeroGuiaAnexo_ = self.gds_validate_string(numeroGuiaAnexo_, node, 'numeroGuiaAnexo')
            self.numeroGuiaAnexo = numeroGuiaAnexo_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaAnexo)
        elif nodeName_ == 'numeroGuiaReferenciada':
            numeroGuiaReferenciada_ = child_.text
            numeroGuiaReferenciada_ = self.gds_validate_string(numeroGuiaReferenciada_, node, 'numeroGuiaReferenciada')
            self.numeroGuiaReferenciada = numeroGuiaReferenciada_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaReferenciada)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'ct_situacaoInicial':
            obj_ = ct_situacaoInicial.factory()
            obj_.build(child_)
            self.ct_situacaoInicial = obj_
            obj_.original_tagname_ = 'ct_situacaoInicial'
# end class cto_anexoSituacaoInicial


class ct_situacaoInicial(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, situacaoClinica=None, doencaPeriodontal=None, alteracaoTecidoMole=None, observacao=None):
        self.original_tagname_ = None
        self.situacaoClinica = situacaoClinica
        self.doencaPeriodontal = doencaPeriodontal
        self.validate_st_logico(self.doencaPeriodontal)
        self.alteracaoTecidoMole = alteracaoTecidoMole
        self.validate_st_logico(self.alteracaoTecidoMole)
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if ct_situacaoInicial.subclass:
            return ct_situacaoInicial.subclass(*args_, **kwargs_)
        else:
            return ct_situacaoInicial(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_situacaoClinica(self): return self.situacaoClinica
    def set_situacaoClinica(self, situacaoClinica): self.situacaoClinica = situacaoClinica
    def get_doencaPeriodontal(self): return self.doencaPeriodontal
    def set_doencaPeriodontal(self, doencaPeriodontal): self.doencaPeriodontal = doencaPeriodontal
    def get_alteracaoTecidoMole(self): return self.alteracaoTecidoMole
    def set_alteracaoTecidoMole(self, alteracaoTecidoMole): self.alteracaoTecidoMole = alteracaoTecidoMole
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_logico(self, value):
        # Validate type st_logico, a restriction on boolean.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.situacaoClinica is not None or
            self.doencaPeriodontal is not None or
            self.alteracaoTecidoMole is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_situacaoInicial', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_situacaoInicial')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_situacaoInicial', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_situacaoInicial'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_situacaoInicial', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.situacaoClinica is not None:
            self.situacaoClinica.export(outfile, level, namespace_, name_='situacaoClinica', pretty_print=pretty_print)
        if self.doencaPeriodontal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdoencaPeriodontal>%s</%sdoencaPeriodontal>%s' % (namespace_, self.gds_format_boolean(self.doencaPeriodontal, input_name='doencaPeriodontal'), namespace_, eol_))
        if self.alteracaoTecidoMole is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salteracaoTecidoMole>%s</%salteracaoTecidoMole>%s' % (namespace_, self.gds_format_boolean(self.alteracaoTecidoMole, input_name='alteracaoTecidoMole'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='ct_situacaoInicial'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.situacaoClinica is not None:
            showIndent(outfile, level)
            outfile.write('situacaoClinica=model_.ct_situacaoClinica(\n')
            self.situacaoClinica.exportLiteral(outfile, level, name_='situacaoClinica')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.doencaPeriodontal is not None:
            showIndent(outfile, level)
            outfile.write('doencaPeriodontal=%s,\n' % self.doencaPeriodontal)
        if self.alteracaoTecidoMole is not None:
            showIndent(outfile, level)
            outfile.write('alteracaoTecidoMole=%s,\n' % self.alteracaoTecidoMole)
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'situacaoClinica':
            obj_ = ct_situacaoClinica.factory()
            obj_.build(child_)
            self.situacaoClinica = obj_
            obj_.original_tagname_ = 'situacaoClinica'
        elif nodeName_ == 'doencaPeriodontal':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'doencaPeriodontal')
            self.doencaPeriodontal = ival_
            # validate type st_logico
            self.validate_st_logico(self.doencaPeriodontal)
        elif nodeName_ == 'alteracaoTecidoMole':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'alteracaoTecidoMole')
            self.alteracaoTecidoMole = ival_
            # validate type st_logico
            self.validate_st_logico(self.alteracaoTecidoMole)
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class ct_situacaoInicial


class cto_anexoSituacaoInicialnaGTO(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaAnexo=None, numeroGuiaReferenciada=None, numeroGuiaOperadora=None, ct_situacaoInicial=None):
        self.original_tagname_ = None
        self.numeroGuiaAnexo = numeroGuiaAnexo
        self.validate_st_texto20(self.numeroGuiaAnexo)
        self.numeroGuiaReferenciada = numeroGuiaReferenciada
        self.validate_st_texto20(self.numeroGuiaReferenciada)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.ct_situacaoInicial = ct_situacaoInicial
    def factory(*args_, **kwargs_):
        if cto_anexoSituacaoInicialnaGTO.subclass:
            return cto_anexoSituacaoInicialnaGTO.subclass(*args_, **kwargs_)
        else:
            return cto_anexoSituacaoInicialnaGTO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaAnexo(self): return self.numeroGuiaAnexo
    def set_numeroGuiaAnexo(self, numeroGuiaAnexo): self.numeroGuiaAnexo = numeroGuiaAnexo
    def get_numeroGuiaReferenciada(self): return self.numeroGuiaReferenciada
    def set_numeroGuiaReferenciada(self, numeroGuiaReferenciada): self.numeroGuiaReferenciada = numeroGuiaReferenciada
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_ct_situacaoInicial(self): return self.ct_situacaoInicial
    def set_ct_situacaoInicial(self, ct_situacaoInicial): self.ct_situacaoInicial = ct_situacaoInicial
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaAnexo is not None or
            self.numeroGuiaReferenciada is not None or
            self.numeroGuiaOperadora is not None or
            self.ct_situacaoInicial is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_anexoSituacaoInicialnaGTO', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_anexoSituacaoInicialnaGTO')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_anexoSituacaoInicialnaGTO', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_anexoSituacaoInicialnaGTO'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_anexoSituacaoInicialnaGTO', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaAnexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaAnexo>%s</%snumeroGuiaAnexo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaAnexo).encode(ExternalEncoding), input_name='numeroGuiaAnexo'), namespace_, eol_))
        if self.numeroGuiaReferenciada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaReferenciada>%s</%snumeroGuiaReferenciada>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaReferenciada).encode(ExternalEncoding), input_name='numeroGuiaReferenciada'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.ct_situacaoInicial is not None:
            self.ct_situacaoInicial.export(outfile, level, namespace_, name_='ct_situacaoInicial', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cto_anexoSituacaoInicialnaGTO'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaAnexo is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaAnexo=%s,\n' % quote_python(self.numeroGuiaAnexo).encode(ExternalEncoding))
        if self.numeroGuiaReferenciada is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaReferenciada=%s,\n' % quote_python(self.numeroGuiaReferenciada).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.ct_situacaoInicial is not None:
            showIndent(outfile, level)
            outfile.write('ct_situacaoInicial=model_.ct_situacaoInicial(\n')
            self.ct_situacaoInicial.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaAnexo':
            numeroGuiaAnexo_ = child_.text
            numeroGuiaAnexo_ = self.gds_validate_string(numeroGuiaAnexo_, node, 'numeroGuiaAnexo')
            self.numeroGuiaAnexo = numeroGuiaAnexo_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaAnexo)
        elif nodeName_ == 'numeroGuiaReferenciada':
            numeroGuiaReferenciada_ = child_.text
            numeroGuiaReferenciada_ = self.gds_validate_string(numeroGuiaReferenciada_, node, 'numeroGuiaReferenciada')
            self.numeroGuiaReferenciada = numeroGuiaReferenciada_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaReferenciada)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'ct_situacaoInicial':
            obj_ = ct_situacaoInicial.factory()
            obj_.build(child_)
            self.ct_situacaoInicial = obj_
            obj_.original_tagname_ = 'ct_situacaoInicial'
# end class cto_anexoSituacaoInicialnaGTO


class cto_demonstrativoOdontologia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cabecalhoDemonstrativoOdonto=None, dadosPrestador=None, dadosPagamentoPorData=None, totaisBrutoDemonstrativo=None, debCredDemonstrativo=None, totalDebitosDemonstativo=None, totalCreditosDemonstrativo=None, valorRecebidoDemonstrativo=None, observacao=None):
        self.original_tagname_ = None
        self.cabecalhoDemonstrativoOdonto = cabecalhoDemonstrativoOdonto
        self.dadosPrestador = dadosPrestador
        if dadosPagamentoPorData is None:
            self.dadosPagamentoPorData = []
        else:
            self.dadosPagamentoPorData = dadosPagamentoPorData
        self.totaisBrutoDemonstrativo = totaisBrutoDemonstrativo
        self.debCredDemonstrativo = debCredDemonstrativo
        self.totalDebitosDemonstativo = totalDebitosDemonstativo
        self.totalCreditosDemonstrativo = totalCreditosDemonstrativo
        self.valorRecebidoDemonstrativo = valorRecebidoDemonstrativo
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
    def factory(*args_, **kwargs_):
        if cto_demonstrativoOdontologia.subclass:
            return cto_demonstrativoOdontologia.subclass(*args_, **kwargs_)
        else:
            return cto_demonstrativoOdontologia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cabecalhoDemonstrativoOdonto(self): return self.cabecalhoDemonstrativoOdonto
    def set_cabecalhoDemonstrativoOdonto(self, cabecalhoDemonstrativoOdonto): self.cabecalhoDemonstrativoOdonto = cabecalhoDemonstrativoOdonto
    def get_dadosPrestador(self): return self.dadosPrestador
    def set_dadosPrestador(self, dadosPrestador): self.dadosPrestador = dadosPrestador
    def get_dadosPagamentoPorData(self): return self.dadosPagamentoPorData
    def set_dadosPagamentoPorData(self, dadosPagamentoPorData): self.dadosPagamentoPorData = dadosPagamentoPorData
    def add_dadosPagamentoPorData(self, value): self.dadosPagamentoPorData.append(value)
    def insert_dadosPagamentoPorData_at(self, index, value): self.dadosPagamentoPorData.insert(index, value)
    def replace_dadosPagamentoPorData_at(self, index, value): self.dadosPagamentoPorData[index] = value
    def get_totaisBrutoDemonstrativo(self): return self.totaisBrutoDemonstrativo
    def set_totaisBrutoDemonstrativo(self, totaisBrutoDemonstrativo): self.totaisBrutoDemonstrativo = totaisBrutoDemonstrativo
    def get_debCredDemonstrativo(self): return self.debCredDemonstrativo
    def set_debCredDemonstrativo(self, debCredDemonstrativo): self.debCredDemonstrativo = debCredDemonstrativo
    def get_totalDebitosDemonstativo(self): return self.totalDebitosDemonstativo
    def set_totalDebitosDemonstativo(self, totalDebitosDemonstativo): self.totalDebitosDemonstativo = totalDebitosDemonstativo
    def get_totalCreditosDemonstrativo(self): return self.totalCreditosDemonstrativo
    def set_totalCreditosDemonstrativo(self, totalCreditosDemonstrativo): self.totalCreditosDemonstrativo = totalCreditosDemonstrativo
    def get_valorRecebidoDemonstrativo(self): return self.valorRecebidoDemonstrativo
    def set_valorRecebidoDemonstrativo(self, valorRecebidoDemonstrativo): self.valorRecebidoDemonstrativo = valorRecebidoDemonstrativo
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.cabecalhoDemonstrativoOdonto is not None or
            self.dadosPrestador is not None or
            self.dadosPagamentoPorData or
            self.totaisBrutoDemonstrativo is not None or
            self.debCredDemonstrativo is not None or
            self.totalDebitosDemonstativo is not None or
            self.totalCreditosDemonstrativo is not None or
            self.valorRecebidoDemonstrativo is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_demonstrativoOdontologia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_demonstrativoOdontologia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_demonstrativoOdontologia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_demonstrativoOdontologia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_demonstrativoOdontologia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cabecalhoDemonstrativoOdonto is not None:
            self.cabecalhoDemonstrativoOdonto.export(outfile, level, namespace_, name_='cabecalhoDemonstrativoOdonto', pretty_print=pretty_print)
        if self.dadosPrestador is not None:
            self.dadosPrestador.export(outfile, level, namespace_, name_='dadosPrestador', pretty_print=pretty_print)
        for dadosPagamentoPorData_ in self.dadosPagamentoPorData:
            dadosPagamentoPorData_.export(outfile, level, namespace_, name_='dadosPagamentoPorData', pretty_print=pretty_print)
        if self.totaisBrutoDemonstrativo is not None:
            self.totaisBrutoDemonstrativo.export(outfile, level, namespace_, name_='totaisBrutoDemonstrativo', pretty_print=pretty_print)
        if self.debCredDemonstrativo is not None:
            self.debCredDemonstrativo.export(outfile, level, namespace_, name_='debCredDemonstrativo', pretty_print=pretty_print)
        if self.totalDebitosDemonstativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalDebitosDemonstativo>%s</%stotalDebitosDemonstativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalDebitosDemonstativo).encode(ExternalEncoding), input_name='totalDebitosDemonstativo'), namespace_, eol_))
        if self.totalCreditosDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stotalCreditosDemonstrativo>%s</%stotalCreditosDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.totalCreditosDemonstrativo).encode(ExternalEncoding), input_name='totalCreditosDemonstrativo'), namespace_, eol_))
        if self.valorRecebidoDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorRecebidoDemonstrativo>%s</%svalorRecebidoDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorRecebidoDemonstrativo).encode(ExternalEncoding), input_name='valorRecebidoDemonstrativo'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='cto_demonstrativoOdontologia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cabecalhoDemonstrativoOdonto is not None:
            showIndent(outfile, level)
            outfile.write('cabecalhoDemonstrativoOdonto=model_.cabecalhoDemonstrativoOdonto(\n')
            self.cabecalhoDemonstrativoOdonto.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.dadosPrestador is not None:
            showIndent(outfile, level)
            outfile.write('dadosPrestador=model_.dadosPrestador(\n')
            self.dadosPrestador.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('dadosPagamentoPorData=[\n')
        level += 1
        for dadosPagamentoPorData_ in self.dadosPagamentoPorData:
            showIndent(outfile, level)
            outfile.write('model_.dadosPagamentoPorData(\n')
            dadosPagamentoPorData_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.totaisBrutoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totaisBrutoDemonstrativo=model_.totaisBrutoDemonstrativo(\n')
            self.totaisBrutoDemonstrativo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.debCredDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('debCredDemonstrativo=model_.debCredDemonstrativo(\n')
            self.debCredDemonstrativo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.totalDebitosDemonstativo is not None:
            showIndent(outfile, level)
            outfile.write('totalDebitosDemonstativo=%s,\n' % quote_python(self.totalDebitosDemonstativo).encode(ExternalEncoding))
        if self.totalCreditosDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('totalCreditosDemonstrativo=%s,\n' % quote_python(self.totalCreditosDemonstrativo).encode(ExternalEncoding))
        if self.valorRecebidoDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('valorRecebidoDemonstrativo=%s,\n' % quote_python(self.valorRecebidoDemonstrativo).encode(ExternalEncoding))
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cabecalhoDemonstrativoOdonto':
            obj_ = cabecalhoDemonstrativoOdonto.factory()
            obj_.build(child_)
            self.cabecalhoDemonstrativoOdonto = obj_
            obj_.original_tagname_ = 'cabecalhoDemonstrativoOdonto'
        elif nodeName_ == 'dadosPrestador':
            obj_ = dadosPrestador.factory()
            obj_.build(child_)
            self.dadosPrestador = obj_
            obj_.original_tagname_ = 'dadosPrestador'
        elif nodeName_ == 'dadosPagamentoPorData':
            obj_ = dadosPagamentoPorData.factory()
            obj_.build(child_)
            self.dadosPagamentoPorData.append(obj_)
            obj_.original_tagname_ = 'dadosPagamentoPorData'
        elif nodeName_ == 'totaisBrutoDemonstrativo':
            obj_ = totaisBrutoDemonstrativo.factory()
            obj_.build(child_)
            self.totaisBrutoDemonstrativo = obj_
            obj_.original_tagname_ = 'totaisBrutoDemonstrativo'
        elif nodeName_ == 'debCredDemonstrativo':
            obj_ = debCredDemonstrativo.factory()
            obj_.build(child_)
            self.debCredDemonstrativo = obj_
            obj_.original_tagname_ = 'debCredDemonstrativo'
        elif nodeName_ == 'totalDebitosDemonstativo':
            totalDebitosDemonstativo_ = child_.text
            totalDebitosDemonstativo_ = self.gds_validate_string(totalDebitosDemonstativo_, node, 'totalDebitosDemonstativo')
            self.totalDebitosDemonstativo = totalDebitosDemonstativo_
        elif nodeName_ == 'totalCreditosDemonstrativo':
            totalCreditosDemonstrativo_ = child_.text
            totalCreditosDemonstrativo_ = self.gds_validate_string(totalCreditosDemonstrativo_, node, 'totalCreditosDemonstrativo')
            self.totalCreditosDemonstrativo = totalCreditosDemonstrativo_
        elif nodeName_ == 'valorRecebidoDemonstrativo':
            valorRecebidoDemonstrativo_ = child_.text
            valorRecebidoDemonstrativo_ = self.gds_validate_string(valorRecebidoDemonstrativo_, node, 'valorRecebidoDemonstrativo')
            self.valorRecebidoDemonstrativo = valorRecebidoDemonstrativo_
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
# end class cto_demonstrativoOdontologia


class cabecalhoDemonstrativoOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroDemonstrativo=None, nomeOperadora=None, cnpjOper=None, periodoProc=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroDemonstrativo = numeroDemonstrativo
        self.validate_st_texto12(self.numeroDemonstrativo)
        self.nomeOperadora = nomeOperadora
        self.validate_st_texto70(self.nomeOperadora)
        self.cnpjOper = cnpjOper
        self.validate_st_CNPJ(self.cnpjOper)
        self.periodoProc = periodoProc
    def factory(*args_, **kwargs_):
        if cabecalhoDemonstrativoOdonto.subclass:
            return cabecalhoDemonstrativoOdonto.subclass(*args_, **kwargs_)
        else:
            return cabecalhoDemonstrativoOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroDemonstrativo(self): return self.numeroDemonstrativo
    def set_numeroDemonstrativo(self, numeroDemonstrativo): self.numeroDemonstrativo = numeroDemonstrativo
    def get_nomeOperadora(self): return self.nomeOperadora
    def set_nomeOperadora(self, nomeOperadora): self.nomeOperadora = nomeOperadora
    def get_cnpjOper(self): return self.cnpjOper
    def set_cnpjOper(self, cnpjOper): self.cnpjOper = cnpjOper
    def get_periodoProc(self): return self.periodoProc
    def set_periodoProc(self, periodoProc): self.periodoProc = periodoProc
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroDemonstrativo is not None or
            self.nomeOperadora is not None or
            self.cnpjOper is not None or
            self.periodoProc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cabecalhoDemonstrativoOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cabecalhoDemonstrativoOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cabecalhoDemonstrativoOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cabecalhoDemonstrativoOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cabecalhoDemonstrativoOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroDemonstrativo>%s</%snumeroDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroDemonstrativo).encode(ExternalEncoding), input_name='numeroDemonstrativo'), namespace_, eol_))
        if self.nomeOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeOperadora>%s</%snomeOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeOperadora).encode(ExternalEncoding), input_name='nomeOperadora'), namespace_, eol_))
        if self.cnpjOper is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnpjOper>%s</%scnpjOper>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnpjOper).encode(ExternalEncoding), input_name='cnpjOper'), namespace_, eol_))
        if self.periodoProc is not None:
            self.periodoProc.export(outfile, level, namespace_, name_='periodoProc', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cabecalhoDemonstrativoOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('numeroDemonstrativo=%s,\n' % quote_python(self.numeroDemonstrativo).encode(ExternalEncoding))
        if self.nomeOperadora is not None:
            showIndent(outfile, level)
            outfile.write('nomeOperadora=%s,\n' % quote_python(self.nomeOperadora).encode(ExternalEncoding))
        if self.cnpjOper is not None:
            showIndent(outfile, level)
            outfile.write('cnpjOper=%s,\n' % quote_python(self.cnpjOper).encode(ExternalEncoding))
        if self.periodoProc is not None:
            showIndent(outfile, level)
            outfile.write('periodoProc=model_.periodoProc(\n')
            self.periodoProc.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroDemonstrativo':
            numeroDemonstrativo_ = child_.text
            numeroDemonstrativo_ = self.gds_validate_string(numeroDemonstrativo_, node, 'numeroDemonstrativo')
            self.numeroDemonstrativo = numeroDemonstrativo_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroDemonstrativo)
        elif nodeName_ == 'nomeOperadora':
            nomeOperadora_ = child_.text
            nomeOperadora_ = self.gds_validate_string(nomeOperadora_, node, 'nomeOperadora')
            self.nomeOperadora = nomeOperadora_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeOperadora)
        elif nodeName_ == 'cnpjOper':
            cnpjOper_ = child_.text
            cnpjOper_ = self.gds_validate_string(cnpjOper_, node, 'cnpjOper')
            self.cnpjOper = cnpjOper_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.cnpjOper)
        elif nodeName_ == 'periodoProc':
            obj_ = periodoProc.factory()
            obj_.build(child_)
            self.periodoProc = obj_
            obj_.original_tagname_ = 'periodoProc'
# end class cabecalhoDemonstrativoOdonto


class periodoProc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, datainicio=None, datafim=None):
        self.original_tagname_ = None
        if isinstance(datainicio, basestring):
            initvalue_ = datetime_.datetime.strptime(datainicio, '%Y-%m-%d').date()
        else:
            initvalue_ = datainicio
        self.datainicio = initvalue_
        if isinstance(datafim, basestring):
            initvalue_ = datetime_.datetime.strptime(datafim, '%Y-%m-%d').date()
        else:
            initvalue_ = datafim
        self.datafim = initvalue_
    def factory(*args_, **kwargs_):
        if periodoProc.subclass:
            return periodoProc.subclass(*args_, **kwargs_)
        else:
            return periodoProc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_datainicio(self): return self.datainicio
    def set_datainicio(self, datainicio): self.datainicio = datainicio
    def get_datafim(self): return self.datafim
    def set_datafim(self, datafim): self.datafim = datafim
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.datainicio is not None or
            self.datafim is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='periodoProc', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='periodoProc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='periodoProc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='periodoProc'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='periodoProc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.datainicio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatainicio>%s</%sdatainicio>%s' % (namespace_, self.gds_format_date(self.datainicio, input_name='datainicio'), namespace_, eol_))
        if self.datafim is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatafim>%s</%sdatafim>%s' % (namespace_, self.gds_format_date(self.datafim, input_name='datafim'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='periodoProc'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.datainicio is not None:
            showIndent(outfile, level)
            outfile.write('datainicio=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.datainicio, input_name='datainicio'))
        if self.datafim is not None:
            showIndent(outfile, level)
            outfile.write('datafim=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.datafim, input_name='datafim'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'datainicio':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.datainicio = dval_
            # validate type st_data
            self.validate_st_data(self.datainicio)
        elif nodeName_ == 'datafim':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.datafim = dval_
            # validate type st_data
            self.validate_st_data(self.datafim)
# end class periodoProc


class cpfCNPJContratado(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cnpjPrestador=None, cpfContratado=None):
        self.original_tagname_ = None
        self.cnpjPrestador = cnpjPrestador
        self.validate_st_CNPJ(self.cnpjPrestador)
        self.cpfContratado = cpfContratado
        self.validate_st_CPF(self.cpfContratado)
    def factory(*args_, **kwargs_):
        if cpfCNPJContratado.subclass:
            return cpfCNPJContratado.subclass(*args_, **kwargs_)
        else:
            return cpfCNPJContratado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cnpjPrestador(self): return self.cnpjPrestador
    def set_cnpjPrestador(self, cnpjPrestador): self.cnpjPrestador = cnpjPrestador
    def get_cpfContratado(self): return self.cpfContratado
    def set_cpfContratado(self, cpfContratado): self.cpfContratado = cpfContratado
    def validate_st_CNPJ(self, value):
        # Validate type st_CNPJ, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CNPJ_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CNPJ_patterns_, ))
    validate_st_CNPJ_patterns_ = [['^[0-9]{14}$']]
    def validate_st_CPF(self, value):
        # Validate type st_CPF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_st_CPF_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_CPF_patterns_, ))
    validate_st_CPF_patterns_ = [['^[0-9]{11}$']]
    def hasContent_(self):
        if (
            self.cnpjPrestador is not None or
            self.cpfContratado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cpfCNPJContratado', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cpfCNPJContratado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cpfCNPJContratado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cpfCNPJContratado'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cpfCNPJContratado', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cnpjPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnpjPrestador>%s</%scnpjPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnpjPrestador).encode(ExternalEncoding), input_name='cnpjPrestador'), namespace_, eol_))
        if self.cpfContratado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scpfContratado>%s</%scpfContratado>%s' % (namespace_, self.gds_format_string(quote_xml(self.cpfContratado).encode(ExternalEncoding), input_name='cpfContratado'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='cpfCNPJContratado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.cnpjPrestador is not None:
            showIndent(outfile, level)
            outfile.write('cnpjPrestador=%s,\n' % quote_python(self.cnpjPrestador).encode(ExternalEncoding))
        if self.cpfContratado is not None:
            showIndent(outfile, level)
            outfile.write('cpfContratado=%s,\n' % quote_python(self.cpfContratado).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cnpjPrestador':
            cnpjPrestador_ = child_.text
            cnpjPrestador_ = self.gds_validate_string(cnpjPrestador_, node, 'cnpjPrestador')
            self.cnpjPrestador = cnpjPrestador_
            # validate type st_CNPJ
            self.validate_st_CNPJ(self.cnpjPrestador)
        elif nodeName_ == 'cpfContratado':
            cpfContratado_ = child_.text
            cpfContratado_ = self.gds_validate_string(cpfContratado_, node, 'cpfContratado')
            self.cpfContratado = cpfContratado_
            # validate type st_CPF
            self.validate_st_CPF(self.cpfContratado)
# end class cpfCNPJContratado


class dadosPagamentoPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dadosPagamento=None, protocolos=None, totaisPorData=None, debCredPorDataPagamento=None, totalLiquidoPorData=None):
        self.original_tagname_ = None
        self.dadosPagamento = dadosPagamento
        if protocolos is None:
            self.protocolos = []
        else:
            self.protocolos = protocolos
        self.totaisPorData = totaisPorData
        self.debCredPorDataPagamento = debCredPorDataPagamento
        self.totalLiquidoPorData = totalLiquidoPorData
    def factory(*args_, **kwargs_):
        if dadosPagamentoPorData.subclass:
            return dadosPagamentoPorData.subclass(*args_, **kwargs_)
        else:
            return dadosPagamentoPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dadosPagamento(self): return self.dadosPagamento
    def set_dadosPagamento(self, dadosPagamento): self.dadosPagamento = dadosPagamento
    def get_protocolos(self): return self.protocolos
    def set_protocolos(self, protocolos): self.protocolos = protocolos
    def add_protocolos(self, value): self.protocolos.append(value)
    def insert_protocolos_at(self, index, value): self.protocolos.insert(index, value)
    def replace_protocolos_at(self, index, value): self.protocolos[index] = value
    def get_totaisPorData(self): return self.totaisPorData
    def set_totaisPorData(self, totaisPorData): self.totaisPorData = totaisPorData
    def get_debCredPorDataPagamento(self): return self.debCredPorDataPagamento
    def set_debCredPorDataPagamento(self, debCredPorDataPagamento): self.debCredPorDataPagamento = debCredPorDataPagamento
    def get_totalLiquidoPorData(self): return self.totalLiquidoPorData
    def set_totalLiquidoPorData(self, totalLiquidoPorData): self.totalLiquidoPorData = totalLiquidoPorData
    def hasContent_(self):
        if (
            self.dadosPagamento is not None or
            self.protocolos or
            self.totaisPorData is not None or
            self.debCredPorDataPagamento is not None or
            self.totalLiquidoPorData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosPagamentoPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosPagamentoPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosPagamentoPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosPagamentoPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosPagamentoPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dadosPagamento is not None:
            self.dadosPagamento.export(outfile, level, namespace_, name_='dadosPagamento', pretty_print=pretty_print)
        for protocolos_ in self.protocolos:
            protocolos_.export(outfile, level, namespace_, name_='protocolos', pretty_print=pretty_print)
        if self.totaisPorData is not None:
            self.totaisPorData.export(outfile, level, namespace_, name_='totaisPorData', pretty_print=pretty_print)
        if self.debCredPorDataPagamento is not None:
            self.debCredPorDataPagamento.export(outfile, level, namespace_, name_='debCredPorDataPagamento', pretty_print=pretty_print)
        if self.totalLiquidoPorData is not None:
            self.totalLiquidoPorData.export(outfile, level, namespace_, name_='totalLiquidoPorData', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='dadosPagamentoPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dadosPagamento is not None:
            showIndent(outfile, level)
            outfile.write('dadosPagamento=model_.dadosPagamento(\n')
            self.dadosPagamento.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('protocolos=[\n')
        level += 1
        for protocolos_ in self.protocolos:
            showIndent(outfile, level)
            outfile.write('model_.protocolos(\n')
            protocolos_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.totaisPorData is not None:
            showIndent(outfile, level)
            outfile.write('totaisPorData=model_.totaisPorData(\n')
            self.totaisPorData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.debCredPorDataPagamento is not None:
            showIndent(outfile, level)
            outfile.write('debCredPorDataPagamento=model_.debCredPorDataPagamento(\n')
            self.debCredPorDataPagamento.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.totalLiquidoPorData is not None:
            showIndent(outfile, level)
            outfile.write('totalLiquidoPorData=model_.totalLiquidoPorData(\n')
            self.totalLiquidoPorData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dadosPagamento':
            obj_ = dadosPagamento.factory()
            obj_.build(child_)
            self.dadosPagamento = obj_
            obj_.original_tagname_ = 'dadosPagamento'
        elif nodeName_ == 'protocolos':
            obj_ = protocolos.factory()
            obj_.build(child_)
            self.protocolos.append(obj_)
            obj_.original_tagname_ = 'protocolos'
        elif nodeName_ == 'totaisPorData':
            obj_ = totaisPorData.factory()
            obj_.build(child_)
            self.totaisPorData = obj_
            obj_.original_tagname_ = 'totaisPorData'
        elif nodeName_ == 'debCredPorDataPagamento':
            obj_ = debCredPorDataPagamento.factory()
            obj_.build(child_)
            self.debCredPorDataPagamento = obj_
            obj_.original_tagname_ = 'debCredPorDataPagamento'
        elif nodeName_ == 'totalLiquidoPorData':
            obj_ = totalLiquidoPorData.factory()
            obj_.build(child_)
            self.totalLiquidoPorData = obj_
            obj_.original_tagname_ = 'totalLiquidoPorData'
# end class dadosPagamentoPorData


class dadosPagamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dataPagamento=None, banco=None, agencia=None, conta=None):
        self.original_tagname_ = None
        if isinstance(dataPagamento, basestring):
            initvalue_ = datetime_.datetime.strptime(dataPagamento, '%Y-%m-%d').date()
        else:
            initvalue_ = dataPagamento
        self.dataPagamento = initvalue_
        self.banco = banco
        self.validate_st_texto4(self.banco)
        self.agencia = agencia
        self.validate_st_texto7(self.agencia)
        self.conta = conta
        self.validate_st_texto20(self.conta)
    def factory(*args_, **kwargs_):
        if dadosPagamento.subclass:
            return dadosPagamento.subclass(*args_, **kwargs_)
        else:
            return dadosPagamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dataPagamento(self): return self.dataPagamento
    def set_dataPagamento(self, dataPagamento): self.dataPagamento = dataPagamento
    def get_banco(self): return self.banco
    def set_banco(self, banco): self.banco = banco
    def get_agencia(self): return self.agencia
    def set_agencia(self, agencia): self.agencia = agencia
    def get_conta(self): return self.conta
    def set_conta(self, conta): self.conta = conta
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto4(self, value):
        # Validate type st_texto4, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto4' % {"value" : value.encode("utf-8")} )
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dataPagamento is not None or
            self.banco is not None or
            self.agencia is not None or
            self.conta is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosPagamento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosPagamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosPagamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosPagamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosPagamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dataPagamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataPagamento>%s</%sdataPagamento>%s' % (namespace_, self.gds_format_date(self.dataPagamento, input_name='dataPagamento'), namespace_, eol_))
        if self.banco is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbanco>%s</%sbanco>%s' % (namespace_, self.gds_format_string(quote_xml(self.banco).encode(ExternalEncoding), input_name='banco'), namespace_, eol_))
        if self.agencia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sagencia>%s</%sagencia>%s' % (namespace_, self.gds_format_string(quote_xml(self.agencia).encode(ExternalEncoding), input_name='agencia'), namespace_, eol_))
        if self.conta is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sconta>%s</%sconta>%s' % (namespace_, self.gds_format_string(quote_xml(self.conta).encode(ExternalEncoding), input_name='conta'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosPagamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.dataPagamento is not None:
            showIndent(outfile, level)
            outfile.write('dataPagamento=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataPagamento, input_name='dataPagamento'))
        if self.banco is not None:
            showIndent(outfile, level)
            outfile.write('banco=%s,\n' % quote_python(self.banco).encode(ExternalEncoding))
        if self.agencia is not None:
            showIndent(outfile, level)
            outfile.write('agencia=%s,\n' % quote_python(self.agencia).encode(ExternalEncoding))
        if self.conta is not None:
            showIndent(outfile, level)
            outfile.write('conta=%s,\n' % quote_python(self.conta).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dataPagamento':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataPagamento = dval_
            # validate type st_data
            self.validate_st_data(self.dataPagamento)
        elif nodeName_ == 'banco':
            banco_ = child_.text
            banco_ = self.gds_validate_string(banco_, node, 'banco')
            self.banco = banco_
            # validate type st_texto4
            self.validate_st_texto4(self.banco)
        elif nodeName_ == 'agencia':
            agencia_ = child_.text
            agencia_ = self.gds_validate_string(agencia_, node, 'agencia')
            self.agencia = agencia_
            # validate type st_texto7
            self.validate_st_texto7(self.agencia)
        elif nodeName_ == 'conta':
            conta_ = child_.text
            conta_ = self.gds_validate_string(conta_, node, 'conta')
            self.conta = conta_
            # validate type st_texto20
            self.validate_st_texto20(self.conta)
# end class dadosPagamento


class dadosPagamentoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, numeroGuiaPrestador=None, numeroGuiaOperadora=None, recurso=None, nomeExecutante=None, carteiraBeneficiario=None, nomeBeneficiario=None, dadosPagamento=None, observacaoGuia=None, valorTotalInformadoGuia=None, valorTotalProcessadoGuia=None, valorTotalGlosaGuia=None, valorTotalFranquiaGuia=None, valorTotalLiberadoGuia=None):
        self.original_tagname_ = None
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.recurso = recurso
        self.validate_dm_simNao(self.recurso)
        self.nomeExecutante = nomeExecutante
        self.validate_st_texto70(self.nomeExecutante)
        self.carteiraBeneficiario = carteiraBeneficiario
        self.validate_st_texto20(self.carteiraBeneficiario)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        if dadosPagamento is None:
            self.dadosPagamento = []
        else:
            self.dadosPagamento = dadosPagamento
        self.observacaoGuia = observacaoGuia
        self.validate_st_texto500(self.observacaoGuia)
        self.valorTotalInformadoGuia = valorTotalInformadoGuia
        self.valorTotalProcessadoGuia = valorTotalProcessadoGuia
        self.valorTotalGlosaGuia = valorTotalGlosaGuia
        self.valorTotalFranquiaGuia = valorTotalFranquiaGuia
        self.valorTotalLiberadoGuia = valorTotalLiberadoGuia
    def factory(*args_, **kwargs_):
        if dadosPagamentoGuia.subclass:
            return dadosPagamentoGuia.subclass(*args_, **kwargs_)
        else:
            return dadosPagamentoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_recurso(self): return self.recurso
    def set_recurso(self, recurso): self.recurso = recurso
    def get_nomeExecutante(self): return self.nomeExecutante
    def set_nomeExecutante(self, nomeExecutante): self.nomeExecutante = nomeExecutante
    def get_carteiraBeneficiario(self): return self.carteiraBeneficiario
    def set_carteiraBeneficiario(self, carteiraBeneficiario): self.carteiraBeneficiario = carteiraBeneficiario
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_dadosPagamento(self): return self.dadosPagamento
    def set_dadosPagamento(self, dadosPagamento): self.dadosPagamento = dadosPagamento
    def add_dadosPagamento(self, value): self.dadosPagamento.append(value)
    def insert_dadosPagamento_at(self, index, value): self.dadosPagamento.insert(index, value)
    def replace_dadosPagamento_at(self, index, value): self.dadosPagamento[index] = value
    def get_observacaoGuia(self): return self.observacaoGuia
    def set_observacaoGuia(self, observacaoGuia): self.observacaoGuia = observacaoGuia
    def get_valorTotalInformadoGuia(self): return self.valorTotalInformadoGuia
    def set_valorTotalInformadoGuia(self, valorTotalInformadoGuia): self.valorTotalInformadoGuia = valorTotalInformadoGuia
    def get_valorTotalProcessadoGuia(self): return self.valorTotalProcessadoGuia
    def set_valorTotalProcessadoGuia(self, valorTotalProcessadoGuia): self.valorTotalProcessadoGuia = valorTotalProcessadoGuia
    def get_valorTotalGlosaGuia(self): return self.valorTotalGlosaGuia
    def set_valorTotalGlosaGuia(self, valorTotalGlosaGuia): self.valorTotalGlosaGuia = valorTotalGlosaGuia
    def get_valorTotalFranquiaGuia(self): return self.valorTotalFranquiaGuia
    def set_valorTotalFranquiaGuia(self, valorTotalFranquiaGuia): self.valorTotalFranquiaGuia = valorTotalFranquiaGuia
    def get_valorTotalLiberadoGuia(self): return self.valorTotalLiberadoGuia
    def set_valorTotalLiberadoGuia(self, valorTotalLiberadoGuia): self.valorTotalLiberadoGuia = valorTotalLiberadoGuia
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaOperadora is not None or
            self.recurso is not None or
            self.nomeExecutante is not None or
            self.carteiraBeneficiario is not None or
            self.nomeBeneficiario is not None or
            self.dadosPagamento or
            self.observacaoGuia is not None or
            self.valorTotalInformadoGuia is not None or
            self.valorTotalProcessadoGuia is not None or
            self.valorTotalGlosaGuia is not None or
            self.valorTotalFranquiaGuia is not None or
            self.valorTotalLiberadoGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosPagamentoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosPagamentoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosPagamentoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosPagamentoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosPagamentoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.recurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecurso>%s</%srecurso>%s' % (namespace_, self.gds_format_string(quote_xml(self.recurso).encode(ExternalEncoding), input_name='recurso'), namespace_, eol_))
        if self.nomeExecutante is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeExecutante>%s</%snomeExecutante>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeExecutante).encode(ExternalEncoding), input_name='nomeExecutante'), namespace_, eol_))
        if self.carteiraBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scarteiraBeneficiario>%s</%scarteiraBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.carteiraBeneficiario).encode(ExternalEncoding), input_name='carteiraBeneficiario'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        for dadosPagamento_ in self.dadosPagamento:
            dadosPagamento_.export(outfile, level, namespace_, name_='dadosPagamento', pretty_print=pretty_print)
        if self.observacaoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacaoGuia>%s</%sobservacaoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacaoGuia).encode(ExternalEncoding), input_name='observacaoGuia'), namespace_, eol_))
        if self.valorTotalInformadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalInformadoGuia>%s</%svalorTotalInformadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalInformadoGuia).encode(ExternalEncoding), input_name='valorTotalInformadoGuia'), namespace_, eol_))
        if self.valorTotalProcessadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalProcessadoGuia>%s</%svalorTotalProcessadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalProcessadoGuia).encode(ExternalEncoding), input_name='valorTotalProcessadoGuia'), namespace_, eol_))
        if self.valorTotalGlosaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalGlosaGuia>%s</%svalorTotalGlosaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalGlosaGuia).encode(ExternalEncoding), input_name='valorTotalGlosaGuia'), namespace_, eol_))
        if self.valorTotalFranquiaGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalFranquiaGuia>%s</%svalorTotalFranquiaGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalFranquiaGuia).encode(ExternalEncoding), input_name='valorTotalFranquiaGuia'), namespace_, eol_))
        if self.valorTotalLiberadoGuia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalLiberadoGuia>%s</%svalorTotalLiberadoGuia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalLiberadoGuia).encode(ExternalEncoding), input_name='valorTotalLiberadoGuia'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosPagamentoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.recurso is not None:
            showIndent(outfile, level)
            outfile.write('recurso=%s,\n' % quote_python(self.recurso).encode(ExternalEncoding))
        if self.nomeExecutante is not None:
            showIndent(outfile, level)
            outfile.write('nomeExecutante=%s,\n' % quote_python(self.nomeExecutante).encode(ExternalEncoding))
        if self.carteiraBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('carteiraBeneficiario=%s,\n' % quote_python(self.carteiraBeneficiario).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('dadosPagamento=[\n')
        level += 1
        for dadosPagamento_ in self.dadosPagamento:
            showIndent(outfile, level)
            outfile.write('model_.dadosPagamento(\n')
            dadosPagamento_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.observacaoGuia is not None:
            showIndent(outfile, level)
            outfile.write('observacaoGuia=%s,\n' % quote_python(self.observacaoGuia).encode(ExternalEncoding))
        if self.valorTotalInformadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalInformadoGuia=%s,\n' % quote_python(self.valorTotalInformadoGuia).encode(ExternalEncoding))
        if self.valorTotalProcessadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalProcessadoGuia=%s,\n' % quote_python(self.valorTotalProcessadoGuia).encode(ExternalEncoding))
        if self.valorTotalGlosaGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalGlosaGuia=%s,\n' % quote_python(self.valorTotalGlosaGuia).encode(ExternalEncoding))
        if self.valorTotalFranquiaGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalFranquiaGuia=%s,\n' % quote_python(self.valorTotalFranquiaGuia).encode(ExternalEncoding))
        if self.valorTotalLiberadoGuia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalLiberadoGuia=%s,\n' % quote_python(self.valorTotalLiberadoGuia).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'recurso':
            recurso_ = child_.text
            recurso_ = self.gds_validate_string(recurso_, node, 'recurso')
            self.recurso = recurso_
            # validate type dm_simNao
            self.validate_dm_simNao(self.recurso)
        elif nodeName_ == 'nomeExecutante':
            nomeExecutante_ = child_.text
            nomeExecutante_ = self.gds_validate_string(nomeExecutante_, node, 'nomeExecutante')
            self.nomeExecutante = nomeExecutante_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeExecutante)
        elif nodeName_ == 'carteiraBeneficiario':
            carteiraBeneficiario_ = child_.text
            carteiraBeneficiario_ = self.gds_validate_string(carteiraBeneficiario_, node, 'carteiraBeneficiario')
            self.carteiraBeneficiario = carteiraBeneficiario_
            # validate type st_texto20
            self.validate_st_texto20(self.carteiraBeneficiario)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'dadosPagamento':
            obj_ = dadosPagamento.factory()
            obj_.build(child_)
            self.dadosPagamento.append(obj_)
            obj_.original_tagname_ = 'dadosPagamento'
        elif nodeName_ == 'observacaoGuia':
            observacaoGuia_ = child_.text
            observacaoGuia_ = self.gds_validate_string(observacaoGuia_, node, 'observacaoGuia')
            self.observacaoGuia = observacaoGuia_
            # validate type st_texto500
            self.validate_st_texto500(self.observacaoGuia)
        elif nodeName_ == 'valorTotalInformadoGuia':
            valorTotalInformadoGuia_ = child_.text
            valorTotalInformadoGuia_ = self.gds_validate_string(valorTotalInformadoGuia_, node, 'valorTotalInformadoGuia')
            self.valorTotalInformadoGuia = valorTotalInformadoGuia_
        elif nodeName_ == 'valorTotalProcessadoGuia':
            valorTotalProcessadoGuia_ = child_.text
            valorTotalProcessadoGuia_ = self.gds_validate_string(valorTotalProcessadoGuia_, node, 'valorTotalProcessadoGuia')
            self.valorTotalProcessadoGuia = valorTotalProcessadoGuia_
        elif nodeName_ == 'valorTotalGlosaGuia':
            valorTotalGlosaGuia_ = child_.text
            valorTotalGlosaGuia_ = self.gds_validate_string(valorTotalGlosaGuia_, node, 'valorTotalGlosaGuia')
            self.valorTotalGlosaGuia = valorTotalGlosaGuia_
        elif nodeName_ == 'valorTotalFranquiaGuia':
            valorTotalFranquiaGuia_ = child_.text
            valorTotalFranquiaGuia_ = self.gds_validate_string(valorTotalFranquiaGuia_, node, 'valorTotalFranquiaGuia')
            self.valorTotalFranquiaGuia = valorTotalFranquiaGuia_
        elif nodeName_ == 'valorTotalLiberadoGuia':
            valorTotalLiberadoGuia_ = child_.text
            valorTotalLiberadoGuia_ = self.gds_validate_string(valorTotalLiberadoGuia_, node, 'valorTotalLiberadoGuia')
            self.valorTotalLiberadoGuia = valorTotalLiberadoGuia_
# end class dadosPagamentoGuia


class totaisPorProtocolo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorTotalInformadoPorProtocolo=None, valorTotalProcessadoPorProtocolo=None, valorTotalGlosaPorProtocolo=None, valorTotalFranquiaPorProtocolo=None, valorTotalLiberadoPorProtocolo=None):
        self.original_tagname_ = None
        self.valorTotalInformadoPorProtocolo = valorTotalInformadoPorProtocolo
        self.valorTotalProcessadoPorProtocolo = valorTotalProcessadoPorProtocolo
        self.valorTotalGlosaPorProtocolo = valorTotalGlosaPorProtocolo
        self.valorTotalFranquiaPorProtocolo = valorTotalFranquiaPorProtocolo
        self.valorTotalLiberadoPorProtocolo = valorTotalLiberadoPorProtocolo
    def factory(*args_, **kwargs_):
        if totaisPorProtocolo.subclass:
            return totaisPorProtocolo.subclass(*args_, **kwargs_)
        else:
            return totaisPorProtocolo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorTotalInformadoPorProtocolo(self): return self.valorTotalInformadoPorProtocolo
    def set_valorTotalInformadoPorProtocolo(self, valorTotalInformadoPorProtocolo): self.valorTotalInformadoPorProtocolo = valorTotalInformadoPorProtocolo
    def get_valorTotalProcessadoPorProtocolo(self): return self.valorTotalProcessadoPorProtocolo
    def set_valorTotalProcessadoPorProtocolo(self, valorTotalProcessadoPorProtocolo): self.valorTotalProcessadoPorProtocolo = valorTotalProcessadoPorProtocolo
    def get_valorTotalGlosaPorProtocolo(self): return self.valorTotalGlosaPorProtocolo
    def set_valorTotalGlosaPorProtocolo(self, valorTotalGlosaPorProtocolo): self.valorTotalGlosaPorProtocolo = valorTotalGlosaPorProtocolo
    def get_valorTotalFranquiaPorProtocolo(self): return self.valorTotalFranquiaPorProtocolo
    def set_valorTotalFranquiaPorProtocolo(self, valorTotalFranquiaPorProtocolo): self.valorTotalFranquiaPorProtocolo = valorTotalFranquiaPorProtocolo
    def get_valorTotalLiberadoPorProtocolo(self): return self.valorTotalLiberadoPorProtocolo
    def set_valorTotalLiberadoPorProtocolo(self, valorTotalLiberadoPorProtocolo): self.valorTotalLiberadoPorProtocolo = valorTotalLiberadoPorProtocolo
    def hasContent_(self):
        if (
            self.valorTotalInformadoPorProtocolo is not None or
            self.valorTotalProcessadoPorProtocolo is not None or
            self.valorTotalGlosaPorProtocolo is not None or
            self.valorTotalFranquiaPorProtocolo is not None or
            self.valorTotalLiberadoPorProtocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisPorProtocolo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisPorProtocolo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisPorProtocolo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisPorProtocolo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisPorProtocolo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorTotalInformadoPorProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalInformadoPorProtocolo>%s</%svalorTotalInformadoPorProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalInformadoPorProtocolo).encode(ExternalEncoding), input_name='valorTotalInformadoPorProtocolo'), namespace_, eol_))
        if self.valorTotalProcessadoPorProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalProcessadoPorProtocolo>%s</%svalorTotalProcessadoPorProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalProcessadoPorProtocolo).encode(ExternalEncoding), input_name='valorTotalProcessadoPorProtocolo'), namespace_, eol_))
        if self.valorTotalGlosaPorProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalGlosaPorProtocolo>%s</%svalorTotalGlosaPorProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalGlosaPorProtocolo).encode(ExternalEncoding), input_name='valorTotalGlosaPorProtocolo'), namespace_, eol_))
        if self.valorTotalFranquiaPorProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalFranquiaPorProtocolo>%s</%svalorTotalFranquiaPorProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalFranquiaPorProtocolo).encode(ExternalEncoding), input_name='valorTotalFranquiaPorProtocolo'), namespace_, eol_))
        if self.valorTotalLiberadoPorProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalLiberadoPorProtocolo>%s</%svalorTotalLiberadoPorProtocolo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalLiberadoPorProtocolo).encode(ExternalEncoding), input_name='valorTotalLiberadoPorProtocolo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisPorProtocolo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorTotalInformadoPorProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalInformadoPorProtocolo=%s,\n' % quote_python(self.valorTotalInformadoPorProtocolo).encode(ExternalEncoding))
        if self.valorTotalProcessadoPorProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalProcessadoPorProtocolo=%s,\n' % quote_python(self.valorTotalProcessadoPorProtocolo).encode(ExternalEncoding))
        if self.valorTotalGlosaPorProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalGlosaPorProtocolo=%s,\n' % quote_python(self.valorTotalGlosaPorProtocolo).encode(ExternalEncoding))
        if self.valorTotalFranquiaPorProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalFranquiaPorProtocolo=%s,\n' % quote_python(self.valorTotalFranquiaPorProtocolo).encode(ExternalEncoding))
        if self.valorTotalLiberadoPorProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalLiberadoPorProtocolo=%s,\n' % quote_python(self.valorTotalLiberadoPorProtocolo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorTotalInformadoPorProtocolo':
            valorTotalInformadoPorProtocolo_ = child_.text
            valorTotalInformadoPorProtocolo_ = self.gds_validate_string(valorTotalInformadoPorProtocolo_, node, 'valorTotalInformadoPorProtocolo')
            self.valorTotalInformadoPorProtocolo = valorTotalInformadoPorProtocolo_
        elif nodeName_ == 'valorTotalProcessadoPorProtocolo':
            valorTotalProcessadoPorProtocolo_ = child_.text
            valorTotalProcessadoPorProtocolo_ = self.gds_validate_string(valorTotalProcessadoPorProtocolo_, node, 'valorTotalProcessadoPorProtocolo')
            self.valorTotalProcessadoPorProtocolo = valorTotalProcessadoPorProtocolo_
        elif nodeName_ == 'valorTotalGlosaPorProtocolo':
            valorTotalGlosaPorProtocolo_ = child_.text
            valorTotalGlosaPorProtocolo_ = self.gds_validate_string(valorTotalGlosaPorProtocolo_, node, 'valorTotalGlosaPorProtocolo')
            self.valorTotalGlosaPorProtocolo = valorTotalGlosaPorProtocolo_
        elif nodeName_ == 'valorTotalFranquiaPorProtocolo':
            valorTotalFranquiaPorProtocolo_ = child_.text
            valorTotalFranquiaPorProtocolo_ = self.gds_validate_string(valorTotalFranquiaPorProtocolo_, node, 'valorTotalFranquiaPorProtocolo')
            self.valorTotalFranquiaPorProtocolo = valorTotalFranquiaPorProtocolo_
        elif nodeName_ == 'valorTotalLiberadoPorProtocolo':
            valorTotalLiberadoPorProtocolo_ = child_.text
            valorTotalLiberadoPorProtocolo_ = self.gds_validate_string(valorTotalLiberadoPorProtocolo_, node, 'valorTotalLiberadoPorProtocolo')
            self.valorTotalLiberadoPorProtocolo = valorTotalLiberadoPorProtocolo_
# end class totaisPorProtocolo


class totaisPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorBrutonformadoPorData=None, valorBrutoProcessadoPorData=None, valorBrutoGlosaPorData=None, valorBrutoFranquiaPorData=None, valorBrutoLiberadoPorData=None):
        self.original_tagname_ = None
        self.valorBrutonformadoPorData = valorBrutonformadoPorData
        self.valorBrutoProcessadoPorData = valorBrutoProcessadoPorData
        self.valorBrutoGlosaPorData = valorBrutoGlosaPorData
        self.valorBrutoFranquiaPorData = valorBrutoFranquiaPorData
        self.valorBrutoLiberadoPorData = valorBrutoLiberadoPorData
    def factory(*args_, **kwargs_):
        if totaisPorData.subclass:
            return totaisPorData.subclass(*args_, **kwargs_)
        else:
            return totaisPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorBrutonformadoPorData(self): return self.valorBrutonformadoPorData
    def set_valorBrutonformadoPorData(self, valorBrutonformadoPorData): self.valorBrutonformadoPorData = valorBrutonformadoPorData
    def get_valorBrutoProcessadoPorData(self): return self.valorBrutoProcessadoPorData
    def set_valorBrutoProcessadoPorData(self, valorBrutoProcessadoPorData): self.valorBrutoProcessadoPorData = valorBrutoProcessadoPorData
    def get_valorBrutoGlosaPorData(self): return self.valorBrutoGlosaPorData
    def set_valorBrutoGlosaPorData(self, valorBrutoGlosaPorData): self.valorBrutoGlosaPorData = valorBrutoGlosaPorData
    def get_valorBrutoFranquiaPorData(self): return self.valorBrutoFranquiaPorData
    def set_valorBrutoFranquiaPorData(self, valorBrutoFranquiaPorData): self.valorBrutoFranquiaPorData = valorBrutoFranquiaPorData
    def get_valorBrutoLiberadoPorData(self): return self.valorBrutoLiberadoPorData
    def set_valorBrutoLiberadoPorData(self, valorBrutoLiberadoPorData): self.valorBrutoLiberadoPorData = valorBrutoLiberadoPorData
    def hasContent_(self):
        if (
            self.valorBrutonformadoPorData is not None or
            self.valorBrutoProcessadoPorData is not None or
            self.valorBrutoGlosaPorData is not None or
            self.valorBrutoFranquiaPorData is not None or
            self.valorBrutoLiberadoPorData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorBrutonformadoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorBrutonformadoPorData>%s</%svalorBrutonformadoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorBrutonformadoPorData).encode(ExternalEncoding), input_name='valorBrutonformadoPorData'), namespace_, eol_))
        if self.valorBrutoProcessadoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorBrutoProcessadoPorData>%s</%svalorBrutoProcessadoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorBrutoProcessadoPorData).encode(ExternalEncoding), input_name='valorBrutoProcessadoPorData'), namespace_, eol_))
        if self.valorBrutoGlosaPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorBrutoGlosaPorData>%s</%svalorBrutoGlosaPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorBrutoGlosaPorData).encode(ExternalEncoding), input_name='valorBrutoGlosaPorData'), namespace_, eol_))
        if self.valorBrutoFranquiaPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorBrutoFranquiaPorData>%s</%svalorBrutoFranquiaPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorBrutoFranquiaPorData).encode(ExternalEncoding), input_name='valorBrutoFranquiaPorData'), namespace_, eol_))
        if self.valorBrutoLiberadoPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorBrutoLiberadoPorData>%s</%svalorBrutoLiberadoPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorBrutoLiberadoPorData).encode(ExternalEncoding), input_name='valorBrutoLiberadoPorData'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorBrutonformadoPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorBrutonformadoPorData=%s,\n' % quote_python(self.valorBrutonformadoPorData).encode(ExternalEncoding))
        if self.valorBrutoProcessadoPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorBrutoProcessadoPorData=%s,\n' % quote_python(self.valorBrutoProcessadoPorData).encode(ExternalEncoding))
        if self.valorBrutoGlosaPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorBrutoGlosaPorData=%s,\n' % quote_python(self.valorBrutoGlosaPorData).encode(ExternalEncoding))
        if self.valorBrutoFranquiaPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorBrutoFranquiaPorData=%s,\n' % quote_python(self.valorBrutoFranquiaPorData).encode(ExternalEncoding))
        if self.valorBrutoLiberadoPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorBrutoLiberadoPorData=%s,\n' % quote_python(self.valorBrutoLiberadoPorData).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorBrutonformadoPorData':
            valorBrutonformadoPorData_ = child_.text
            valorBrutonformadoPorData_ = self.gds_validate_string(valorBrutonformadoPorData_, node, 'valorBrutonformadoPorData')
            self.valorBrutonformadoPorData = valorBrutonformadoPorData_
        elif nodeName_ == 'valorBrutoProcessadoPorData':
            valorBrutoProcessadoPorData_ = child_.text
            valorBrutoProcessadoPorData_ = self.gds_validate_string(valorBrutoProcessadoPorData_, node, 'valorBrutoProcessadoPorData')
            self.valorBrutoProcessadoPorData = valorBrutoProcessadoPorData_
        elif nodeName_ == 'valorBrutoGlosaPorData':
            valorBrutoGlosaPorData_ = child_.text
            valorBrutoGlosaPorData_ = self.gds_validate_string(valorBrutoGlosaPorData_, node, 'valorBrutoGlosaPorData')
            self.valorBrutoGlosaPorData = valorBrutoGlosaPorData_
        elif nodeName_ == 'valorBrutoFranquiaPorData':
            valorBrutoFranquiaPorData_ = child_.text
            valorBrutoFranquiaPorData_ = self.gds_validate_string(valorBrutoFranquiaPorData_, node, 'valorBrutoFranquiaPorData')
            self.valorBrutoFranquiaPorData = valorBrutoFranquiaPorData_
        elif nodeName_ == 'valorBrutoLiberadoPorData':
            valorBrutoLiberadoPorData_ = child_.text
            valorBrutoLiberadoPorData_ = self.gds_validate_string(valorBrutoLiberadoPorData_, node, 'valorBrutoLiberadoPorData')
            self.valorBrutoLiberadoPorData = valorBrutoLiberadoPorData_
# end class totaisPorData


class debCredPorDataPagamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, descontos=None):
        self.original_tagname_ = None
        if descontos is None:
            self.descontos = []
        else:
            self.descontos = descontos
    def factory(*args_, **kwargs_):
        if debCredPorDataPagamento.subclass:
            return debCredPorDataPagamento.subclass(*args_, **kwargs_)
        else:
            return debCredPorDataPagamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_descontos(self): return self.descontos
    def set_descontos(self, descontos): self.descontos = descontos
    def add_descontos(self, value): self.descontos.append(value)
    def insert_descontos_at(self, index, value): self.descontos.insert(index, value)
    def replace_descontos_at(self, index, value): self.descontos[index] = value
    def hasContent_(self):
        if (
            self.descontos
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='debCredPorDataPagamento', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='debCredPorDataPagamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='debCredPorDataPagamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='debCredPorDataPagamento'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='debCredPorDataPagamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for descontos_ in self.descontos:
            descontos_.export(outfile, level, namespace_, name_='descontos', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='debCredPorDataPagamento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('descontos=[\n')
        level += 1
        for descontos_ in self.descontos:
            showIndent(outfile, level)
            outfile.write('model_.ct_descontos(\n')
            descontos_.exportLiteral(outfile, level, name_='ct_descontos')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'descontos':
            obj_ = ct_descontos.factory()
            obj_.build(child_)
            self.descontos.append(obj_)
            obj_.original_tagname_ = 'descontos'
# end class debCredPorDataPagamento


class totalLiquidoPorData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorTotalDebitosPorData=None, valorTotalCreditosPorData=None, valorFinalAReceberPorData=None):
        self.original_tagname_ = None
        self.valorTotalDebitosPorData = valorTotalDebitosPorData
        self.valorTotalCreditosPorData = valorTotalCreditosPorData
        self.valorFinalAReceberPorData = valorFinalAReceberPorData
    def factory(*args_, **kwargs_):
        if totalLiquidoPorData.subclass:
            return totalLiquidoPorData.subclass(*args_, **kwargs_)
        else:
            return totalLiquidoPorData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorTotalDebitosPorData(self): return self.valorTotalDebitosPorData
    def set_valorTotalDebitosPorData(self, valorTotalDebitosPorData): self.valorTotalDebitosPorData = valorTotalDebitosPorData
    def get_valorTotalCreditosPorData(self): return self.valorTotalCreditosPorData
    def set_valorTotalCreditosPorData(self, valorTotalCreditosPorData): self.valorTotalCreditosPorData = valorTotalCreditosPorData
    def get_valorFinalAReceberPorData(self): return self.valorFinalAReceberPorData
    def set_valorFinalAReceberPorData(self, valorFinalAReceberPorData): self.valorFinalAReceberPorData = valorFinalAReceberPorData
    def hasContent_(self):
        if (
            self.valorTotalDebitosPorData is not None or
            self.valorTotalCreditosPorData is not None or
            self.valorFinalAReceberPorData is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totalLiquidoPorData', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totalLiquidoPorData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totalLiquidoPorData', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totalLiquidoPorData'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totalLiquidoPorData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorTotalDebitosPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalDebitosPorData>%s</%svalorTotalDebitosPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalDebitosPorData).encode(ExternalEncoding), input_name='valorTotalDebitosPorData'), namespace_, eol_))
        if self.valorTotalCreditosPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalCreditosPorData>%s</%svalorTotalCreditosPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalCreditosPorData).encode(ExternalEncoding), input_name='valorTotalCreditosPorData'), namespace_, eol_))
        if self.valorFinalAReceberPorData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorFinalAReceberPorData>%s</%svalorFinalAReceberPorData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorFinalAReceberPorData).encode(ExternalEncoding), input_name='valorFinalAReceberPorData'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totalLiquidoPorData'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorTotalDebitosPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalDebitosPorData=%s,\n' % quote_python(self.valorTotalDebitosPorData).encode(ExternalEncoding))
        if self.valorTotalCreditosPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalCreditosPorData=%s,\n' % quote_python(self.valorTotalCreditosPorData).encode(ExternalEncoding))
        if self.valorFinalAReceberPorData is not None:
            showIndent(outfile, level)
            outfile.write('valorFinalAReceberPorData=%s,\n' % quote_python(self.valorFinalAReceberPorData).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorTotalDebitosPorData':
            valorTotalDebitosPorData_ = child_.text
            valorTotalDebitosPorData_ = self.gds_validate_string(valorTotalDebitosPorData_, node, 'valorTotalDebitosPorData')
            self.valorTotalDebitosPorData = valorTotalDebitosPorData_
        elif nodeName_ == 'valorTotalCreditosPorData':
            valorTotalCreditosPorData_ = child_.text
            valorTotalCreditosPorData_ = self.gds_validate_string(valorTotalCreditosPorData_, node, 'valorTotalCreditosPorData')
            self.valorTotalCreditosPorData = valorTotalCreditosPorData_
        elif nodeName_ == 'valorFinalAReceberPorData':
            valorFinalAReceberPorData_ = child_.text
            valorFinalAReceberPorData_ = self.gds_validate_string(valorFinalAReceberPorData_, node, 'valorFinalAReceberPorData')
            self.valorFinalAReceberPorData = valorFinalAReceberPorData_
# end class totalLiquidoPorData


class totaisBrutoDemonstrativo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valorInformadoPorDemonstrativoData=None, valorlProcessadoPorDemonstrativo=None, valorlGlosaPorDemonstrativo=None, valoFranquiaPorDemonstrativo=None, valorLiberadoPorDemonstrativo=None):
        self.original_tagname_ = None
        self.valorInformadoPorDemonstrativoData = valorInformadoPorDemonstrativoData
        self.valorlProcessadoPorDemonstrativo = valorlProcessadoPorDemonstrativo
        self.valorlGlosaPorDemonstrativo = valorlGlosaPorDemonstrativo
        self.valoFranquiaPorDemonstrativo = valoFranquiaPorDemonstrativo
        self.valorLiberadoPorDemonstrativo = valorLiberadoPorDemonstrativo
    def factory(*args_, **kwargs_):
        if totaisBrutoDemonstrativo.subclass:
            return totaisBrutoDemonstrativo.subclass(*args_, **kwargs_)
        else:
            return totaisBrutoDemonstrativo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valorInformadoPorDemonstrativoData(self): return self.valorInformadoPorDemonstrativoData
    def set_valorInformadoPorDemonstrativoData(self, valorInformadoPorDemonstrativoData): self.valorInformadoPorDemonstrativoData = valorInformadoPorDemonstrativoData
    def get_valorlProcessadoPorDemonstrativo(self): return self.valorlProcessadoPorDemonstrativo
    def set_valorlProcessadoPorDemonstrativo(self, valorlProcessadoPorDemonstrativo): self.valorlProcessadoPorDemonstrativo = valorlProcessadoPorDemonstrativo
    def get_valorlGlosaPorDemonstrativo(self): return self.valorlGlosaPorDemonstrativo
    def set_valorlGlosaPorDemonstrativo(self, valorlGlosaPorDemonstrativo): self.valorlGlosaPorDemonstrativo = valorlGlosaPorDemonstrativo
    def get_valoFranquiaPorDemonstrativo(self): return self.valoFranquiaPorDemonstrativo
    def set_valoFranquiaPorDemonstrativo(self, valoFranquiaPorDemonstrativo): self.valoFranquiaPorDemonstrativo = valoFranquiaPorDemonstrativo
    def get_valorLiberadoPorDemonstrativo(self): return self.valorLiberadoPorDemonstrativo
    def set_valorLiberadoPorDemonstrativo(self, valorLiberadoPorDemonstrativo): self.valorLiberadoPorDemonstrativo = valorLiberadoPorDemonstrativo
    def hasContent_(self):
        if (
            self.valorInformadoPorDemonstrativoData is not None or
            self.valorlProcessadoPorDemonstrativo is not None or
            self.valorlGlosaPorDemonstrativo is not None or
            self.valoFranquiaPorDemonstrativo is not None or
            self.valorLiberadoPorDemonstrativo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='totaisBrutoDemonstrativo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='totaisBrutoDemonstrativo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='totaisBrutoDemonstrativo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='totaisBrutoDemonstrativo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='totaisBrutoDemonstrativo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.valorInformadoPorDemonstrativoData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorInformadoPorDemonstrativoData>%s</%svalorInformadoPorDemonstrativoData>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorInformadoPorDemonstrativoData).encode(ExternalEncoding), input_name='valorInformadoPorDemonstrativoData'), namespace_, eol_))
        if self.valorlProcessadoPorDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorlProcessadoPorDemonstrativo>%s</%svalorlProcessadoPorDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorlProcessadoPorDemonstrativo).encode(ExternalEncoding), input_name='valorlProcessadoPorDemonstrativo'), namespace_, eol_))
        if self.valorlGlosaPorDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorlGlosaPorDemonstrativo>%s</%svalorlGlosaPorDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorlGlosaPorDemonstrativo).encode(ExternalEncoding), input_name='valorlGlosaPorDemonstrativo'), namespace_, eol_))
        if self.valoFranquiaPorDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svaloFranquiaPorDemonstrativo>%s</%svaloFranquiaPorDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valoFranquiaPorDemonstrativo).encode(ExternalEncoding), input_name='valoFranquiaPorDemonstrativo'), namespace_, eol_))
        if self.valorLiberadoPorDemonstrativo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorLiberadoPorDemonstrativo>%s</%svalorLiberadoPorDemonstrativo>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorLiberadoPorDemonstrativo).encode(ExternalEncoding), input_name='valorLiberadoPorDemonstrativo'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='totaisBrutoDemonstrativo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.valorInformadoPorDemonstrativoData is not None:
            showIndent(outfile, level)
            outfile.write('valorInformadoPorDemonstrativoData=%s,\n' % quote_python(self.valorInformadoPorDemonstrativoData).encode(ExternalEncoding))
        if self.valorlProcessadoPorDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('valorlProcessadoPorDemonstrativo=%s,\n' % quote_python(self.valorlProcessadoPorDemonstrativo).encode(ExternalEncoding))
        if self.valorlGlosaPorDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('valorlGlosaPorDemonstrativo=%s,\n' % quote_python(self.valorlGlosaPorDemonstrativo).encode(ExternalEncoding))
        if self.valoFranquiaPorDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('valoFranquiaPorDemonstrativo=%s,\n' % quote_python(self.valoFranquiaPorDemonstrativo).encode(ExternalEncoding))
        if self.valorLiberadoPorDemonstrativo is not None:
            showIndent(outfile, level)
            outfile.write('valorLiberadoPorDemonstrativo=%s,\n' % quote_python(self.valorLiberadoPorDemonstrativo).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'valorInformadoPorDemonstrativoData':
            valorInformadoPorDemonstrativoData_ = child_.text
            valorInformadoPorDemonstrativoData_ = self.gds_validate_string(valorInformadoPorDemonstrativoData_, node, 'valorInformadoPorDemonstrativoData')
            self.valorInformadoPorDemonstrativoData = valorInformadoPorDemonstrativoData_
        elif nodeName_ == 'valorlProcessadoPorDemonstrativo':
            valorlProcessadoPorDemonstrativo_ = child_.text
            valorlProcessadoPorDemonstrativo_ = self.gds_validate_string(valorlProcessadoPorDemonstrativo_, node, 'valorlProcessadoPorDemonstrativo')
            self.valorlProcessadoPorDemonstrativo = valorlProcessadoPorDemonstrativo_
        elif nodeName_ == 'valorlGlosaPorDemonstrativo':
            valorlGlosaPorDemonstrativo_ = child_.text
            valorlGlosaPorDemonstrativo_ = self.gds_validate_string(valorlGlosaPorDemonstrativo_, node, 'valorlGlosaPorDemonstrativo')
            self.valorlGlosaPorDemonstrativo = valorlGlosaPorDemonstrativo_
        elif nodeName_ == 'valoFranquiaPorDemonstrativo':
            valoFranquiaPorDemonstrativo_ = child_.text
            valoFranquiaPorDemonstrativo_ = self.gds_validate_string(valoFranquiaPorDemonstrativo_, node, 'valoFranquiaPorDemonstrativo')
            self.valoFranquiaPorDemonstrativo = valoFranquiaPorDemonstrativo_
        elif nodeName_ == 'valorLiberadoPorDemonstrativo':
            valorLiberadoPorDemonstrativo_ = child_.text
            valorLiberadoPorDemonstrativo_ = self.gds_validate_string(valorLiberadoPorDemonstrativo_, node, 'valorLiberadoPorDemonstrativo')
            self.valorLiberadoPorDemonstrativo = valorLiberadoPorDemonstrativo_
# end class totaisBrutoDemonstrativo


class debCredDemonstrativo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, descontos=None):
        self.original_tagname_ = None
        if descontos is None:
            self.descontos = []
        else:
            self.descontos = descontos
    def factory(*args_, **kwargs_):
        if debCredDemonstrativo.subclass:
            return debCredDemonstrativo.subclass(*args_, **kwargs_)
        else:
            return debCredDemonstrativo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_descontos(self): return self.descontos
    def set_descontos(self, descontos): self.descontos = descontos
    def add_descontos(self, value): self.descontos.append(value)
    def insert_descontos_at(self, index, value): self.descontos.insert(index, value)
    def replace_descontos_at(self, index, value): self.descontos[index] = value
    def hasContent_(self):
        if (
            self.descontos
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='debCredDemonstrativo', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='debCredDemonstrativo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='debCredDemonstrativo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='debCredDemonstrativo'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='debCredDemonstrativo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for descontos_ in self.descontos:
            descontos_.export(outfile, level, namespace_, name_='descontos', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='debCredDemonstrativo'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('descontos=[\n')
        level += 1
        for descontos_ in self.descontos:
            showIndent(outfile, level)
            outfile.write('model_.ct_descontos(\n')
            descontos_.exportLiteral(outfile, level, name_='ct_descontos')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'descontos':
            obj_ = ct_descontos.factory()
            obj_.build(child_)
            self.descontos.append(obj_)
            obj_.original_tagname_ = 'descontos'
# end class debCredDemonstrativo


class cto_guiaOdontologia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaPrestador=None, numeroGuiaPrincipal=None, dataAutorizacao=None, senhaAutorizacao=None, validadeSenha=None, numeroGuiaOperadora=None, dadosBeneficiario=None, planoBeneficiario=None, nomeEmpresa=None, numeroTelefone=None, nomeTitular=None, dadosProfissionaisResponsaveis=None, procedimentosExecutados=None, dataTerminoTrat=None, tipoAtendimento=None, tipoFaturamento=None, qtdTotalUS=None, valorTotalProc=None, valorTotalFranquia=None, observacao=None, odontoInicial=None, assinaturaDigitalGuia=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaPrincipal = numeroGuiaPrincipal
        self.validate_st_texto20(self.numeroGuiaPrincipal)
        if isinstance(dataAutorizacao, basestring):
            initvalue_ = datetime_.datetime.strptime(dataAutorizacao, '%Y-%m-%d').date()
        else:
            initvalue_ = dataAutorizacao
        self.dataAutorizacao = initvalue_
        self.senhaAutorizacao = senhaAutorizacao
        self.validate_st_texto20(self.senhaAutorizacao)
        if isinstance(validadeSenha, basestring):
            initvalue_ = datetime_.datetime.strptime(validadeSenha, '%Y-%m-%d').date()
        else:
            initvalue_ = validadeSenha
        self.validadeSenha = initvalue_
        self.numeroGuiaOperadora = numeroGuiaOperadora
        self.validate_st_texto20(self.numeroGuiaOperadora)
        self.dadosBeneficiario = dadosBeneficiario
        self.planoBeneficiario = planoBeneficiario
        self.validate_st_texto40(self.planoBeneficiario)
        self.nomeEmpresa = nomeEmpresa
        self.validate_st_texto40(self.nomeEmpresa)
        self.numeroTelefone = numeroTelefone
        self.validate_st_texto11(self.numeroTelefone)
        self.nomeTitular = nomeTitular
        self.validate_st_texto70(self.nomeTitular)
        self.dadosProfissionaisResponsaveis = dadosProfissionaisResponsaveis
        if procedimentosExecutados is None:
            self.procedimentosExecutados = []
        else:
            self.procedimentosExecutados = procedimentosExecutados
        if isinstance(dataTerminoTrat, basestring):
            initvalue_ = datetime_.datetime.strptime(dataTerminoTrat, '%Y-%m-%d').date()
        else:
            initvalue_ = dataTerminoTrat
        self.dataTerminoTrat = initvalue_
        self.tipoAtendimento = tipoAtendimento
        self.validate_dm_tipoAtendimentoOdonto(self.tipoAtendimento)
        self.tipoFaturamento = tipoFaturamento
        self.validate_dm_tipoFaturamentoOdonto(self.tipoFaturamento)
        self.qtdTotalUS = qtdTotalUS
        self.valorTotalProc = valorTotalProc
        self.valorTotalFranquia = valorTotalFranquia
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.odontoInicial = odontoInicial
        self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def factory(*args_, **kwargs_):
        if cto_guiaOdontologia.subclass:
            return cto_guiaOdontologia.subclass(*args_, **kwargs_)
        else:
            return cto_guiaOdontologia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaPrincipal(self): return self.numeroGuiaPrincipal
    def set_numeroGuiaPrincipal(self, numeroGuiaPrincipal): self.numeroGuiaPrincipal = numeroGuiaPrincipal
    def get_dataAutorizacao(self): return self.dataAutorizacao
    def set_dataAutorizacao(self, dataAutorizacao): self.dataAutorizacao = dataAutorizacao
    def get_senhaAutorizacao(self): return self.senhaAutorizacao
    def set_senhaAutorizacao(self, senhaAutorizacao): self.senhaAutorizacao = senhaAutorizacao
    def get_validadeSenha(self): return self.validadeSenha
    def set_validadeSenha(self, validadeSenha): self.validadeSenha = validadeSenha
    def get_numeroGuiaOperadora(self): return self.numeroGuiaOperadora
    def set_numeroGuiaOperadora(self, numeroGuiaOperadora): self.numeroGuiaOperadora = numeroGuiaOperadora
    def get_dadosBeneficiario(self): return self.dadosBeneficiario
    def set_dadosBeneficiario(self, dadosBeneficiario): self.dadosBeneficiario = dadosBeneficiario
    def get_planoBeneficiario(self): return self.planoBeneficiario
    def set_planoBeneficiario(self, planoBeneficiario): self.planoBeneficiario = planoBeneficiario
    def get_nomeEmpresa(self): return self.nomeEmpresa
    def set_nomeEmpresa(self, nomeEmpresa): self.nomeEmpresa = nomeEmpresa
    def get_numeroTelefone(self): return self.numeroTelefone
    def set_numeroTelefone(self, numeroTelefone): self.numeroTelefone = numeroTelefone
    def get_nomeTitular(self): return self.nomeTitular
    def set_nomeTitular(self, nomeTitular): self.nomeTitular = nomeTitular
    def get_dadosProfissionaisResponsaveis(self): return self.dadosProfissionaisResponsaveis
    def set_dadosProfissionaisResponsaveis(self, dadosProfissionaisResponsaveis): self.dadosProfissionaisResponsaveis = dadosProfissionaisResponsaveis
    def get_procedimentosExecutados(self): return self.procedimentosExecutados
    def set_procedimentosExecutados(self, procedimentosExecutados): self.procedimentosExecutados = procedimentosExecutados
    def add_procedimentosExecutados(self, value): self.procedimentosExecutados.append(value)
    def insert_procedimentosExecutados_at(self, index, value): self.procedimentosExecutados.insert(index, value)
    def replace_procedimentosExecutados_at(self, index, value): self.procedimentosExecutados[index] = value
    def get_dataTerminoTrat(self): return self.dataTerminoTrat
    def set_dataTerminoTrat(self, dataTerminoTrat): self.dataTerminoTrat = dataTerminoTrat
    def get_tipoAtendimento(self): return self.tipoAtendimento
    def set_tipoAtendimento(self, tipoAtendimento): self.tipoAtendimento = tipoAtendimento
    def get_tipoFaturamento(self): return self.tipoFaturamento
    def set_tipoFaturamento(self, tipoFaturamento): self.tipoFaturamento = tipoFaturamento
    def get_qtdTotalUS(self): return self.qtdTotalUS
    def set_qtdTotalUS(self, qtdTotalUS): self.qtdTotalUS = qtdTotalUS
    def get_valorTotalProc(self): return self.valorTotalProc
    def set_valorTotalProc(self, valorTotalProc): self.valorTotalProc = valorTotalProc
    def get_valorTotalFranquia(self): return self.valorTotalFranquia
    def set_valorTotalFranquia(self, valorTotalFranquia): self.valorTotalFranquia = valorTotalFranquia
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_odontoInicial(self): return self.odontoInicial
    def set_odontoInicial(self, odontoInicial): self.odontoInicial = odontoInicial
    def get_assinaturaDigitalGuia(self): return self.assinaturaDigitalGuia
    def set_assinaturaDigitalGuia(self, assinaturaDigitalGuia): self.assinaturaDigitalGuia = assinaturaDigitalGuia
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_st_texto40(self, value):
        # Validate type st_texto40, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
    def validate_st_texto11(self, value):
        # Validate type st_texto11, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto11' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto11' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoAtendimentoOdonto(self, value):
        # Validate type dm_tipoAtendimentoOdonto, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoAtendimentoOdonto' % {"value" : value.encode("utf-8")} )
    def validate_dm_tipoFaturamentoOdonto(self, value):
        # Validate type dm_tipoFaturamentoOdonto, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '4']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoFaturamentoOdonto' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaPrincipal is not None or
            self.dataAutorizacao is not None or
            self.senhaAutorizacao is not None or
            self.validadeSenha is not None or
            self.numeroGuiaOperadora is not None or
            self.dadosBeneficiario is not None or
            self.planoBeneficiario is not None or
            self.nomeEmpresa is not None or
            self.numeroTelefone is not None or
            self.nomeTitular is not None or
            self.dadosProfissionaisResponsaveis is not None or
            self.procedimentosExecutados or
            self.dataTerminoTrat is not None or
            self.tipoAtendimento is not None or
            self.tipoFaturamento is not None or
            self.qtdTotalUS is not None or
            self.valorTotalProc is not None or
            self.valorTotalFranquia is not None or
            self.observacao is not None or
            self.odontoInicial is not None or
            self.assinaturaDigitalGuia is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_guiaOdontologia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_guiaOdontologia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_guiaOdontologia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_guiaOdontologia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_guiaOdontologia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaPrincipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrincipal>%s</%snumeroGuiaPrincipal>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrincipal).encode(ExternalEncoding), input_name='numeroGuiaPrincipal'), namespace_, eol_))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataAutorizacao>%s</%sdataAutorizacao>%s' % (namespace_, self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'), namespace_, eol_))
        if self.senhaAutorizacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssenhaAutorizacao>%s</%ssenhaAutorizacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.senhaAutorizacao).encode(ExternalEncoding), input_name='senhaAutorizacao'), namespace_, eol_))
        if self.validadeSenha is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalidadeSenha>%s</%svalidadeSenha>%s' % (namespace_, self.gds_format_date(self.validadeSenha, input_name='validadeSenha'), namespace_, eol_))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaOperadora>%s</%snumeroGuiaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaOperadora).encode(ExternalEncoding), input_name='numeroGuiaOperadora'), namespace_, eol_))
        if self.dadosBeneficiario is not None:
            self.dadosBeneficiario.export(outfile, level, namespace_, name_='dadosBeneficiario', pretty_print=pretty_print)
        if self.planoBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splanoBeneficiario>%s</%splanoBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.planoBeneficiario).encode(ExternalEncoding), input_name='planoBeneficiario'), namespace_, eol_))
        if self.nomeEmpresa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeEmpresa>%s</%snomeEmpresa>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeEmpresa).encode(ExternalEncoding), input_name='nomeEmpresa'), namespace_, eol_))
        if self.numeroTelefone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroTelefone>%s</%snumeroTelefone>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroTelefone).encode(ExternalEncoding), input_name='numeroTelefone'), namespace_, eol_))
        if self.nomeTitular is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeTitular>%s</%snomeTitular>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeTitular).encode(ExternalEncoding), input_name='nomeTitular'), namespace_, eol_))
        if self.dadosProfissionaisResponsaveis is not None:
            self.dadosProfissionaisResponsaveis.export(outfile, level, namespace_, name_='dadosProfissionaisResponsaveis', pretty_print=pretty_print)
        for procedimentosExecutados_ in self.procedimentosExecutados:
            procedimentosExecutados_.export(outfile, level, namespace_, name_='procedimentosExecutados', pretty_print=pretty_print)
        if self.dataTerminoTrat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataTerminoTrat>%s</%sdataTerminoTrat>%s' % (namespace_, self.gds_format_date(self.dataTerminoTrat, input_name='dataTerminoTrat'), namespace_, eol_))
        if self.tipoAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoAtendimento>%s</%stipoAtendimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoAtendimento).encode(ExternalEncoding), input_name='tipoAtendimento'), namespace_, eol_))
        if self.tipoFaturamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoFaturamento>%s</%stipoFaturamento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoFaturamento).encode(ExternalEncoding), input_name='tipoFaturamento'), namespace_, eol_))
        if self.qtdTotalUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdTotalUS>%s</%sqtdTotalUS>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdTotalUS).encode(ExternalEncoding), input_name='qtdTotalUS'), namespace_, eol_))
        if self.valorTotalProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalProc>%s</%svalorTotalProc>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalProc).encode(ExternalEncoding), input_name='valorTotalProc'), namespace_, eol_))
        if self.valorTotalFranquia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalFranquia>%s</%svalorTotalFranquia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalFranquia).encode(ExternalEncoding), input_name='valorTotalFranquia'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.odontoInicial is not None:
            self.odontoInicial.export(outfile, level, namespace_, name_='odontoInicial', pretty_print=pretty_print)
        if self.assinaturaDigitalGuia is not None:
            self.assinaturaDigitalGuia.export(outfile, level, namespace_, name_='assinaturaDigitalGuia', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cto_guiaOdontologia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaPrincipal is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrincipal=%s,\n' % quote_python(self.numeroGuiaPrincipal).encode(ExternalEncoding))
        if self.dataAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('dataAutorizacao=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataAutorizacao, input_name='dataAutorizacao'))
        if self.senhaAutorizacao is not None:
            showIndent(outfile, level)
            outfile.write('senhaAutorizacao=%s,\n' % quote_python(self.senhaAutorizacao).encode(ExternalEncoding))
        if self.validadeSenha is not None:
            showIndent(outfile, level)
            outfile.write('validadeSenha=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.validadeSenha, input_name='validadeSenha'))
        if self.numeroGuiaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaOperadora=%s,\n' % quote_python(self.numeroGuiaOperadora).encode(ExternalEncoding))
        if self.dadosBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('dadosBeneficiario=model_.ct_beneficiarioDados(\n')
            self.dadosBeneficiario.exportLiteral(outfile, level, name_='dadosBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.planoBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('planoBeneficiario=%s,\n' % quote_python(self.planoBeneficiario).encode(ExternalEncoding))
        if self.nomeEmpresa is not None:
            showIndent(outfile, level)
            outfile.write('nomeEmpresa=%s,\n' % quote_python(self.nomeEmpresa).encode(ExternalEncoding))
        if self.numeroTelefone is not None:
            showIndent(outfile, level)
            outfile.write('numeroTelefone=%s,\n' % quote_python(self.numeroTelefone).encode(ExternalEncoding))
        if self.nomeTitular is not None:
            showIndent(outfile, level)
            outfile.write('nomeTitular=%s,\n' % quote_python(self.nomeTitular).encode(ExternalEncoding))
        if self.dadosProfissionaisResponsaveis is not None:
            showIndent(outfile, level)
            outfile.write('dadosProfissionaisResponsaveis=model_.dadosProfissionaisResponsaveis(\n')
            self.dadosProfissionaisResponsaveis.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('procedimentosExecutados=[\n')
        level += 1
        for procedimentosExecutados_ in self.procedimentosExecutados:
            showIndent(outfile, level)
            outfile.write('model_.procedimentosExecutados(\n')
            procedimentosExecutados_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.dataTerminoTrat is not None:
            showIndent(outfile, level)
            outfile.write('dataTerminoTrat=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataTerminoTrat, input_name='dataTerminoTrat'))
        if self.tipoAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('tipoAtendimento=%s,\n' % quote_python(self.tipoAtendimento).encode(ExternalEncoding))
        if self.tipoFaturamento is not None:
            showIndent(outfile, level)
            outfile.write('tipoFaturamento=%s,\n' % quote_python(self.tipoFaturamento).encode(ExternalEncoding))
        if self.qtdTotalUS is not None:
            showIndent(outfile, level)
            outfile.write('qtdTotalUS=%s,\n' % quote_python(self.qtdTotalUS).encode(ExternalEncoding))
        if self.valorTotalProc is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalProc=%s,\n' % quote_python(self.valorTotalProc).encode(ExternalEncoding))
        if self.valorTotalFranquia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalFranquia=%s,\n' % quote_python(self.valorTotalFranquia).encode(ExternalEncoding))
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.odontoInicial is not None:
            showIndent(outfile, level)
            outfile.write('odontoInicial=model_.cto_anexoSituacaoInicialnaGTO(\n')
            self.odontoInicial.exportLiteral(outfile, level, name_='odontoInicial')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.assinaturaDigitalGuia is not None:
            showIndent(outfile, level)
            outfile.write('assinaturaDigitalGuia=model_.assinaturaDigital(\n')
            self.assinaturaDigitalGuia.exportLiteral(outfile, level, name_='assinaturaDigitalGuia')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaPrincipal':
            numeroGuiaPrincipal_ = child_.text
            numeroGuiaPrincipal_ = self.gds_validate_string(numeroGuiaPrincipal_, node, 'numeroGuiaPrincipal')
            self.numeroGuiaPrincipal = numeroGuiaPrincipal_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrincipal)
        elif nodeName_ == 'dataAutorizacao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataAutorizacao = dval_
            # validate type st_data
            self.validate_st_data(self.dataAutorizacao)
        elif nodeName_ == 'senhaAutorizacao':
            senhaAutorizacao_ = child_.text
            senhaAutorizacao_ = self.gds_validate_string(senhaAutorizacao_, node, 'senhaAutorizacao')
            self.senhaAutorizacao = senhaAutorizacao_
            # validate type st_texto20
            self.validate_st_texto20(self.senhaAutorizacao)
        elif nodeName_ == 'validadeSenha':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.validadeSenha = dval_
            # validate type st_data
            self.validate_st_data(self.validadeSenha)
        elif nodeName_ == 'numeroGuiaOperadora':
            numeroGuiaOperadora_ = child_.text
            numeroGuiaOperadora_ = self.gds_validate_string(numeroGuiaOperadora_, node, 'numeroGuiaOperadora')
            self.numeroGuiaOperadora = numeroGuiaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaOperadora)
        elif nodeName_ == 'dadosBeneficiario':
            obj_ = ct_beneficiarioDados.factory()
            obj_.build(child_)
            self.dadosBeneficiario = obj_
            obj_.original_tagname_ = 'dadosBeneficiario'
        elif nodeName_ == 'planoBeneficiario':
            planoBeneficiario_ = child_.text
            planoBeneficiario_ = self.gds_validate_string(planoBeneficiario_, node, 'planoBeneficiario')
            self.planoBeneficiario = planoBeneficiario_
            # validate type st_texto40
            self.validate_st_texto40(self.planoBeneficiario)
        elif nodeName_ == 'nomeEmpresa':
            nomeEmpresa_ = child_.text
            nomeEmpresa_ = self.gds_validate_string(nomeEmpresa_, node, 'nomeEmpresa')
            self.nomeEmpresa = nomeEmpresa_
            # validate type st_texto40
            self.validate_st_texto40(self.nomeEmpresa)
        elif nodeName_ == 'numeroTelefone':
            numeroTelefone_ = child_.text
            numeroTelefone_ = self.gds_validate_string(numeroTelefone_, node, 'numeroTelefone')
            self.numeroTelefone = numeroTelefone_
            # validate type st_texto11
            self.validate_st_texto11(self.numeroTelefone)
        elif nodeName_ == 'nomeTitular':
            nomeTitular_ = child_.text
            nomeTitular_ = self.gds_validate_string(nomeTitular_, node, 'nomeTitular')
            self.nomeTitular = nomeTitular_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeTitular)
        elif nodeName_ == 'dadosProfissionaisResponsaveis':
            obj_ = dadosProfissionaisResponsaveis.factory()
            obj_.build(child_)
            self.dadosProfissionaisResponsaveis = obj_
            obj_.original_tagname_ = 'dadosProfissionaisResponsaveis'
        elif nodeName_ == 'procedimentosExecutados':
            obj_ = procedimentosExecutados.factory()
            obj_.build(child_)
            self.procedimentosExecutados.append(obj_)
            obj_.original_tagname_ = 'procedimentosExecutados'
        elif nodeName_ == 'dataTerminoTrat':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataTerminoTrat = dval_
            # validate type st_data
            self.validate_st_data(self.dataTerminoTrat)
        elif nodeName_ == 'tipoAtendimento':
            tipoAtendimento_ = child_.text
            tipoAtendimento_ = self.gds_validate_string(tipoAtendimento_, node, 'tipoAtendimento')
            self.tipoAtendimento = tipoAtendimento_
            # validate type dm_tipoAtendimentoOdonto
            self.validate_dm_tipoAtendimentoOdonto(self.tipoAtendimento)
        elif nodeName_ == 'tipoFaturamento':
            tipoFaturamento_ = child_.text
            tipoFaturamento_ = self.gds_validate_string(tipoFaturamento_, node, 'tipoFaturamento')
            self.tipoFaturamento = tipoFaturamento_
            # validate type dm_tipoFaturamentoOdonto
            self.validate_dm_tipoFaturamentoOdonto(self.tipoFaturamento)
        elif nodeName_ == 'qtdTotalUS':
            qtdTotalUS_ = child_.text
            qtdTotalUS_ = self.gds_validate_string(qtdTotalUS_, node, 'qtdTotalUS')
            self.qtdTotalUS = qtdTotalUS_
        elif nodeName_ == 'valorTotalProc':
            valorTotalProc_ = child_.text
            valorTotalProc_ = self.gds_validate_string(valorTotalProc_, node, 'valorTotalProc')
            self.valorTotalProc = valorTotalProc_
        elif nodeName_ == 'valorTotalFranquia':
            valorTotalFranquia_ = child_.text
            valorTotalFranquia_ = self.gds_validate_string(valorTotalFranquia_, node, 'valorTotalFranquia')
            self.valorTotalFranquia = valorTotalFranquia_
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'odontoInicial':
            obj_ = cto_anexoSituacaoInicialnaGTO.factory()
            obj_.build(child_)
            self.odontoInicial = obj_
            obj_.original_tagname_ = 'odontoInicial'
        elif nodeName_ == 'assinaturaDigitalGuia':
            obj_ = assinaturaDigital.factory()
            obj_.build(child_)
            self.assinaturaDigitalGuia = obj_
            obj_.original_tagname_ = 'assinaturaDigitalGuia'
# end class cto_guiaOdontologia


class dadosProfissionaisResponsaveis(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nomeProfSolic=None, croSolic=None, ufSolic=None, cbosSolic=None, codigoProfExec=None, nomeProfExec=None, croExec=None, ufExec=None, cnesExec=None, nomeProfExec2=None, croExec2=None, ufExec2=None, cbosExec2=None):
        self.original_tagname_ = None
        self.nomeProfSolic = nomeProfSolic
        self.validate_st_texto70(self.nomeProfSolic)
        self.croSolic = croSolic
        self.validate_st_texto15(self.croSolic)
        self.ufSolic = ufSolic
        self.validate_dm_UF(self.ufSolic)
        self.cbosSolic = cbosSolic
        self.validate_dm_CBOS(self.cbosSolic)
        self.codigoProfExec = codigoProfExec
        self.validate_st_texto14(self.codigoProfExec)
        self.nomeProfExec = nomeProfExec
        self.validate_st_texto70(self.nomeProfExec)
        self.croExec = croExec
        self.validate_st_texto15(self.croExec)
        self.ufExec = ufExec
        self.validate_dm_UF(self.ufExec)
        self.cnesExec = cnesExec
        self.validate_st_texto7(self.cnesExec)
        self.nomeProfExec2 = nomeProfExec2
        self.validate_st_texto70(self.nomeProfExec2)
        self.croExec2 = croExec2
        self.validate_st_texto15(self.croExec2)
        self.ufExec2 = ufExec2
        self.validate_dm_UF(self.ufExec2)
        self.cbosExec2 = cbosExec2
        self.validate_dm_CBOS(self.cbosExec2)
    def factory(*args_, **kwargs_):
        if dadosProfissionaisResponsaveis.subclass:
            return dadosProfissionaisResponsaveis.subclass(*args_, **kwargs_)
        else:
            return dadosProfissionaisResponsaveis(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nomeProfSolic(self): return self.nomeProfSolic
    def set_nomeProfSolic(self, nomeProfSolic): self.nomeProfSolic = nomeProfSolic
    def get_croSolic(self): return self.croSolic
    def set_croSolic(self, croSolic): self.croSolic = croSolic
    def get_ufSolic(self): return self.ufSolic
    def set_ufSolic(self, ufSolic): self.ufSolic = ufSolic
    def get_cbosSolic(self): return self.cbosSolic
    def set_cbosSolic(self, cbosSolic): self.cbosSolic = cbosSolic
    def get_codigoProfExec(self): return self.codigoProfExec
    def set_codigoProfExec(self, codigoProfExec): self.codigoProfExec = codigoProfExec
    def get_nomeProfExec(self): return self.nomeProfExec
    def set_nomeProfExec(self, nomeProfExec): self.nomeProfExec = nomeProfExec
    def get_croExec(self): return self.croExec
    def set_croExec(self, croExec): self.croExec = croExec
    def get_ufExec(self): return self.ufExec
    def set_ufExec(self, ufExec): self.ufExec = ufExec
    def get_cnesExec(self): return self.cnesExec
    def set_cnesExec(self, cnesExec): self.cnesExec = cnesExec
    def get_nomeProfExec2(self): return self.nomeProfExec2
    def set_nomeProfExec2(self, nomeProfExec2): self.nomeProfExec2 = nomeProfExec2
    def get_croExec2(self): return self.croExec2
    def set_croExec2(self, croExec2): self.croExec2 = croExec2
    def get_ufExec2(self): return self.ufExec2
    def set_ufExec2(self, ufExec2): self.ufExec2 = ufExec2
    def get_cbosExec2(self): return self.cbosExec2
    def set_cbosExec2(self, cbosExec2): self.cbosExec2 = cbosExec2
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_dm_UF(self, value):
        # Validate type dm_UF, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['11', '12', '13', '14', '15', '16', '17', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '35', '41', '42', '43', '50', '51', '52', '53', '98']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_UF' % {"value" : value.encode("utf-8")} )
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on dm_UF' % {"value" : value.encode("utf-8")} )
    def validate_dm_CBOS(self, value):
        # Validate type dm_CBOS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['201115', '203015', '213150', '225105', '225110', '225148', '225185', '225115', '225120', '225210', '225215', '225220', '225225', '225230', '225235', '225240', '225305', '225350', '225125', '225130', '225135', '225140', '225310', '225145', '225150', '225315', '225320', '225155', '225160', '225245', '225165', '225170', '225175', '225180', '225250', '225190', '225195', '225103', '225106', '225255', '225109', '225260', '225112', '225118', '225265', '225121', '225270', '225275', '225325', '225124', '225127', '225280', '225133', '225330', '225136', '225139', '225285', '223204', '223208', '223212', '223216', '223220', '223224', '223228', '223232', '223236', '223240', '223244', '223248', '223252', '223256', '223260', '223264', '223268', '223272', '223505', '223605', '223910', '223905', '223710', '223810', '239425', '251510', '251545', '251550', '251605', '322205', '322220', '322225', '322230', '516210', '225121', '225325', '223276', '223280', '223284', '223288', '223293', '225122', '225142', '225151', '225203', '225290', '225295', '225335', '225340', '225345', '999999']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_CBOS' % {"value" : value.encode("utf-8")} )
    def validate_st_texto14(self, value):
        # Validate type st_texto14, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto14' % {"value" : value.encode("utf-8")} )
    def validate_st_texto7(self, value):
        # Validate type st_texto7, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto7' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nomeProfSolic is not None or
            self.croSolic is not None or
            self.ufSolic is not None or
            self.cbosSolic is not None or
            self.codigoProfExec is not None or
            self.nomeProfExec is not None or
            self.croExec is not None or
            self.ufExec is not None or
            self.cnesExec is not None or
            self.nomeProfExec2 is not None or
            self.croExec2 is not None or
            self.ufExec2 is not None or
            self.cbosExec2 is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='dadosProfissionaisResponsaveis', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='dadosProfissionaisResponsaveis')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='dadosProfissionaisResponsaveis', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='dadosProfissionaisResponsaveis'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='dadosProfissionaisResponsaveis', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nomeProfSolic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProfSolic>%s</%snomeProfSolic>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProfSolic).encode(ExternalEncoding), input_name='nomeProfSolic'), namespace_, eol_))
        if self.croSolic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scroSolic>%s</%scroSolic>%s' % (namespace_, self.gds_format_string(quote_xml(self.croSolic).encode(ExternalEncoding), input_name='croSolic'), namespace_, eol_))
        if self.ufSolic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sufSolic>%s</%sufSolic>%s' % (namespace_, self.gds_format_string(quote_xml(self.ufSolic).encode(ExternalEncoding), input_name='ufSolic'), namespace_, eol_))
        if self.cbosSolic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scbosSolic>%s</%scbosSolic>%s' % (namespace_, self.gds_format_string(quote_xml(self.cbosSolic).encode(ExternalEncoding), input_name='cbosSolic'), namespace_, eol_))
        if self.codigoProfExec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodigoProfExec>%s</%scodigoProfExec>%s' % (namespace_, self.gds_format_string(quote_xml(self.codigoProfExec).encode(ExternalEncoding), input_name='codigoProfExec'), namespace_, eol_))
        if self.nomeProfExec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProfExec>%s</%snomeProfExec>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProfExec).encode(ExternalEncoding), input_name='nomeProfExec'), namespace_, eol_))
        if self.croExec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scroExec>%s</%scroExec>%s' % (namespace_, self.gds_format_string(quote_xml(self.croExec).encode(ExternalEncoding), input_name='croExec'), namespace_, eol_))
        if self.ufExec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sufExec>%s</%sufExec>%s' % (namespace_, self.gds_format_string(quote_xml(self.ufExec).encode(ExternalEncoding), input_name='ufExec'), namespace_, eol_))
        if self.cnesExec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scnesExec>%s</%scnesExec>%s' % (namespace_, self.gds_format_string(quote_xml(self.cnesExec).encode(ExternalEncoding), input_name='cnesExec'), namespace_, eol_))
        if self.nomeProfExec2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeProfExec2>%s</%snomeProfExec2>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeProfExec2).encode(ExternalEncoding), input_name='nomeProfExec2'), namespace_, eol_))
        if self.croExec2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scroExec2>%s</%scroExec2>%s' % (namespace_, self.gds_format_string(quote_xml(self.croExec2).encode(ExternalEncoding), input_name='croExec2'), namespace_, eol_))
        if self.ufExec2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sufExec2>%s</%sufExec2>%s' % (namespace_, self.gds_format_string(quote_xml(self.ufExec2).encode(ExternalEncoding), input_name='ufExec2'), namespace_, eol_))
        if self.cbosExec2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scbosExec2>%s</%scbosExec2>%s' % (namespace_, self.gds_format_string(quote_xml(self.cbosExec2).encode(ExternalEncoding), input_name='cbosExec2'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='dadosProfissionaisResponsaveis'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.nomeProfSolic is not None:
            showIndent(outfile, level)
            outfile.write('nomeProfSolic=%s,\n' % quote_python(self.nomeProfSolic).encode(ExternalEncoding))
        if self.croSolic is not None:
            showIndent(outfile, level)
            outfile.write('croSolic=%s,\n' % quote_python(self.croSolic).encode(ExternalEncoding))
        if self.ufSolic is not None:
            showIndent(outfile, level)
            outfile.write('ufSolic=%s,\n' % quote_python(self.ufSolic).encode(ExternalEncoding))
        if self.cbosSolic is not None:
            showIndent(outfile, level)
            outfile.write('cbosSolic=%s,\n' % quote_python(self.cbosSolic).encode(ExternalEncoding))
        if self.codigoProfExec is not None:
            showIndent(outfile, level)
            outfile.write('codigoProfExec=%s,\n' % quote_python(self.codigoProfExec).encode(ExternalEncoding))
        if self.nomeProfExec is not None:
            showIndent(outfile, level)
            outfile.write('nomeProfExec=%s,\n' % quote_python(self.nomeProfExec).encode(ExternalEncoding))
        if self.croExec is not None:
            showIndent(outfile, level)
            outfile.write('croExec=%s,\n' % quote_python(self.croExec).encode(ExternalEncoding))
        if self.ufExec is not None:
            showIndent(outfile, level)
            outfile.write('ufExec=%s,\n' % quote_python(self.ufExec).encode(ExternalEncoding))
        if self.cnesExec is not None:
            showIndent(outfile, level)
            outfile.write('cnesExec=%s,\n' % quote_python(self.cnesExec).encode(ExternalEncoding))
        if self.nomeProfExec2 is not None:
            showIndent(outfile, level)
            outfile.write('nomeProfExec2=%s,\n' % quote_python(self.nomeProfExec2).encode(ExternalEncoding))
        if self.croExec2 is not None:
            showIndent(outfile, level)
            outfile.write('croExec2=%s,\n' % quote_python(self.croExec2).encode(ExternalEncoding))
        if self.ufExec2 is not None:
            showIndent(outfile, level)
            outfile.write('ufExec2=%s,\n' % quote_python(self.ufExec2).encode(ExternalEncoding))
        if self.cbosExec2 is not None:
            showIndent(outfile, level)
            outfile.write('cbosExec2=%s,\n' % quote_python(self.cbosExec2).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nomeProfSolic':
            nomeProfSolic_ = child_.text
            nomeProfSolic_ = self.gds_validate_string(nomeProfSolic_, node, 'nomeProfSolic')
            self.nomeProfSolic = nomeProfSolic_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProfSolic)
        elif nodeName_ == 'croSolic':
            croSolic_ = child_.text
            croSolic_ = self.gds_validate_string(croSolic_, node, 'croSolic')
            self.croSolic = croSolic_
            # validate type st_texto15
            self.validate_st_texto15(self.croSolic)
        elif nodeName_ == 'ufSolic':
            ufSolic_ = child_.text
            ufSolic_ = self.gds_validate_string(ufSolic_, node, 'ufSolic')
            self.ufSolic = ufSolic_
            # validate type dm_UF
            self.validate_dm_UF(self.ufSolic)
        elif nodeName_ == 'cbosSolic':
            cbosSolic_ = child_.text
            cbosSolic_ = self.gds_validate_string(cbosSolic_, node, 'cbosSolic')
            self.cbosSolic = cbosSolic_
            # validate type dm_CBOS
            self.validate_dm_CBOS(self.cbosSolic)
        elif nodeName_ == 'codigoProfExec':
            codigoProfExec_ = child_.text
            codigoProfExec_ = self.gds_validate_string(codigoProfExec_, node, 'codigoProfExec')
            self.codigoProfExec = codigoProfExec_
            # validate type st_texto14
            self.validate_st_texto14(self.codigoProfExec)
        elif nodeName_ == 'nomeProfExec':
            nomeProfExec_ = child_.text
            nomeProfExec_ = self.gds_validate_string(nomeProfExec_, node, 'nomeProfExec')
            self.nomeProfExec = nomeProfExec_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProfExec)
        elif nodeName_ == 'croExec':
            croExec_ = child_.text
            croExec_ = self.gds_validate_string(croExec_, node, 'croExec')
            self.croExec = croExec_
            # validate type st_texto15
            self.validate_st_texto15(self.croExec)
        elif nodeName_ == 'ufExec':
            ufExec_ = child_.text
            ufExec_ = self.gds_validate_string(ufExec_, node, 'ufExec')
            self.ufExec = ufExec_
            # validate type dm_UF
            self.validate_dm_UF(self.ufExec)
        elif nodeName_ == 'cnesExec':
            cnesExec_ = child_.text
            cnesExec_ = self.gds_validate_string(cnesExec_, node, 'cnesExec')
            self.cnesExec = cnesExec_
            # validate type st_texto7
            self.validate_st_texto7(self.cnesExec)
        elif nodeName_ == 'nomeProfExec2':
            nomeProfExec2_ = child_.text
            nomeProfExec2_ = self.gds_validate_string(nomeProfExec2_, node, 'nomeProfExec2')
            self.nomeProfExec2 = nomeProfExec2_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeProfExec2)
        elif nodeName_ == 'croExec2':
            croExec2_ = child_.text
            croExec2_ = self.gds_validate_string(croExec2_, node, 'croExec2')
            self.croExec2 = croExec2_
            # validate type st_texto15
            self.validate_st_texto15(self.croExec2)
        elif nodeName_ == 'ufExec2':
            ufExec2_ = child_.text
            ufExec2_ = self.gds_validate_string(ufExec2_, node, 'ufExec2')
            self.ufExec2 = ufExec2_
            # validate type dm_UF
            self.validate_dm_UF(self.ufExec2)
        elif nodeName_ == 'cbosExec2':
            cbosExec2_ = child_.text
            cbosExec2_ = self.gds_validate_string(cbosExec2_, node, 'cbosExec2')
            self.cbosExec2 = cbosExec2_
            # validate type dm_CBOS
            self.validate_dm_CBOS(self.cbosExec2)
# end class dadosProfissionaisResponsaveis


class cto_odontoSolicitacaoGuia(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaPrestador=None, numeroGuiaPrincipal=None, numeroCarteira=None, nomeBeneficiario=None, atendimentoRN=None, numeroCNS=None, identificadorBeneficiario=None, planoBeneficiario=None, nomeEmpresa=None, numeroTelefone=None, nomeTitular=None, dadosProfissionaisResponsaveis=None, procedimentosSolicitados=None, dataTerminoTrat=None, tipoAtendimento=None, qtdTotalUS=None, valorTotalProc=None, valorTotalFranquia=None, observacao=None, odontoInicial=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaPrestador = numeroGuiaPrestador
        self.validate_st_texto20(self.numeroGuiaPrestador)
        self.numeroGuiaPrincipal = numeroGuiaPrincipal
        self.validate_st_texto20(self.numeroGuiaPrincipal)
        self.numeroCarteira = numeroCarteira
        self.validate_st_texto20(self.numeroCarteira)
        self.nomeBeneficiario = nomeBeneficiario
        self.validate_st_texto70(self.nomeBeneficiario)
        self.atendimentoRN = atendimentoRN
        self.validate_dm_simNao(self.atendimentoRN)
        self.numeroCNS = numeroCNS
        self.validate_st_texto15(self.numeroCNS)
        self.identificadorBeneficiario = identificadorBeneficiario
        self.planoBeneficiario = planoBeneficiario
        self.validate_st_texto40(self.planoBeneficiario)
        self.nomeEmpresa = nomeEmpresa
        self.validate_st_texto40(self.nomeEmpresa)
        self.numeroTelefone = numeroTelefone
        self.validate_st_texto20(self.numeroTelefone)
        self.nomeTitular = nomeTitular
        self.validate_st_texto70(self.nomeTitular)
        self.dadosProfissionaisResponsaveis = dadosProfissionaisResponsaveis
        if procedimentosSolicitados is None:
            self.procedimentosSolicitados = []
        else:
            self.procedimentosSolicitados = procedimentosSolicitados
        if isinstance(dataTerminoTrat, basestring):
            initvalue_ = datetime_.datetime.strptime(dataTerminoTrat, '%Y-%m-%d').date()
        else:
            initvalue_ = dataTerminoTrat
        self.dataTerminoTrat = initvalue_
        self.tipoAtendimento = tipoAtendimento
        self.validate_dm_tipoAtendimentoOdonto(self.tipoAtendimento)
        self.qtdTotalUS = qtdTotalUS
        self.valorTotalProc = valorTotalProc
        self.valorTotalFranquia = valorTotalFranquia
        self.observacao = observacao
        self.validate_st_texto500(self.observacao)
        self.odontoInicial = odontoInicial
    def factory(*args_, **kwargs_):
        if cto_odontoSolicitacaoGuia.subclass:
            return cto_odontoSolicitacaoGuia.subclass(*args_, **kwargs_)
        else:
            return cto_odontoSolicitacaoGuia(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaPrestador(self): return self.numeroGuiaPrestador
    def set_numeroGuiaPrestador(self, numeroGuiaPrestador): self.numeroGuiaPrestador = numeroGuiaPrestador
    def get_numeroGuiaPrincipal(self): return self.numeroGuiaPrincipal
    def set_numeroGuiaPrincipal(self, numeroGuiaPrincipal): self.numeroGuiaPrincipal = numeroGuiaPrincipal
    def get_numeroCarteira(self): return self.numeroCarteira
    def set_numeroCarteira(self, numeroCarteira): self.numeroCarteira = numeroCarteira
    def get_nomeBeneficiario(self): return self.nomeBeneficiario
    def set_nomeBeneficiario(self, nomeBeneficiario): self.nomeBeneficiario = nomeBeneficiario
    def get_atendimentoRN(self): return self.atendimentoRN
    def set_atendimentoRN(self, atendimentoRN): self.atendimentoRN = atendimentoRN
    def get_numeroCNS(self): return self.numeroCNS
    def set_numeroCNS(self, numeroCNS): self.numeroCNS = numeroCNS
    def get_identificadorBeneficiario(self): return self.identificadorBeneficiario
    def set_identificadorBeneficiario(self, identificadorBeneficiario): self.identificadorBeneficiario = identificadorBeneficiario
    def get_planoBeneficiario(self): return self.planoBeneficiario
    def set_planoBeneficiario(self, planoBeneficiario): self.planoBeneficiario = planoBeneficiario
    def get_nomeEmpresa(self): return self.nomeEmpresa
    def set_nomeEmpresa(self, nomeEmpresa): self.nomeEmpresa = nomeEmpresa
    def get_numeroTelefone(self): return self.numeroTelefone
    def set_numeroTelefone(self, numeroTelefone): self.numeroTelefone = numeroTelefone
    def get_nomeTitular(self): return self.nomeTitular
    def set_nomeTitular(self, nomeTitular): self.nomeTitular = nomeTitular
    def get_dadosProfissionaisResponsaveis(self): return self.dadosProfissionaisResponsaveis
    def set_dadosProfissionaisResponsaveis(self, dadosProfissionaisResponsaveis): self.dadosProfissionaisResponsaveis = dadosProfissionaisResponsaveis
    def get_procedimentosSolicitados(self): return self.procedimentosSolicitados
    def set_procedimentosSolicitados(self, procedimentosSolicitados): self.procedimentosSolicitados = procedimentosSolicitados
    def add_procedimentosSolicitados(self, value): self.procedimentosSolicitados.append(value)
    def insert_procedimentosSolicitados_at(self, index, value): self.procedimentosSolicitados.insert(index, value)
    def replace_procedimentosSolicitados_at(self, index, value): self.procedimentosSolicitados[index] = value
    def get_dataTerminoTrat(self): return self.dataTerminoTrat
    def set_dataTerminoTrat(self, dataTerminoTrat): self.dataTerminoTrat = dataTerminoTrat
    def get_tipoAtendimento(self): return self.tipoAtendimento
    def set_tipoAtendimento(self, tipoAtendimento): self.tipoAtendimento = tipoAtendimento
    def get_qtdTotalUS(self): return self.qtdTotalUS
    def set_qtdTotalUS(self, qtdTotalUS): self.qtdTotalUS = qtdTotalUS
    def get_valorTotalProc(self): return self.valorTotalProc
    def set_valorTotalProc(self, valorTotalProc): self.valorTotalProc = valorTotalProc
    def get_valorTotalFranquia(self): return self.valorTotalFranquia
    def set_valorTotalFranquia(self, valorTotalFranquia): self.valorTotalFranquia = valorTotalFranquia
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def get_odontoInicial(self): return self.odontoInicial
    def set_odontoInicial(self, odontoInicial): self.odontoInicial = odontoInicial
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_simNao(self, value):
        # Validate type dm_simNao, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['S', 'N']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_simNao' % {"value" : value.encode("utf-8")} )
    def validate_st_texto15(self, value):
        # Validate type st_texto15, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto15' % {"value" : value.encode("utf-8")} )
    def validate_st_texto40(self, value):
        # Validate type st_texto40, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto40' % {"value" : value.encode("utf-8")} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dm_tipoAtendimentoOdonto(self, value):
        # Validate type dm_tipoAtendimentoOdonto, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2', '3', '4', '5']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_tipoAtendimentoOdonto' % {"value" : value.encode("utf-8")} )
    def validate_st_texto500(self, value):
        # Validate type st_texto500, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 500:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto500' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaPrestador is not None or
            self.numeroGuiaPrincipal is not None or
            self.numeroCarteira is not None or
            self.nomeBeneficiario is not None or
            self.atendimentoRN is not None or
            self.numeroCNS is not None or
            self.identificadorBeneficiario is not None or
            self.planoBeneficiario is not None or
            self.nomeEmpresa is not None or
            self.numeroTelefone is not None or
            self.nomeTitular is not None or
            self.dadosProfissionaisResponsaveis is not None or
            self.procedimentosSolicitados or
            self.dataTerminoTrat is not None or
            self.tipoAtendimento is not None or
            self.qtdTotalUS is not None or
            self.valorTotalProc is not None or
            self.valorTotalFranquia is not None or
            self.observacao is not None or
            self.odontoInicial is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_odontoSolicitacaoGuia', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_odontoSolicitacaoGuia')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_odontoSolicitacaoGuia', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_odontoSolicitacaoGuia'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_odontoSolicitacaoGuia', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrestador>%s</%snumeroGuiaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrestador).encode(ExternalEncoding), input_name='numeroGuiaPrestador'), namespace_, eol_))
        if self.numeroGuiaPrincipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaPrincipal>%s</%snumeroGuiaPrincipal>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaPrincipal).encode(ExternalEncoding), input_name='numeroGuiaPrincipal'), namespace_, eol_))
        if self.numeroCarteira is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCarteira>%s</%snumeroCarteira>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCarteira).encode(ExternalEncoding), input_name='numeroCarteira'), namespace_, eol_))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeBeneficiario>%s</%snomeBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeBeneficiario).encode(ExternalEncoding), input_name='nomeBeneficiario'), namespace_, eol_))
        if self.atendimentoRN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%satendimentoRN>%s</%satendimentoRN>%s' % (namespace_, self.gds_format_string(quote_xml(self.atendimentoRN).encode(ExternalEncoding), input_name='atendimentoRN'), namespace_, eol_))
        if self.numeroCNS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroCNS>%s</%snumeroCNS>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroCNS).encode(ExternalEncoding), input_name='numeroCNS'), namespace_, eol_))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentificadorBeneficiario>%s</%sidentificadorBeneficiario>%s' % (namespace_, self.gds_format_base64(self.identificadorBeneficiario, input_name='identificadorBeneficiario'), namespace_, eol_))
        if self.planoBeneficiario is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splanoBeneficiario>%s</%splanoBeneficiario>%s' % (namespace_, self.gds_format_string(quote_xml(self.planoBeneficiario).encode(ExternalEncoding), input_name='planoBeneficiario'), namespace_, eol_))
        if self.nomeEmpresa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeEmpresa>%s</%snomeEmpresa>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeEmpresa).encode(ExternalEncoding), input_name='nomeEmpresa'), namespace_, eol_))
        if self.numeroTelefone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroTelefone>%s</%snumeroTelefone>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroTelefone).encode(ExternalEncoding), input_name='numeroTelefone'), namespace_, eol_))
        if self.nomeTitular is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeTitular>%s</%snomeTitular>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeTitular).encode(ExternalEncoding), input_name='nomeTitular'), namespace_, eol_))
        if self.dadosProfissionaisResponsaveis is not None:
            self.dadosProfissionaisResponsaveis.export(outfile, level, namespace_, name_='dadosProfissionaisResponsaveis', pretty_print=pretty_print)
        for procedimentosSolicitados_ in self.procedimentosSolicitados:
            procedimentosSolicitados_.export(outfile, level, namespace_, name_='procedimentosSolicitados', pretty_print=pretty_print)
        if self.dataTerminoTrat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataTerminoTrat>%s</%sdataTerminoTrat>%s' % (namespace_, self.gds_format_date(self.dataTerminoTrat, input_name='dataTerminoTrat'), namespace_, eol_))
        if self.tipoAtendimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stipoAtendimento>%s</%stipoAtendimento>%s' % (namespace_, self.gds_format_string(quote_xml(self.tipoAtendimento).encode(ExternalEncoding), input_name='tipoAtendimento'), namespace_, eol_))
        if self.qtdTotalUS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sqtdTotalUS>%s</%sqtdTotalUS>%s' % (namespace_, self.gds_format_string(quote_xml(self.qtdTotalUS).encode(ExternalEncoding), input_name='qtdTotalUS'), namespace_, eol_))
        if self.valorTotalProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalProc>%s</%svalorTotalProc>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalProc).encode(ExternalEncoding), input_name='valorTotalProc'), namespace_, eol_))
        if self.valorTotalFranquia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalFranquia>%s</%svalorTotalFranquia>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalFranquia).encode(ExternalEncoding), input_name='valorTotalFranquia'), namespace_, eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobservacao>%s</%sobservacao>%s' % (namespace_, self.gds_format_string(quote_xml(self.observacao).encode(ExternalEncoding), input_name='observacao'), namespace_, eol_))
        if self.odontoInicial is not None:
            self.odontoInicial.export(outfile, level, namespace_, name_='odontoInicial', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='cto_odontoSolicitacaoGuia'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrestador=%s,\n' % quote_python(self.numeroGuiaPrestador).encode(ExternalEncoding))
        if self.numeroGuiaPrincipal is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaPrincipal=%s,\n' % quote_python(self.numeroGuiaPrincipal).encode(ExternalEncoding))
        if self.numeroCarteira is not None:
            showIndent(outfile, level)
            outfile.write('numeroCarteira=%s,\n' % quote_python(self.numeroCarteira).encode(ExternalEncoding))
        if self.nomeBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('nomeBeneficiario=%s,\n' % quote_python(self.nomeBeneficiario).encode(ExternalEncoding))
        if self.atendimentoRN is not None:
            showIndent(outfile, level)
            outfile.write('atendimentoRN=%s,\n' % quote_python(self.atendimentoRN).encode(ExternalEncoding))
        if self.numeroCNS is not None:
            showIndent(outfile, level)
            outfile.write('numeroCNS=%s,\n' % quote_python(self.numeroCNS).encode(ExternalEncoding))
        if self.identificadorBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('identificadorBeneficiario=model_.base64Binary(\n')
            self.identificadorBeneficiario.exportLiteral(outfile, level, name_='identificadorBeneficiario')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.planoBeneficiario is not None:
            showIndent(outfile, level)
            outfile.write('planoBeneficiario=%s,\n' % quote_python(self.planoBeneficiario).encode(ExternalEncoding))
        if self.nomeEmpresa is not None:
            showIndent(outfile, level)
            outfile.write('nomeEmpresa=%s,\n' % quote_python(self.nomeEmpresa).encode(ExternalEncoding))
        if self.numeroTelefone is not None:
            showIndent(outfile, level)
            outfile.write('numeroTelefone=%s,\n' % quote_python(self.numeroTelefone).encode(ExternalEncoding))
        if self.nomeTitular is not None:
            showIndent(outfile, level)
            outfile.write('nomeTitular=%s,\n' % quote_python(self.nomeTitular).encode(ExternalEncoding))
        if self.dadosProfissionaisResponsaveis is not None:
            showIndent(outfile, level)
            outfile.write('dadosProfissionaisResponsaveis=model_.dadosProfissionaisResponsaveis(\n')
            self.dadosProfissionaisResponsaveis.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('procedimentosSolicitados=[\n')
        level += 1
        for procedimentosSolicitados_ in self.procedimentosSolicitados:
            showIndent(outfile, level)
            outfile.write('model_.procedimentosSolicitados(\n')
            procedimentosSolicitados_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.dataTerminoTrat is not None:
            showIndent(outfile, level)
            outfile.write('dataTerminoTrat=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataTerminoTrat, input_name='dataTerminoTrat'))
        if self.tipoAtendimento is not None:
            showIndent(outfile, level)
            outfile.write('tipoAtendimento=%s,\n' % quote_python(self.tipoAtendimento).encode(ExternalEncoding))
        if self.qtdTotalUS is not None:
            showIndent(outfile, level)
            outfile.write('qtdTotalUS=%s,\n' % quote_python(self.qtdTotalUS).encode(ExternalEncoding))
        if self.valorTotalProc is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalProc=%s,\n' % quote_python(self.valorTotalProc).encode(ExternalEncoding))
        if self.valorTotalFranquia is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalFranquia=%s,\n' % quote_python(self.valorTotalFranquia).encode(ExternalEncoding))
        if self.observacao is not None:
            showIndent(outfile, level)
            outfile.write('observacao=%s,\n' % quote_python(self.observacao).encode(ExternalEncoding))
        if self.odontoInicial is not None:
            showIndent(outfile, level)
            outfile.write('odontoInicial=model_.cto_anexoSituacaoInicial(\n')
            self.odontoInicial.exportLiteral(outfile, level, name_='odontoInicial')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaPrestador':
            numeroGuiaPrestador_ = child_.text
            numeroGuiaPrestador_ = self.gds_validate_string(numeroGuiaPrestador_, node, 'numeroGuiaPrestador')
            self.numeroGuiaPrestador = numeroGuiaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrestador)
        elif nodeName_ == 'numeroGuiaPrincipal':
            numeroGuiaPrincipal_ = child_.text
            numeroGuiaPrincipal_ = self.gds_validate_string(numeroGuiaPrincipal_, node, 'numeroGuiaPrincipal')
            self.numeroGuiaPrincipal = numeroGuiaPrincipal_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaPrincipal)
        elif nodeName_ == 'numeroCarteira':
            numeroCarteira_ = child_.text
            numeroCarteira_ = self.gds_validate_string(numeroCarteira_, node, 'numeroCarteira')
            self.numeroCarteira = numeroCarteira_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroCarteira)
        elif nodeName_ == 'nomeBeneficiario':
            nomeBeneficiario_ = child_.text
            nomeBeneficiario_ = self.gds_validate_string(nomeBeneficiario_, node, 'nomeBeneficiario')
            self.nomeBeneficiario = nomeBeneficiario_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeBeneficiario)
        elif nodeName_ == 'atendimentoRN':
            atendimentoRN_ = child_.text
            atendimentoRN_ = self.gds_validate_string(atendimentoRN_, node, 'atendimentoRN')
            self.atendimentoRN = atendimentoRN_
            # validate type dm_simNao
            self.validate_dm_simNao(self.atendimentoRN)
        elif nodeName_ == 'numeroCNS':
            numeroCNS_ = child_.text
            numeroCNS_ = self.gds_validate_string(numeroCNS_, node, 'numeroCNS')
            self.numeroCNS = numeroCNS_
            # validate type st_texto15
            self.validate_st_texto15(self.numeroCNS)
        elif nodeName_ == 'identificadorBeneficiario':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'identificadorBeneficiario')
            else:
                bval_ = None
            self.identificadorBeneficiario = bval_
        elif nodeName_ == 'planoBeneficiario':
            planoBeneficiario_ = child_.text
            planoBeneficiario_ = self.gds_validate_string(planoBeneficiario_, node, 'planoBeneficiario')
            self.planoBeneficiario = planoBeneficiario_
            # validate type st_texto40
            self.validate_st_texto40(self.planoBeneficiario)
        elif nodeName_ == 'nomeEmpresa':
            nomeEmpresa_ = child_.text
            nomeEmpresa_ = self.gds_validate_string(nomeEmpresa_, node, 'nomeEmpresa')
            self.nomeEmpresa = nomeEmpresa_
            # validate type st_texto40
            self.validate_st_texto40(self.nomeEmpresa)
        elif nodeName_ == 'numeroTelefone':
            numeroTelefone_ = child_.text
            numeroTelefone_ = self.gds_validate_string(numeroTelefone_, node, 'numeroTelefone')
            self.numeroTelefone = numeroTelefone_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroTelefone)
        elif nodeName_ == 'nomeTitular':
            nomeTitular_ = child_.text
            nomeTitular_ = self.gds_validate_string(nomeTitular_, node, 'nomeTitular')
            self.nomeTitular = nomeTitular_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeTitular)
        elif nodeName_ == 'dadosProfissionaisResponsaveis':
            obj_ = dadosProfissionaisResponsaveis.factory()
            obj_.build(child_)
            self.dadosProfissionaisResponsaveis = obj_
            obj_.original_tagname_ = 'dadosProfissionaisResponsaveis'
        elif nodeName_ == 'procedimentosSolicitados':
            obj_ = procedimentosSolicitados.factory()
            obj_.build(child_)
            self.procedimentosSolicitados.append(obj_)
            obj_.original_tagname_ = 'procedimentosSolicitados'
        elif nodeName_ == 'dataTerminoTrat':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataTerminoTrat = dval_
            # validate type st_data
            self.validate_st_data(self.dataTerminoTrat)
        elif nodeName_ == 'tipoAtendimento':
            tipoAtendimento_ = child_.text
            tipoAtendimento_ = self.gds_validate_string(tipoAtendimento_, node, 'tipoAtendimento')
            self.tipoAtendimento = tipoAtendimento_
            # validate type dm_tipoAtendimentoOdonto
            self.validate_dm_tipoAtendimentoOdonto(self.tipoAtendimento)
        elif nodeName_ == 'qtdTotalUS':
            qtdTotalUS_ = child_.text
            qtdTotalUS_ = self.gds_validate_string(qtdTotalUS_, node, 'qtdTotalUS')
            self.qtdTotalUS = qtdTotalUS_
        elif nodeName_ == 'valorTotalProc':
            valorTotalProc_ = child_.text
            valorTotalProc_ = self.gds_validate_string(valorTotalProc_, node, 'valorTotalProc')
            self.valorTotalProc = valorTotalProc_
        elif nodeName_ == 'valorTotalFranquia':
            valorTotalFranquia_ = child_.text
            valorTotalFranquia_ = self.gds_validate_string(valorTotalFranquia_, node, 'valorTotalFranquia')
            self.valorTotalFranquia = valorTotalFranquia_
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type st_texto500
            self.validate_st_texto500(self.observacao)
        elif nodeName_ == 'odontoInicial':
            obj_ = cto_anexoSituacaoInicial.factory()
            obj_.build(child_)
            self.odontoInicial = obj_
            obj_.original_tagname_ = 'odontoInicial'
# end class cto_odontoSolicitacaoGuia


class cto_recursoGlosaOdonto(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, registroANS=None, numeroGuiaRecGlosaPrestador=None, nomeOperadora=None, objetoRecurso=None, numeroGuiaRecGlosaOperadora=None, dadosContratado=None, numeroLote=None, numeroProtocolo=None, opcaoRecurso=None, valorTotalRecursado=None, dataRecurso=None):
        self.original_tagname_ = None
        self.registroANS = registroANS
        self.validate_st_registroANS(self.registroANS)
        self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
        self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        self.nomeOperadora = nomeOperadora
        self.validate_st_texto70(self.nomeOperadora)
        self.objetoRecurso = objetoRecurso
        self.validate_dm_objetoRecurso(self.objetoRecurso)
        self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
        self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        self.dadosContratado = dadosContratado
        self.numeroLote = numeroLote
        self.validate_st_texto12(self.numeroLote)
        self.numeroProtocolo = numeroProtocolo
        self.validate_st_numerico12(self.numeroProtocolo)
        self.opcaoRecurso = opcaoRecurso
        self.valorTotalRecursado = valorTotalRecursado
        if isinstance(dataRecurso, basestring):
            initvalue_ = datetime_.datetime.strptime(dataRecurso, '%Y-%m-%d').date()
        else:
            initvalue_ = dataRecurso
        self.dataRecurso = initvalue_
    def factory(*args_, **kwargs_):
        if cto_recursoGlosaOdonto.subclass:
            return cto_recursoGlosaOdonto.subclass(*args_, **kwargs_)
        else:
            return cto_recursoGlosaOdonto(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_registroANS(self): return self.registroANS
    def set_registroANS(self, registroANS): self.registroANS = registroANS
    def get_numeroGuiaRecGlosaPrestador(self): return self.numeroGuiaRecGlosaPrestador
    def set_numeroGuiaRecGlosaPrestador(self, numeroGuiaRecGlosaPrestador): self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador
    def get_nomeOperadora(self): return self.nomeOperadora
    def set_nomeOperadora(self, nomeOperadora): self.nomeOperadora = nomeOperadora
    def get_objetoRecurso(self): return self.objetoRecurso
    def set_objetoRecurso(self, objetoRecurso): self.objetoRecurso = objetoRecurso
    def get_numeroGuiaRecGlosaOperadora(self): return self.numeroGuiaRecGlosaOperadora
    def set_numeroGuiaRecGlosaOperadora(self, numeroGuiaRecGlosaOperadora): self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora
    def get_dadosContratado(self): return self.dadosContratado
    def set_dadosContratado(self, dadosContratado): self.dadosContratado = dadosContratado
    def get_numeroLote(self): return self.numeroLote
    def set_numeroLote(self, numeroLote): self.numeroLote = numeroLote
    def get_numeroProtocolo(self): return self.numeroProtocolo
    def set_numeroProtocolo(self, numeroProtocolo): self.numeroProtocolo = numeroProtocolo
    def get_opcaoRecurso(self): return self.opcaoRecurso
    def set_opcaoRecurso(self, opcaoRecurso): self.opcaoRecurso = opcaoRecurso
    def get_valorTotalRecursado(self): return self.valorTotalRecursado
    def set_valorTotalRecursado(self, valorTotalRecursado): self.valorTotalRecursado = valorTotalRecursado
    def get_dataRecurso(self): return self.dataRecurso
    def set_dataRecurso(self, dataRecurso): self.dataRecurso = dataRecurso
    def validate_st_registroANS(self, value):
        # Validate type st_registroANS, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_registroANS' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_st_registroANS_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_st_registroANS_patterns_, ))
    validate_st_registroANS_patterns_ = [['^[0-9]{6}$']]
    def validate_st_texto20(self, value):
        # Validate type st_texto20, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto20' % {"value" : value.encode("utf-8")} )
    def validate_st_texto70(self, value):
        # Validate type st_texto70, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto70' % {"value" : value.encode("utf-8")} )
    def validate_dm_objetoRecurso(self, value):
        # Validate type dm_objetoRecurso, a restriction on string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on dm_objetoRecurso' % {"value" : value.encode("utf-8")} )
    def validate_st_texto12(self, value):
        # Validate type st_texto12, a restriction on string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on st_texto12' % {"value" : value.encode("utf-8")} )
    def validate_st_numerico12(self, value):
        # Validate type st_numerico12, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on st_numerico12' % {"value" : value} )
    def validate_st_data(self, value):
        # Validate type st_data, a restriction on date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.registroANS is not None or
            self.numeroGuiaRecGlosaPrestador is not None or
            self.nomeOperadora is not None or
            self.objetoRecurso is not None or
            self.numeroGuiaRecGlosaOperadora is not None or
            self.dadosContratado is not None or
            self.numeroLote is not None or
            self.numeroProtocolo is not None or
            self.opcaoRecurso is not None or
            self.valorTotalRecursado is not None or
            self.dataRecurso is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='cto_recursoGlosaOdonto', namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='cto_recursoGlosaOdonto')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='cto_recursoGlosaOdonto', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='cto_recursoGlosaOdonto'):
        pass
    def exportChildren(self, outfile, level, namespace_='ans:', name_='cto_recursoGlosaOdonto', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.registroANS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregistroANS>%s</%sregistroANS>%s' % (namespace_, self.gds_format_string(quote_xml(self.registroANS).encode(ExternalEncoding), input_name='registroANS'), namespace_, eol_))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaPrestador>%s</%snumeroGuiaRecGlosaPrestador>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaPrestador'), namespace_, eol_))
        if self.nomeOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomeOperadora>%s</%snomeOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.nomeOperadora).encode(ExternalEncoding), input_name='nomeOperadora'), namespace_, eol_))
        if self.objetoRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjetoRecurso>%s</%sobjetoRecurso>%s' % (namespace_, self.gds_format_string(quote_xml(self.objetoRecurso).encode(ExternalEncoding), input_name='objetoRecurso'), namespace_, eol_))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroGuiaRecGlosaOperadora>%s</%snumeroGuiaRecGlosaOperadora>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding), input_name='numeroGuiaRecGlosaOperadora'), namespace_, eol_))
        if self.dadosContratado is not None:
            self.dadosContratado.export(outfile, level, namespace_, name_='dadosContratado', pretty_print=pretty_print)
        if self.numeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroLote>%s</%snumeroLote>%s' % (namespace_, self.gds_format_string(quote_xml(self.numeroLote).encode(ExternalEncoding), input_name='numeroLote'), namespace_, eol_))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroProtocolo>%s</%snumeroProtocolo>%s' % (namespace_, self.gds_format_integer(self.numeroProtocolo, input_name='numeroProtocolo'), namespace_, eol_))
        if self.opcaoRecurso is not None:
            self.opcaoRecurso.export(outfile, level, namespace_, name_='opcaoRecurso', pretty_print=pretty_print)
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalorTotalRecursado>%s</%svalorTotalRecursado>%s' % (namespace_, self.gds_format_string(quote_xml(self.valorTotalRecursado).encode(ExternalEncoding), input_name='valorTotalRecursado'), namespace_, eol_))
        if self.dataRecurso is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdataRecurso>%s</%sdataRecurso>%s' % (namespace_, self.gds_format_date(self.dataRecurso, input_name='dataRecurso'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='cto_recursoGlosaOdonto'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.registroANS is not None:
            showIndent(outfile, level)
            outfile.write('registroANS=%s,\n' % quote_python(self.registroANS).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaPrestador is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaPrestador=%s,\n' % quote_python(self.numeroGuiaRecGlosaPrestador).encode(ExternalEncoding))
        if self.nomeOperadora is not None:
            showIndent(outfile, level)
            outfile.write('nomeOperadora=%s,\n' % quote_python(self.nomeOperadora).encode(ExternalEncoding))
        if self.objetoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('objetoRecurso=%s,\n' % quote_python(self.objetoRecurso).encode(ExternalEncoding))
        if self.numeroGuiaRecGlosaOperadora is not None:
            showIndent(outfile, level)
            outfile.write('numeroGuiaRecGlosaOperadora=%s,\n' % quote_python(self.numeroGuiaRecGlosaOperadora).encode(ExternalEncoding))
        if self.dadosContratado is not None:
            showIndent(outfile, level)
            outfile.write('dadosContratado=model_.ct_contratadoDados(\n')
            self.dadosContratado.exportLiteral(outfile, level, name_='dadosContratado')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.numeroLote is not None:
            showIndent(outfile, level)
            outfile.write('numeroLote=%s,\n' % quote_python(self.numeroLote).encode(ExternalEncoding))
        if self.numeroProtocolo is not None:
            showIndent(outfile, level)
            outfile.write('numeroProtocolo=%d,\n' % self.numeroProtocolo)
        if self.opcaoRecurso is not None:
            showIndent(outfile, level)
            outfile.write('opcaoRecurso=model_.opcaoRecurso(\n')
            self.opcaoRecurso.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.valorTotalRecursado is not None:
            showIndent(outfile, level)
            outfile.write('valorTotalRecursado=%s,\n' % quote_python(self.valorTotalRecursado).encode(ExternalEncoding))
        if self.dataRecurso is not None:
            showIndent(outfile, level)
            outfile.write('dataRecurso=model_.GeneratedsSuper.gds_parse_date("%s"),\n' % self.gds_format_date(self.dataRecurso, input_name='dataRecurso'))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'registroANS':
            registroANS_ = child_.text
            registroANS_ = self.gds_validate_string(registroANS_, node, 'registroANS')
            self.registroANS = registroANS_
            # validate type st_registroANS
            self.validate_st_registroANS(self.registroANS)
        elif nodeName_ == 'numeroGuiaRecGlosaPrestador':
            numeroGuiaRecGlosaPrestador_ = child_.text
            numeroGuiaRecGlosaPrestador_ = self.gds_validate_string(numeroGuiaRecGlosaPrestador_, node, 'numeroGuiaRecGlosaPrestador')
            self.numeroGuiaRecGlosaPrestador = numeroGuiaRecGlosaPrestador_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaPrestador)
        elif nodeName_ == 'nomeOperadora':
            nomeOperadora_ = child_.text
            nomeOperadora_ = self.gds_validate_string(nomeOperadora_, node, 'nomeOperadora')
            self.nomeOperadora = nomeOperadora_
            # validate type st_texto70
            self.validate_st_texto70(self.nomeOperadora)
        elif nodeName_ == 'objetoRecurso':
            objetoRecurso_ = child_.text
            objetoRecurso_ = self.gds_validate_string(objetoRecurso_, node, 'objetoRecurso')
            self.objetoRecurso = objetoRecurso_
            # validate type dm_objetoRecurso
            self.validate_dm_objetoRecurso(self.objetoRecurso)
        elif nodeName_ == 'numeroGuiaRecGlosaOperadora':
            numeroGuiaRecGlosaOperadora_ = child_.text
            numeroGuiaRecGlosaOperadora_ = self.gds_validate_string(numeroGuiaRecGlosaOperadora_, node, 'numeroGuiaRecGlosaOperadora')
            self.numeroGuiaRecGlosaOperadora = numeroGuiaRecGlosaOperadora_
            # validate type st_texto20
            self.validate_st_texto20(self.numeroGuiaRecGlosaOperadora)
        elif nodeName_ == 'dadosContratado':
            class_obj_ = self.get_class_obj_(child_, ct_contratadoDados)
            obj_ = class_obj_.factory()
            obj_.build(child_)
            self.dadosContratado = obj_
            obj_.original_tagname_ = 'dadosContratado'
        elif nodeName_ == 'numeroLote':
            numeroLote_ = child_.text
            numeroLote_ = self.gds_validate_string(numeroLote_, node, 'numeroLote')
            self.numeroLote = numeroLote_
            # validate type st_texto12
            self.validate_st_texto12(self.numeroLote)
        elif nodeName_ == 'numeroProtocolo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'numeroProtocolo')
            self.numeroProtocolo = ival_
            # validate type st_numerico12
            self.validate_st_numerico12(self.numeroProtocolo)
        elif nodeName_ == 'opcaoRecurso':
            obj_ = opcaoRecurso.factory()
            obj_.build(child_)
            self.opcaoRecurso = obj_
            obj_.original_tagname_ = 'opcaoRecurso'
        elif nodeName_ == 'valorTotalRecursado':
            valorTotalRecursado_ = child_.text
            valorTotalRecursado_ = self.gds_validate_string(valorTotalRecursado_, node, 'valorTotalRecursado')
            self.valorTotalRecursado = valorTotalRecursado_
        elif nodeName_ == 'dataRecurso':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dataRecurso = dval_
            # validate type st_data
            self.validate_st_data(self.dataRecurso)
# end class cto_recursoGlosaOdonto


class ct_solicitacaoProcedimento(ctm_solicitacaoLote):
    subclass = None
    superclass = ctm_solicitacaoLote
    def __init__(self, solicitacaoSP_SADT=None, solicitacaoInternacao=None, solicitacaoProrrogacao=None, solicitacaoOdontologia=None):
        self.original_tagname_ = None
        super(ct_solicitacaoProcedimento, self).__init__(solicitacaoSP_SADT, solicitacaoInternacao, solicitacaoProrrogacao, solicitacaoOdontologia, )
    def factory(*args_, **kwargs_):
        if ct_solicitacaoProcedimento.subclass:
            return ct_solicitacaoProcedimento.subclass(*args_, **kwargs_)
        else:
            return ct_solicitacaoProcedimento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(ct_solicitacaoProcedimento, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='ct_solicitacaoProcedimento', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ct_solicitacaoProcedimento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='ct_solicitacaoProcedimento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='ct_solicitacaoProcedimento'):
        super(ct_solicitacaoProcedimento, self).exportAttributes(outfile, level, already_processed, namespace_, name_='ct_solicitacaoProcedimento')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='ct_solicitacaoProcedimento', fromsubclass_=False, pretty_print=True):
        super(ct_solicitacaoProcedimento, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='ct_solicitacaoProcedimento'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(ct_solicitacaoProcedimento, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(ct_solicitacaoProcedimento, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(ct_solicitacaoProcedimento, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(ct_solicitacaoProcedimento, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class ct_solicitacaoProcedimento


class procedimentoRealizado(ct_procedimentoExecutadoOdonto):
    subclass = None
    superclass = ct_procedimentoExecutadoOdonto
    def __init__(self, procedimento=None, denteRegiao=None, denteFace=None, qtdProc=None, qtdUS=None, valorProc=None, valorFranquia=None, autorizado=None, dataRealizacao=None, glosasProcedimento=None):
        self.original_tagname_ = None
        super(procedimentoRealizado, self).__init__(procedimento, denteRegiao, denteFace, qtdProc, qtdUS, valorProc, valorFranquia, autorizado, dataRealizacao, )
        self.glosasProcedimento = glosasProcedimento
    def factory(*args_, **kwargs_):
        if procedimentoRealizado.subclass:
            return procedimentoRealizado.subclass(*args_, **kwargs_)
        else:
            return procedimentoRealizado(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_glosasProcedimento(self): return self.glosasProcedimento
    def set_glosasProcedimento(self, glosasProcedimento): self.glosasProcedimento = glosasProcedimento
    def hasContent_(self):
        if (
            self.glosasProcedimento is not None or
            super(procedimentoRealizado, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='procedimentoRealizado', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentoRealizado')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='procedimentoRealizado', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='procedimentoRealizado'):
        super(procedimentoRealizado, self).exportAttributes(outfile, level, already_processed, namespace_, name_='procedimentoRealizado')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='procedimentoRealizado', fromsubclass_=False, pretty_print=True):
        super(procedimentoRealizado, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.glosasProcedimento is not None:
            self.glosasProcedimento.export(outfile, level, namespace_, name_='glosasProcedimento', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='procedimentoRealizado'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(procedimentoRealizado, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(procedimentoRealizado, self).exportLiteralChildren(outfile, level, name_)
        if self.glosasProcedimento is not None:
            showIndent(outfile, level)
            outfile.write('glosasProcedimento=model_.glosasProcedimento(\n')
            self.glosasProcedimento.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(procedimentoRealizado, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'glosasProcedimento':
            obj_ = glosasProcedimento.factory()
            obj_.build(child_)
            self.glosasProcedimento = obj_
            obj_.original_tagname_ = 'glosasProcedimento'
        super(procedimentoRealizado, self).buildChildren(child_, node, nodeName_, True)
# end class procedimentoRealizado


class assinaturaDigital(SignatureType):
    subclass = None
    superclass = SignatureType
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None):
        self.original_tagname_ = None
        super(assinaturaDigital, self).__init__(Id, SignedInfo, SignatureValue, KeyInfo, Object, )
    def factory(*args_, **kwargs_):
        if assinaturaDigital.subclass:
            return assinaturaDigital.subclass(*args_, **kwargs_)
        else:
            return assinaturaDigital(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(assinaturaDigital, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='assinaturaDigital', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='assinaturaDigital')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='assinaturaDigital', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='assinaturaDigital'):
        super(assinaturaDigital, self).exportAttributes(outfile, level, already_processed, namespace_, name_='assinaturaDigital')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='assinaturaDigital', fromsubclass_=False, pretty_print=True):
        super(assinaturaDigital, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='assinaturaDigital'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(assinaturaDigital, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(assinaturaDigital, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(assinaturaDigital, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(assinaturaDigital, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class assinaturaDigital


class identificacaoPrestador(ct_prestadorIdentificacao):
    subclass = None
    superclass = ct_prestadorIdentificacao
    def __init__(self, CNPJ=None, CPF=None, codigoPrestadorNaOperadora=None):
        self.original_tagname_ = None
        super(identificacaoPrestador, self).__init__(CNPJ, CPF, codigoPrestadorNaOperadora, )
    def factory(*args_, **kwargs_):
        if identificacaoPrestador.subclass:
            return identificacaoPrestador.subclass(*args_, **kwargs_)
        else:
            return identificacaoPrestador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            super(identificacaoPrestador, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='ans:', name_='identificacaoPrestador', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identificacaoPrestador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='ans:', name_='identificacaoPrestador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='ans:', name_='identificacaoPrestador'):
        super(identificacaoPrestador, self).exportAttributes(outfile, level, already_processed, namespace_, name_='identificacaoPrestador')
    def exportChildren(self, outfile, level, namespace_='ans:', name_='identificacaoPrestador', fromsubclass_=False, pretty_print=True):
        super(identificacaoPrestador, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='identificacaoPrestador'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        super(identificacaoPrestador, self).exportLiteralAttributes(outfile, level, already_processed, name_)
    def exportLiteralChildren(self, outfile, level, name_):
        super(identificacaoPrestador, self).exportLiteralChildren(outfile, level, name_)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(identificacaoPrestador, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        super(identificacaoPrestador, self).buildChildren(child_, node, nodeName_, True)
        pass
# end class identificacaoPrestador


GDSClassesMapping = {
    'situacaoClinica': ct_situacaoClinica,
    'recebimentoLote': ct_recebimentoLote,
    'guiaHonorarios': ctm_honorarioIndividualGuia,
    'identificacaoEquipe': ct_identEquipe,
    'recursoGlosa': ct_guiaRecursoLote,
    'procedimentoExecutado': ct_procedimentoExecutadoSadt,
    'profissionalExecutante': ct_contratadoProfissionalDados,
    'SignatureProperty': SignaturePropertyType,
    'Object': ObjectType,
    'DigestMethod': DigestMethodType,
    'procRecurso': ct_procedimentoDados,
    'diagQuimio': ct_diagnosticoOncologico,
    'KeyValue': KeyValueType,
    'drogaSolicitada': ct_drogasSolicitadas,
    'contratadoExecutante': ct_contratadoDados,
    'CanonicalizationMethod': CanonicalizationMethodType,
    'vlInformadoGuia': ct_valorTotal,
    'PGPData': PGPDataType,
    'solicitacaoProrrogacao': ctm_prorrogacaoSolicitacaoGuia,
    'reciboComunicacao': ctm_beneficiarioComunicacaoRecibo,
    'loteAnexos': ct_anexoLote,
    'cabecalhoDemonstrativo': ct_demonstrativoCabecalho,
    'odontoInicial': cto_anexoSituacaoInicial,
    'servicoAutorizado': ct_procedimentoAutorizado,
    'RSAKeyValue': RSAKeyValueType,
    'autorizacaoQuimio': ctm_autorizacaoQuimio,
    'anexoSolicitacaoOPME': ctm_anexoSolicitacaoOPME,
    'relacaoProtocolos': ct_dadosResumoDemonstrativo,
    'solicitacaoQuimioterapia': ctm_anexoSolicitacaoQuimio,
    'solicitacaoDemonstrativoRetorno': ct_demonstrativoSolicitacao,
    'descontos': ct_descontos,
    'guiaSP-SADT': ctm_sp_sadtGuia,
    'operadoraParaPrestador': operadoraPrestador,
    'Reference': ReferenceType,
    'X509IssuerSerial': X509IssuerSerialType,
    'GlosaProtocolo': ct_motivoGlosa,
    'protocoloRecebimentoAnexo': ct_anexoRecebimento,
    'procSolic': ct_procedimentoDados,
    'Transforms': TransformsType,
    'SignedInfo': SignedInfoType,
    'dadosSaidaInternacao': ctm_internacaoDadosSaida,
    'demonstrativoPagamentoOdonto': cto_demonstrativoOdontologia,
    'verificaElegibilidade': ct_elegibilidadeVerifica,
    'solicitaStatusAutorizacao': ct_autorizacaoSolicitaStatus,
    'respostaRecursoGlosa': ct_respostaGlosa,
    'cabecalhoGuia': ct_guiaCabecalho,
    'solicitacaoOdontologia': cto_odontoSolicitacaoGuia,
    'medicoSolicitante': ctm_anexoSolicitante,
    'demonstrativosRetorno': ct_demonstrativoRetorno,
    'situacaoProtocolo': ct_situacaoProtocolo,
    'SignatureMethod': SignatureMethodType,
    'dadosAutorizacao': ct_autorizacaoDados,
    'SPKIData': SPKIDataType,
    'reciboGlosaOdonto': ct_glosaReciboOdonto,
    'dadosContratado': ct_contratadoDados,
    'comunicacaoInternacao': ctm_beneficiarioComunicacao,
    'profissionalSolicitante': ct_contratadoProfissionalDados,
    'reciboElegibilidade': ct_elegibilidadeRecibo,
    'solicitacaoOPME': ctm_anexoSolicitacaoOPME,
    'assinaturaDigitalGuia': assinaturaDigital,
    'protocoloRecebimento': ct_recursoGlosaRecebimento,
    'motivoGlosaGuia': ct_motivoGlosa,
    'identificacaoOperadora': ct_fontePagadora,
    'demonstrativoPagamento': ctm_demonstrativoPagamento,
    'loteGuias': ctm_guiaLote,
    'autorizacaoServicoOdonto': cto_autorizacaoServico,
    'guiaConsulta': ctm_consultaGuia,
    'autorizacaoRadio': ctm_autorizacaoRadio,
    'KeyInfo': KeyInfoType,
    'beneficiarioComunicacao': ctm_beneficiarioComunicacao,
    'Signature': SignatureType,
    'solicitacaoStatusRecursoGlosa': ct_protocoloSolicitacaoStatus,
    'demonstrativoAnaliseConta': ctm_demonstrativoAnaliseConta,
    'guiaRecursoGlosaOdonto': cto_recursoGlosaOdonto,
    'motivoGlosa': ct_motivoGlosa,
    'guiaOdonto': cto_guiaOdontologia,
    'anexoSolicitacaoQuimio': ctm_anexoSolicitacaoQuimio,
    'cancelaGuia': ct_guiaCancelamento,
    'cabecalhoSolicitacao': ct_guiaCabecalho,
    'dadosContratadoSolicitante': ct_contratadoDados,
    'SignatureValue': SignatureValueType,
    'respostaGuiaItens': ct_respostaGlosaItemMedico,
    'contratadoSolicitante': ct_contratadoDados,
    'detalheLote': ct_loteStatus,
    'reciboCancelaGuia': ct_guiaCancelamentoRecibo,
    'respostaRecursoItemOdonto': ct_respostaRecursoItemOdonto,
    'dadosGuias': ct_guiaRecurso,
    'Transform': TransformType,
    'cabecalho': cabecalhoTransacao,
    'dadosComplementaresBeneficiario': ct_dadosComplementaresBeneficiario,
    'identificacaoPrestador': ct_prestadorIdentificacao,
    'dadosProfissionalContratado': ct_contratadoProfissionalDados,
    'detalheLoteAnexo': ct_loteAnexoStatus,
    'reciboGlosa': ct_glosaRecibo,
    'autorizacaoDosServicos': ctm_autorizacaoServico,
    'anexoRadio': ctm_autorizacaoRadio,
    'solicitacaoProcedimento': ct_solicitacaoProcedimento,
    'debitosCreditos': ct_descontos,
    'equipeSadt': ct_identEquipeSADT,
    'X509Data': X509DataType,
    'dadosPrestador': ct_contratadoDados,
    'dadosAtendimento': ctm_sp_sadtAtendimento,
    'outrasDespesas': ct_outrasDespesas,
    'situacaoAutorizacao': ct_situacaoAutorizacao,
    'glosasProtocolo': ct_motivoGlosa,
    'motivosGlosa': ct_motivoGlosa,
    'prestadorAutorizado': ct_contratadoDados,
    'debitosCreditosDemonstrativo': ct_descontos,
    'identificacaoOPME': ct_procedimentoDados,
    'anexoSolicitacaoRadio': ctm_anexoSolicitacaoRadio,
    'dadosGuiasOdonto': ct_guiaDadosOdonto,
    'glosaProtocolo': ct_motivoGlosa,
    'situacaoProtocoloAnexo': ct_protocoloAnexoStatus,
    'DSAKeyValue': DSAKeyValueType,
    'diagRadio': ct_diagnosticoOncologico,
    'procedimentoComplementar': ct_procedimentosComplementares,
    'solicitacaoInternacao': ctm_internacaoSolicitacaoGuia,
    'guiaRecursoGlosa': ctm_recursoGlosa,
    'procedimentoRealizado': ct_procedimentoExecutadoHonorIndiv,
    'respostaRecursoGuiaOdonto': ct_respostaRecursoGuiaOdonto,
    'dadosInternacao': ctm_internacaoDados,
    'valorTotal': ct_guiaValorTotal,
    'servicosExecutados': ct_procedimentoExecutadoOutras,
    'valorTotalLote': ct_valorTotal,
    'cabecalhoConsulta': ct_guiaCabecalho,
    'identificacaoSolicitacao': ct_guiaCabecalho,
    'autorizacaoProrrogacao': ctm_autorizacaoProrrogacao,
    'dadosDoContratado': ct_contratadoDados,
    'dadosPagamento': ct_pagamentoDados,
    'dadosProfissionalSolicitante': ct_contratadoProfissionalDados,
    'loginSenhaPrestador': ct_loginSenha,
    'prestadorParaOperadora': prestadorOperadora,
    'cabecalhoAnexo': ct_anexoCabecalho,
    'anexoQuimio': ctm_autorizacaoQuimio,
    'anexoOPME': ctm_autorizacaoOPME,
    'detalheProtocolo': ct_protocoloRecurso,
    'identificacao': ct_procedimentoDados,
    'guias': ct_guiaDadosOdonto,
    'mensagemErro': ct_motivoGlosa,
    'recebimentoRecursoGlosa': ct_recebimentoRecurso,
    'guiaResumoInternacao': ctm_internacaoResumoGuia,
    'SignatureProperties': SignaturePropertiesType,
    'procedimento': ct_procedimentoDados,
    'respostaGuia': ct_respostaGlosaGuiaMedica,
    'Manifest': ManifestType,
    'dadosBeneficiario': ct_beneficiarioDados,
    'RetrievalMethod': RetrievalMethodType,
    'autorizacaoServicos': ct_situacaoAutorizacao,
    'anexoSituacaoInicial': cto_anexoSituacaoInicial,
    'solicitacaoStatusProtocolo': ct_protocoloSolicitacaoStatus,
    'autorizacaoInternacao': ctm_autorizacaoInternacao,
    'solicitacaoRadioterapia': ctm_anexoSolicitacaoRadio,
    'diagnostico': ct_diagnostico,
    'autorizacaoServico': ctm_autorizacaoServico,
    'solicitacaoSP-SADT': ctm_sp_sadtSolicitacaoGuia,
    'motivoNegativa': ct_motivoGlosa,
    'situacaoDoProtocolo': ct_protocoloStatus,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'mensagemTISS'
        rootClass = mensagemTISS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'mensagemTISS'
        rootClass = mensagemTISS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    from StringIO import StringIO
    parser = None
    doc = parsexml_(StringIO(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'mensagemTISS'
        rootClass = mensagemTISS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:ans="http://www.ans.gov.br/padroes/tiss/schemas"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'mensagemTISS'
        rootClass = mensagemTISS
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from tissV3_02_01 import *\n\n')
        sys.stdout.write('import tissV3_02_01 as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AnexosGuiasTISS",
    "CanonicalizationMethodType",
    "DSAKeyValueType",
    "DigestMethodType",
    "KeyInfoType",
    "KeyValueType",
    "ManifestType",
    "OPM",
    "ObjectType",
    "PGPDataType",
    "RSAKeyValueType",
    "ReferenceType",
    "RetrievalMethodType",
    "SPKIDataType",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "X509IssuerSerialType",
    "anexoClinico",
    "anexoClinicoProrrogacao",
    "anexosClinicos",
    "assinaturaDigital",
    "beneficiario",
    "cabecalhoDemonstrativoOdonto",
    "cabecalhoGuia",
    "cabecalhoTransacao",
    "codProfissional",
    "codigoContratado",
    "contratadoExecutante",
    "cpfCNPJContratado",
    "ct_anexoCabecalho",
    "ct_anexoLote",
    "ct_anexoRecebimento",
    "ct_autorizacaoDados",
    "ct_autorizacaoInternacao",
    "ct_autorizacaoSADT",
    "ct_autorizacaoSolicitaStatus",
    "ct_beneficiarioDados",
    "ct_contaMedicaResumo",
    "ct_contratadoDados",
    "ct_contratadoProfissionalDados",
    "ct_creditoOdonto",
    "ct_dadosComplementaresBeneficiario",
    "ct_dadosComplementaresBeneficiarioRadio",
    "ct_dadosResumoDemonstrativo",
    "ct_demonstrativoCabecalho",
    "ct_demonstrativoRetorno",
    "ct_demonstrativoSolicitacao",
    "ct_descontos",
    "ct_diagnostico",
    "ct_diagnosticoOncologico",
    "ct_drogasSolicitadas",
    "ct_elegibilidadeRecibo",
    "ct_elegibilidadeVerifica",
    "ct_fontePagadora",
    "ct_glosaRecibo",
    "ct_glosaReciboOdonto",
    "ct_guiaCabecalho",
    "ct_guiaCancelamento",
    "ct_guiaCancelamentoRecibo",
    "ct_guiaDados",
    "ct_guiaDadosAnexo",
    "ct_guiaDadosOdonto",
    "ct_guiaRecurso",
    "ct_guiaRecursoLote",
    "ct_guiaValorTotal",
    "ct_guiaValorTotalSADT",
    "ct_hipoteseDiagnostica",
    "ct_identEquipe",
    "ct_identEquipeSADT",
    "ct_intervaloCiclos",
    "ct_loginSenha",
    "ct_loteAnexoStatus",
    "ct_loteStatus",
    "ct_motivoGlosa",
    "ct_opmUtilizada",
    "ct_opmeDados",
    "ct_outrasDespesas",
    "ct_pagamentoDados",
    "ct_pagamentoResumo",
    "ct_prestadorIdentificacao",
    "ct_procedimentoAutorizado",
    "ct_procedimentoDados",
    "ct_procedimentoExecutado",
    "ct_procedimentoExecutadoHonorIndiv",
    "ct_procedimentoExecutadoInt",
    "ct_procedimentoExecutadoOdonto",
    "ct_procedimentoExecutadoOutras",
    "ct_procedimentoExecutadoSadt",
    "ct_procedimentoSolicitado",
    "ct_procedimentosComplementares",
    "ct_protocoloAnexoStatus",
    "ct_protocoloDetalhe",
    "ct_protocoloDetalheAnexo",
    "ct_protocoloRecebimento",
    "ct_protocoloRecebimentoAnexo",
    "ct_protocoloRecebimentoRecurso",
    "ct_protocoloRecurso",
    "ct_protocoloSolicitacaoStatus",
    "ct_protocoloStatus",
    "ct_recebimentoLote",
    "ct_recebimentoRecurso",
    "ct_reciboCancelaGuia",
    "ct_reciboComunicacao",
    "ct_recursoGlosaRecebimento",
    "ct_respostaElegibilidade",
    "ct_respostaGlosa",
    "ct_respostaGlosaGuiaMedica",
    "ct_respostaGlosaItemMedico",
    "ct_respostaRecursoGuiaOdonto",
    "ct_respostaRecursoItemOdonto",
    "ct_situacaoAutorizacao",
    "ct_situacaoClinica",
    "ct_situacaoInicial",
    "ct_situacaoProtocolo",
    "ct_solicitacaoProcedimento",
    "ct_valorCreditoDesconto",
    "ct_valorTotal",
    "ctm_anexoSolicitacaoOPME",
    "ctm_anexoSolicitacaoQuimio",
    "ctm_anexoSolicitacaoRadio",
    "ctm_anexoSolicitante",
    "ctm_autorizacaoInternacao",
    "ctm_autorizacaoOPME",
    "ctm_autorizacaoProrrogacao",
    "ctm_autorizacaoQuimio",
    "ctm_autorizacaoRadio",
    "ctm_autorizacaoServico",
    "ctm_beneficiarioComunicacao",
    "ctm_beneficiarioComunicacaoRecibo",
    "ctm_consultaAtendimento",
    "ctm_consultaGuia",
    "ctm_demonstrativoAnaliseConta",
    "ctm_demonstrativoPagamento",
    "ctm_guiaLote",
    "ctm_honorarioIndividualGuia",
    "ctm_internacaoDados",
    "ctm_internacaoDadosSaida",
    "ctm_internacaoResumoGuia",
    "ctm_internacaoSolicitacaoGuia",
    "ctm_prorrogacaoSolicitacaoGuia",
    "ctm_recursoGlosa",
    "ctm_solicitacaoLote",
    "ctm_sp_sadtAtendimento",
    "ctm_sp_sadtGuia",
    "ctm_sp_sadtSolicitacaoGuia",
    "cto_anexoSituacaoInicial",
    "cto_anexoSituacaoInicialnaGTO",
    "cto_autorizacaoServico",
    "cto_demonstrativoOdontologia",
    "cto_guiaOdontologia",
    "cto_odontoSolicitacaoGuia",
    "cto_recursoGlosaOdonto",
    "dadosBeneficiario",
    "dadosConta",
    "dadosContratado",
    "dadosContratadoExecutante",
    "dadosExecutante",
    "dadosGuia",
    "dadosGuiasProtocolo",
    "dadosHospitalSolicitado",
    "dadosInternacao",
    "dadosPagamento",
    "dadosPagamentoGuia",
    "dadosPagamentoPorData",
    "dadosPrestador",
    "dadosProfissionaisResponsaveis",
    "dadosProtocolo",
    "dadosResumo",
    "dadosSolicitacao",
    "dadosSolicitante",
    "debCredDemonstrativo",
    "debCredPorDataPagamento",
    "debitosCreditosPorData",
    "declaracoes",
    "demonstrativoAnalise",
    "demonstrativoPagamento",
    "denteRegiao",
    "dentes",
    "despesa",
    "destino",
    "detalhesGuia",
    "diagnosticoOncologicoQuimioterapia",
    "diagnosticoOncologicoRadio",
    "drogasSolicitadas",
    "epilogo",
    "glosaAnexo",
    "glosaGuia",
    "glosaProtocolo",
    "glosasProcedimento",
    "guiasCanceladas",
    "guiasCancelamento",
    "guiasMedicas",
    "guiasOdonto",
    "guiasRecurso",
    "guiasTISS",
    "hipotesesDiagnosticas",
    "identEquipe",
    "identificacaoOPM",
    "identificacaoPrestador",
    "identificacaoSolicitante",
    "identificacaoTransacao",
    "itensGuia",
    "localContratado",
    "lote",
    "loteAnexo",
    "mensagemTISS",
    "motivosGlosa",
    "motivosNegativa",
    "opcaoRecurso",
    "opcaoRecursoGuia",
    "operadoraPrestador",
    "opmeSolicitada",
    "opmeSolicitadas",
    "origem",
    "pagamentos",
    "pagamentosPorData",
    "periodo",
    "periodoProc",
    "prestadorAutorizado",
    "prestadorOperadora",
    "procedimento",
    "procedimentoRealizado",
    "procedimentoSolicitado",
    "procedimentosAdicionais",
    "procedimentosAutorizados",
    "procedimentosComplementares",
    "procedimentosExecutados",
    "procedimentosRealizados",
    "procedimentosSolicitados",
    "profissionais",
    "protocolos",
    "recebimentoAnexo",
    "reciboGlosaStatus",
    "recursoGuia",
    "recursoGuiaCompleta",
    "recursoProcedimento",
    "recursoProtocolo",
    "relacaoGlosa",
    "relacaoGuias",
    "respostaElegibilidade",
    "servicosAutorizados",
    "servicosAutorizadosOPME",
    "situacaoDemonstrativoRetorno",
    "totaisBrutoDemonstrativo",
    "totaisBrutosDemonstrativo",
    "totaisBrutosPorData",
    "totaisDemonstrativo",
    "totaisLiquidosDemonstrativo",
    "totaisLiquidosPorData",
    "totaisPorData",
    "totaisPorProtocolo",
    "totalLiquidoPorData",
    "tratamentosAnteriores"
]
